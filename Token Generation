*&---------------------------------------------------------------------*
*& Report ZEINV_GET_TOKEN
*&---------------------------------------------------------------------*
*&  Program     :  ZEINV_GET_TOKEN                                     *
*&  Created by  :  Hardik Patel - L&T INFOTECH                         *
*&  Requester   :  Pavan Yadav/Vaibhav Tapkire - L&T Infotech          *
*&  Created on  :  05/03/2020                                          *
*&  Project     :  E-Invoicing Implementation                          *
*&  Ticket No   :                                                      *
*&  WIMS No     :                                                      *
*&  Workbenc Req:  Developement - SEDK960320                           *
*&---------------------------------------------------------------------*
*&  Change ID   :  CH-001                                              *
*&  Changed by  :  Malvika Sebastian - LTI                             *
*&  Requester   :  Hemanshu Patel    - LTI                             *
*&  Changed on  :  16/12/2020                                          *
*&  Project     :  8131-01                                             *
*&  Ticket No   :                                                      *
*&  Workbenc Req:  Developement - SEDK965516                           *
*&---------------------------------------------------------------------*
*&  Change ID   :  CH-002                                              *
*&  Changed by  :  Dharmesh Sudani - LTI                               *
*&  Requester   :  Premnath    - LTI                                   *
*&  Changed on  :  16/12/2020                                          *
*&  Project     :  8131-01                                             *
*&  Ticket No   :                                                      *
*&  Workbenc Req:  Developement - SEDK965485                           *
*&---------------------------------------------------------------------*
*&  Change ID   :  CH-003                                              *
*&  Changed by  :  Vijayalakshmi K                                     *
*&  Requester   :  Priya Bastodkar                                     *
*&  Changed on  :  22/11/2023                                          *
*&  Project     :  10912-01                                            *
*&  Ticket No   :  119506                                              *
*&  Workbenc Req:  Developement - SEDK965485                           *
*&---------------------------------------------------------------------*
*&  Change ID   :  sneha-121467                                        *
*&  Changed by  :  Sneha Singh                                         *
*&  Requester   :  Suresh Kumar                                        *
*&  Changed on  :  02/07/2024                                          *
*&  Project     :  10912-01                                            *
*&  Ticket No   :  121467                                              *
*&---------------------------------------------------------------------*
*&  Change ID   :  sneha-122076                                        *
*&  Changed by  :  Sneha Singh                                         *
*&  Requester   :  Toseef Sayed                                        *
*&  Changed on  :  08/11/2024                                          *
*&  Project     :  10912-01                                            *
*&  Ticket No   :  122076                                              *
*&---------------------------------------------------------------------*
REPORT zeinv_get_token.

DATA : wa_einv_token  TYPE zeinv_token.
DATA : wa_einv_log TYPE zeinv_token_log. "sneha
DATA : lo_client      TYPE REF TO if_http_client.
DATA : lo_rest_client TYPE REF TO cl_rest_http_client.
DATA : lo_response    TYPE REF TO if_rest_entity.
DATA : lv_url         TYPE string.
DATA : response       TYPE string.
DATA : xstring        TYPE xstring.
DATA : lv_body        TYPE string.
DATA : lo_request     TYPE REF TO if_rest_entity.
DATA : status         TYPE string.
DATA : message        TYPE string.
DATA : errormsg       TYPE string.

TYPES: BEGIN OF ty_json_req,
         email    TYPE string,
         password TYPE string,
       END OF ty_json_req.
DATA: json_req TYPE ty_json_req.

DATA: BEGIN OF node_wa,
        node_type TYPE string,
        prefix    TYPE string,
        name      TYPE string,
        nsuri     TYPE string,
        value     TYPE string,
        value_raw TYPE xstring,
      END OF node_wa,
      nodes LIKE TABLE OF node_wa.

PARAMETERS : p_gstin TYPE zzplgst.

START-OF-SELECTION.
  IF p_gstin IS INITIAL.

* BOC : CH-003
    SELECT * FROM zeinv_cred_lmtg
      INTO TABLE @DATA(lt_cred).

    SELECT * FROM zeinv_credential
*      INTO TABLE @DATA(lt_cred).
      APPENDING CORRESPONDING FIELDS OF TABLE lt_cred.

    SELECT * FROM zeinv_cred_lmb
*      APPENDING TABLE lt_cred.
      APPENDING CORRESPONDING FIELDS OF TABLE lt_cred.

*    SELECT * FROM zeinv_cred_lmtg
*      APPENDING TABLE lt_cred.

*** Begin of CH-001
    SELECT * FROM zeinv_cred_snl
*      APPENDING TABLE lt_cred.
      APPENDING CORRESPONDING FIELDS OF TABLE lt_cred.
*** End of CH-001
*** Begin of CH-002
    SELECT * FROM zeinv_cred_lth
*      APPENDING TABLE lt_cred.
      APPENDING CORRESPONDING FIELDS OF TABLE lt_cred.
*** End of CH-002
*      soc by sneha-120776
      SELECT * FROM zeinv_cred_ltel
        APPENDING CORRESPONDING FIELDS OF TABLE lt_cred.
*        eoc by sneha-120776
  ELSE.

* BOC : CH-003
    SELECT * FROM zeinv_cred_lmtg
      INTO TABLE lt_cred WHERE gstin = p_gstin.

    SELECT * FROM zeinv_credential
*      INTO TABLE lt_cred WHERE gstin = p_gstin.
      APPENDING CORRESPONDING FIELDS OF TABLE lt_cred WHERE gstin = p_gstin.
* EOC : CH-003

    SELECT * FROM zeinv_cred_lmb
*      APPENDING TABLE lt_cred WHERE gstin = p_gstin.
      APPENDING CORRESPONDING FIELDS OF TABLE lt_cred WHERE gstin = p_gstin.

*    SELECT * FROM zeinv_cred_lmtg
*      APPENDING TABLE lt_cred WHERE gstin = p_gstin. "CH-003 Commented

*** Begin of CH-001
    SELECT * FROM zeinv_cred_snl
*      APPENDING TABLE lt_cred WHERE gstin = p_gstin.
      APPENDING CORRESPONDING FIELDS OF TABLE lt_cred WHERE gstin = p_gstin.
*** End of CH-001
*** Begin of CH-002
    SELECT * FROM zeinv_cred_lth
*      APPENDING TABLE lt_cred WHERE gstin = p_gstin.
      APPENDING CORRESPONDING FIELDS OF TABLE lt_cred WHERE gstin = p_gstin.
*** End of CH-002
* EOC : CH-003
*      soc by sneha-120776
       SELECT * FROM zeinv_cred_ltel
         APPENDING CORRESPONDING FIELDS OF TABLE lt_cred WHERE gstin = p_gstin.
*      eoc by sneha-120776
  ENDIF.
  SORT lt_cred BY gstin.
  DELETE ADJACENT DUPLICATES FROM lt_cred COMPARING gstin.

  IF sy-sysid = 'SEP'.
    SELECT url UP TO 1 ROWS
      FROM zeinv_url
      INTO lv_url.
    ENDSELECT.
  ELSE.
    lv_url = 'http://stage-api.irisgst.com'.
  ENDIF.

  IF lv_url IS INITIAL.
    MESSAGE : 'URL not maintained. Please use Tcode ZEINV_API to maintain' TYPE 'E'.
  ELSE.
    CONCATENATE lv_url '/irisgst/mgmt/login' INTO lv_url.
    CONDENSE lv_url.
    LOOP AT lt_cred INTO DATA(ls_cred).
      DELETE FROM zeinv_token WHERE gstin = ls_cred-gstin.
*      DELETE FROM zeinv_token_log WHERE gstin = ls_cred-gstin. "sneha
      COMMIT WORK.

      cl_http_client=>create_by_url(
        EXPORTING url = lv_url
        IMPORTING client = lo_client ).

      lo_client->propertytype_accept_cookie = if_http_client=>co_enabled.

      CALL METHOD lo_client->request->set_header_field
        EXPORTING
          name  = 'Content-Type'
          value = 'application/json'.
      CALL METHOD lo_client->request->set_header_field
        EXPORTING
          name  = '~request_method'
          value = 'POST'.
      CALL METHOD lo_client->request->set_header_field
        EXPORTING
          name  = 'tenant'
          value = 'stage'.

* Send the HTTP request
      CALL METHOD lo_client->send
        EXCEPTIONS
          http_communication_failure = 1
          http_invalid_state         = 2
          http_processing_failed     = 3
          http_invalid_timeout       = 4
          OTHERS                     = 5.
      IF sy-subrc <> 0.
        WRITE : 'HTTP send error token not generated'.
      ELSE.
* HTTP call receive
        CALL METHOD lo_client->receive
          EXCEPTIONS
            http_communication_failure = 1
            http_invalid_state         = 2
            http_processing_failed     = 3
            OTHERS                     = 4.
        IF sy-subrc <> 0.
          WRITE : 'HTTP recieve error token not generated'.
        ELSE.
          IF lo_client IS BOUND.
            lo_client->request->set_method( if_http_request=>co_request_method_get ).
            CREATE OBJECT lo_rest_client
              EXPORTING
                io_http_client = lo_client.

* Set URL to request
            cl_http_utility=>set_request_uri( request = lo_client->request uri = lv_url ).
            json_req-email = ls_cred-zuser.
            json_req-password = ls_cred-zpassword.
            lv_body = /ui2/cl_json=>serialize( data = json_req compress = abap_true pretty_name = /ui2/cl_json=>pretty_mode-camel_case ).

            lo_request = lo_rest_client->if_rest_client~create_request_entity( ).
            lo_request->set_content_type( iv_media_type = if_rest_media_type=>gc_appl_json ).
            lo_request->set_string_data( lv_body ).

            lo_rest_client->if_rest_resource~post( lo_request ).
            lo_response = lo_rest_client->if_rest_client~get_response_entity( ).
            response = lo_response->get_string_data( ).

            CALL FUNCTION 'HR_KR_STRING_TO_XSTRING'
              EXPORTING
                unicode_string   = response
              IMPORTING
                xstring_stream   = xstring
              EXCEPTIONS
                invalid_codepage = 1.

            DATA(reader) = cl_sxml_string_reader=>create( xstring ).
            DATA(writer) = CAST if_sxml_writer( cl_sxml_string_writer=>create( ) ).
            TRY.
                DO.
                  CLEAR node_wa.
                  DATA(node) = reader->read_next_node( ).
                  IF node IS INITIAL.
                    EXIT.
                  ENDIF.
                  writer->write_node( node ).
                  CASE node->type.
                    WHEN if_sxml_node=>co_nt_element_open.
                      DATA(open_element) = CAST if_sxml_open_element( node ).
                      node_wa-node_type = `open element`.
                      node_wa-prefix    = open_element->prefix.
                      node_wa-name      = open_element->qname-name.
                      node_wa-nsuri     = open_element->qname-namespace.
                      DATA(attributes)  = open_element->get_attributes( ).
                      APPEND node_wa TO nodes.
                      LOOP AT attributes INTO DATA(attribute).
                        node_wa-node_type = `attribute`.
                        node_wa-prefix    = attribute->prefix.
                        node_wa-name      = attribute->qname-name.
                        node_wa-nsuri     = attribute->qname-namespace.
                        IF attribute->value_type = if_sxml_value=>co_vt_text.
                          node_wa-value = attribute->get_value( ).
                        ELSEIF attribute->value_type =
                                           if_sxml_value=>co_vt_raw.
                          node_wa-value_raw = attribute->get_value_raw( ).
                        ENDIF.
                        APPEND node_wa TO nodes.
                      ENDLOOP.
                      CONTINUE.
                    WHEN if_sxml_node=>co_nt_element_close.
                      DATA(close_element) = CAST if_sxml_close_element( node ).
                      node_wa-node_type   = `close element`.
                      node_wa-prefix      = close_element->prefix.
                      node_wa-name        = close_element->qname-name.
                      node_wa-nsuri       = close_element->qname-namespace.
                      APPEND node_wa TO nodes.
                      CONTINUE.
                    WHEN if_sxml_node=>co_nt_value.
                      DATA(value_node) = CAST if_sxml_value_node( node ).
                      node_wa-node_type   = `value`.
                      IF value_node->value_type = if_sxml_value=>co_vt_text.
                        node_wa-value = value_node->get_value( ).
                      ELSEIF value_node->value_type = if_sxml_value=>co_vt_raw.
                        node_wa-value_raw = value_node->get_value_raw( ).
                      ENDIF.
                      APPEND node_wa TO nodes.
                      CONTINUE.
                    WHEN OTHERS.
                      node_wa-node_type   = `Error`.
                      APPEND node_wa TO nodes.
                      EXIT.
                  ENDCASE.
                ENDDO.
              CATCH cx_sxml_parse_error INTO DATA(parse_error).
            ENDTRY.

            LOOP AT nodes INTO node_wa WHERE node_type = 'attribute'.
              DATA(lv_tabix) = sy-tabix.
              IF node_wa-value = 'status'.
                lv_tabix = lv_tabix + 1.
                READ TABLE nodes INTO DATA(wa_node) INDEX lv_tabix.
                status = wa_node-value.
              ELSEIF node_wa-value = 'message'.
                lv_tabix = lv_tabix + 1.
                READ TABLE nodes INTO wa_node INDEX lv_tabix.
                message = wa_node-value.
              ELSEIF node_wa-value = 'error'.
                lv_tabix = lv_tabix + 1.
                READ TABLE nodes INTO wa_node INDEX lv_tabix.
                errormsg = wa_node-value.
              ELSEIF node_wa-value = 'rootCompanyid'.
                lv_tabix = lv_tabix + 1.
                READ TABLE nodes INTO wa_node INDEX lv_tabix.
                wa_einv_token-compid = wa_node-value.
                CONDENSE : wa_einv_token-compid.
              ELSEIF node_wa-value = 'companyid'.
                lv_tabix = lv_tabix + 1.
                READ TABLE nodes INTO wa_node INDEX lv_tabix.
                wa_einv_token-subcompid = wa_node-value.
                CONDENSE : wa_einv_token-subcompid.
              ELSEIF node_wa-value = 'token'.
                lv_tabix = lv_tabix + 1.
                READ TABLE nodes INTO wa_node INDEX lv_tabix.
                wa_einv_token-token = wa_node-value.
                CONDENSE : wa_einv_token-token.
              ENDIF.
              CLEAR : lv_tabix,wa_node.
            ENDLOOP.

            IF status = 'SUCCESS' AND wa_einv_token-token IS NOT INITIAL AND wa_einv_token-compid IS NOT INITIAL.
              wa_einv_token-gstin = ls_cred-gstin.
              MODIFY zeinv_token FROM wa_einv_token.
              MOVE-CORRESPONDING wa_einv_token TO wa_einv_log. "sneha-121467
              wa_einv_log-zchange_on = sy-datum.
              wa_einv_log-zchanged_at = sy-uzeit.
              MODIFY zeinv_token_log FROM wa_einv_log.
              COMMIT WORK.
              WRITE : 'Token generated successfully-' && ls_cred-gstin.
              SKIP.
            ELSE.
              wa_einv_token-gstin = ls_cred-gstin.
              MOVE-CORRESPONDING wa_einv_token TO wa_einv_log. "sneha-121467
              wa_einv_log-zchange_on = sy-datum.
              wa_einv_log-zchanged_at = sy-uzeit.
              CONCATENATE errormsg ',' message INTO wa_einv_log-remarks.
              MODIFY zeinv_token_log FROM wa_einv_log.
              WRITE : ls_cred-gstin && errormsg.
              SKIP.
              WRITE : ls_cred-gstin && message.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
      FREE : lo_client,lo_rest_client,lo_request,lo_response.
      CLEAR : lo_client,lo_rest_client,json_req,lv_body,lo_request,lo_response,response,response,xstring,status,wa_einv_token,node_wa
              ,errormsg,message,wa_einv_log.
      REFRESH : nodes.
      WAIT UP TO 3 SECONDS.
      CLEAR : ls_cred.
    ENDLOOP.
  ENDIF.
