*&---------------------------------------------------------------------*
*& Report ZFI_EINV_POST_IRN
*&---------------------------------------------------------------------*
*& Created by  :  Malvika Sebastian     - LTI                          *
*& Requester   :  Pavan Yadav/Vaibhav Tapkire - LTI                    *
*& Created on  :  23/04/2020                                           *
*& Project     :  IRN E-Invoicing Implementation                       *
*& Ticket No   :                                                       *
*& WIMS No     :                                                       *
*& Workbenc Req:  Developement - SEDK961264                            *
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Created by  :  Akshay Damodaran    - LTI                            *
*& Change ID   :  akshay_d
*& Requester   :  Suresh Kumar - LTI                                   *
*& Created on  :  28/6/2022                                            *
*& Project     :  IRN CATEGORY CHANGE                                  *
*& Ticket No   :  115110                                               *
*& WIMS No     :                                                       *
*& Workbenc Req:                                                       *
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Created by  :  Gulla Anil Kumar/Akshay damodaran   - LTI            *
*& Change ID   :  CH-116031
*& Requester   :  Hemanshu patel                                       *
*& Changed on  :  24/11/22                                             *
*& Project     :  Required to change in logic of credit/debit note plant 1024
*& Ticket No   :  116031                                               *
*& WIMS No     :                                                       *
*& Workbenc Req:                                                       *
*&---------------------------------------------------------------------*
*& Created by  :  Digant Trivedi   - LTI                               *
*& Change ID   :  117165
*& Requester   :  Hemanshu patel                                       *
*& Changed on  :  09.03.2023                                           *
*& Project     :  RI added for TI
*& Ticket No   :  117165                                               *
*& WIMS No     :                                                       *
*& Workbenc Req:                                                       *
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Created by  :  Akshay Damodaran    - LTI                            *
*& Change ID   :  akshay_d
*& Requester   :  Suresh Kumar - LTI                                   *
*& Created on  :  30/5/2023                                            *
*& Project     :  Addition details into IRN process                    *
*& Ticket No   :  117834                                               *
*& WIMS No     :                                                       *
*& Workbenc Req:                                                       *
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Changed by  :  Sneha Singh   - LTIMINDTREE                          *
*& Change ID   :  sneha-121879
*& Requester   :  Suresh Kumar - LTI                                   *
*& Changed on  :  24/09/2024                                           *
*& Description :  Required to add “Dispatch from” and “Ship to” address*
*&                in stock transfer invoice                            *
*& Ticket No   :  121879                                               *
*& WIMS No     :                                                       *
*& Workbenc Req:  SEDK984118,SEDK984438                                *
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Changed by  :  Sneha Singh   - LTIMINDTREE                          *
*& Change ID   :  sneha-122943                                         *
*& Requester   :  Priya Bastodkar - LTIM                               *
*& Changed on  :  05/03/2025                                           *
*& Description :  Credit Note Issue                                    *
*& Ticket No   :  122943                                               *
*& WIMS No     :                                                       *
*& Workbenc Req:  SEDK985783, SEDK985406                               *
*&---------------------------------------------------------------------*
************************************************************************
* Changed by        : Ganesh Kshathri                                  *
* Change Code       : Ganesh-123197                                    *
* Requested by      : Suresh Kumar                                     *
* Solman Ticket No  : 123197                                           *
* Date              : 10.03.2025                                       *
* Details           : P&M HIRING - SAC codes manual selection          *
************************************************************************
REPORT zfi_einv_post_irn.

TABLES : bkpf, bseg, vbrk.

RANGES : r_ti FOR vbrk-zsgtxt.

DATA : wa_einv_token   TYPE zeinv_token.
DATA : xstring         TYPE xstring.
DATA : response        TYPE string.
DATA : lv_body         TYPE string.
DATA : lo_client       TYPE REF TO if_http_client.
DATA : lv_url          TYPE string.
DATA : lv_compid       TYPE string.
DATA : ls_item         TYPE zeinv_create_irn_item.
DATA : lt_item         TYPE STANDARD TABLE OF zeinv_create_irn_item.
DATA : ls_irn          TYPE zeinv_create_irn_head.
DATA : ls_irn1         TYPE zeinv_create_irn_head.
DATA : lt_irn          TYPE STANDARD TABLE OF zeinv_create_irn_head.
DATA : lt_irn1         TYPE STANDARD TABLE OF zeinv_create_irn_head.
DATA : ls_einv_master  TYPE zeinv_master.
DATA : ls_einvmast     TYPE zeinv_master.
DATA : lt_einv_master  TYPE STANDARD TABLE OF zeinv_master.
DATA : lt_headdata TYPE STANDARD TABLE OF zeinv_head_data.
DATA : ls_headdata TYPE zeinv_head_data.
DATA : lt_itemdata TYPE STANDARD TABLE OF zeinv_item_data.
DATA : ls_itemdata TYPE zeinv_item_data.
DATA : lv_count TYPE i.
DATA : date_end LIKE sy-datum.
DATA : lv_budat LIKE sy-datum.
DATA : lv_cpudt LIKE sy-datum.
DATA : lv_m1(2),
       lv_m2(2).
DATA : lt_auth TYPE STANDARD TABLE OF zsd_einv_canc_ml.
DATA : show(1).
DATA : lv_street TYPE adrc-street.
DATA : lv_str_suppl1 TYPE adrc-str_suppl1.
DATA : lv_str_suppl2 TYPE adrc-str_suppl2.
DATA : lv_num TYPE i.
TYPES :BEGIN OF ty_werks, "sneha
         ship_werks TYPE t001w-werks,
         dis_werks  TYPE t001w-werks,
       END OF ty_werks.
DATA : it_werks TYPE TABLE OF ty_werks,
       wa_werks TYPE ty_werks.

DATA: BEGIN OF node_wa,
        node_type TYPE string,
        prefix    TYPE string,
        name      TYPE string,
        nsuri     TYPE string,
        value     TYPE string,
        value_raw TYPE xstring,
      END OF node_wa,
      nodes LIKE TABLE OF node_wa.

DATA : status TYPE string.
DATA : type TYPE string.
DATA : message TYPE string.
DATA : erronc(1).
DATA : msg TYPE string.
DATA : ackno TYPE string.
DATA : ackdt TYPE string.
DATA : acktm TYPE string.
DATA : cncdt TYPE string.
DATA : cnctm TYPE string.
DATA : irn TYPE string.
DATA : qrcode TYPE string.
DATA : sqrcode TYPE string.
DATA : sinvoice TYPE string.
DATA : id TYPE string.
DATA : no TYPE string.
DATA : lv_count1 TYPE i.
DATA : i_fieldcat  TYPE lvc_t_fcat.
DATA : i_fieldcat1 TYPE lvc_t_fcat.
DATA : lt_exclude  TYPE ui_functions.
DATA : ls_exclude  TYPE ui_func.
DATA : wa_layout   TYPE lvc_s_layo.
DATA : g_container        TYPE scrfname VALUE 'GRID',
       alv_grid           TYPE REF TO cl_gui_alv_grid,
       g_custom_container TYPE REF TO cl_gui_custom_container.
DATA : g_container1        TYPE scrfname VALUE 'GRID1',
       alv_grid1           TYPE REF TO cl_gui_alv_grid,
       g_custom_container1 TYPE REF TO cl_gui_custom_container.

DATA : tdiff TYPE tvro-fahztd.
DATA : tdiffc(20).
TYPES : BEGIN OF ty_canc,
          check(1),
          remarks(100),
          bukrs         TYPE zeinv_master-bukrs,
          werks         TYPE zeinv_master-werks,
          region        TYPE zeinv_master-region,
          invoice_no    TYPE zeinv_master-invoice_no,
          sap_doc       TYPE zeinv_master-sap_doc,
          corr_sap_doc  TYPE zeinv_master-corr_sap_doc,
          user_gstin    TYPE zeinv_master-user_gstin,
          creation_date TYPE zeinv_master-creation_date,
          irn           TYPE zeinv_master-irn,
          ackno         TYPE zeinv_master-ackno,
          ackdt         TYPE zeinv_master-ackdt,
          acktm         TYPE zeinv_master-acktm,
          id            TYPE zeinv_master-id,
          process_date  TYPE zeinv_master-process_date,
          process_time  TYPE zeinv_master-process_time,
          icon(1),
          status(20),
          message(200),
          msg(200),
        END OF ty_canc.
DATA : lt_canc TYPE STANDARD TABLE OF ty_canc.
DATA : g_container2        TYPE scrfname VALUE 'GRID2',
       alv_grid2           TYPE REF TO cl_gui_alv_grid,
       g_custom_container2 TYPE REF TO cl_gui_custom_container.
DATA : i_fieldcat2 TYPE lvc_t_fcat.
DATA : g_container3        TYPE scrfname VALUE 'GRID3',
       alv_grid3           TYPE REF TO cl_gui_alv_grid,
       g_custom_container3 TYPE REF TO cl_gui_custom_container.
DATA : i_fieldcat3 TYPE lvc_t_fcat.

*** Custom Data Declaration
DATA: it_hsn TYPE TABLE OF zgst_hsn_rate,
      wa_hsn TYPE zgst_hsn_rate.

DATA: flg_igst    TYPE c,
      lv_srno     TYPE i,
      lv_budget   TYPE zdmbtr,
      lv_totinval TYPE zdmbtr,
      lv_tottxval TYPE zdmbtr,
      lv_tottcsvl TYPE zdmbtr,
      lv_totiamt  TYPE zdmbtr,
      lv_totcamt  TYPE zdmbtr,
      lv_tottcsv  TYPE zdmbtr,
      lv_totsamt  TYPE zdmbtr.


TYPES: BEGIN OF ty_bk,
         bukrs TYPE bkpf-bukrs,
         belnr TYPE bkpf-belnr,
         gjahr TYPE bkpf-gjahr,
         bldat TYPE bkpf-bldat,
         xblnr TYPE bkpf-xblnr,
         budat TYPE bkpf-budat,
         lifnr TYPE bseg-lifnr,
         kunnr TYPE bseg-kunnr,
         bupla TYPE bseg-bupla,
         werks TYPE bseg-werks,
         koart TYPE bseg-koart,
       END OF ty_bk.

DATA: it_bkpf TYPE TABLE OF ty_bk,
      wa_bkpf TYPE ty_bk.

DATA : lv_qty TYPE p DECIMALS 2.
DATA : lv_amt TYPE p DECIMALS 2.
DATA : lv_qtyc(10).
DATA : gv_dat TYPE sy-datum.
DATA : ls_connlog TYPE zeinv_connerr_lg.
DATA : ls_retr TYPE zeinv_retr_data.
DATA : ifc TYPE slis_t_fieldcat_alv,
       xfc TYPE slis_fieldcat_alv.
** Custom Data Declaration

SELECTION-SCREEN : BEGIN OF BLOCK a1 WITH FRAME TITLE TEXT-001.
  SELECT-OPTIONS : s_ti FOR vbrk-zsgtxt.
  SELECT-OPTIONS : s_werks FOR bseg-werks.
  SELECT-OPTIONS : s_budat FOR bkpf-budat MODIF ID m1.
  SELECT-OPTIONS : s_budat1 FOR bkpf-budat MODIF ID m2.
SELECTION-SCREEN : END OF BLOCK a1.

SELECTION-SCREEN : BEGIN OF BLOCK a2 WITH FRAME TITLE TEXT-002.
  PARAMETERS : p_crt RADIOBUTTON GROUP rad1 USER-COMMAND usc DEFAULT 'X'.
  PARAMETERS : p_cnc RADIOBUTTON GROUP rad1.
  PARAMETERS : p_rpt RADIOBUTTON GROUP rad1.
SELECTION-SCREEN : END OF BLOCK a2.

AT SELECTION-SCREEN OUTPUT.
  LOOP AT SCREEN.
    IF p_cnc = 'X'.
      IF screen-group1 = 'M1' OR screen-group1 = 'M2'.
        screen-active = 0.
        screen-invisible = 1.
        MODIFY SCREEN.
      ENDIF.
    ENDIF.
    IF p_crt = 'X'.
      IF screen-group1 = 'M2'.
        screen-active = 0.
        screen-invisible = 1.
        MODIFY SCREEN.
      ENDIF.
    ENDIF.
  ENDLOOP.

AT SELECTION-SCREEN.
  IF sy-ucomm = 'ONLI'.
    IF p_crt = 'X'.
      IF s_werks[] IS INITIAL.
        MESSAGE : 'Please enter plant' TYPE 'E'.
      ENDIF.
      IF s_budat[] IS INITIAL.
        MESSAGE : 'Please enter creation date' TYPE 'E'.
      ENDIF.
    ENDIF.

    IF p_rpt = 'X'.
      IF s_werks[] IS INITIAL.
        MESSAGE : 'Please enter plant' TYPE 'E'.
      ENDIF.
    ENDIF.

    SELECT werks FROM t001w
      INTO TABLE @DATA(lt_plant)
      WHERE werks IN @s_werks.

    LOOP AT lt_plant INTO DATA(ls_plant).
      AUTHORITY-CHECK OBJECT 'ZEINV_PLNT'
      ID 'WERKS' FIELD ls_plant-werks.
      IF sy-subrc <> 0.
        MESSAGE : 'No authorization for plant' TYPE 'E'.
      ENDIF.
    ENDLOOP.
  ENDIF.


START-OF-SELECTION.
  CLEAR : wa_layout.
  IF p_crt = 'X'.
    SELECT dates UP TO 1 ROWS INTO @DATA(lv_dates)
      FROM zmm_values WHERE txt = 'EINV_START'.
    ENDSELECT.
    IF sy-subrc = 0.
      r_ti-sign = 'I'.
      r_ti-option = 'CP'.
      CONCATENATE '*' 'LTP' '*' 'TI' '*' INTO r_ti-low.
      APPEND r_ti.
      CLEAR : r_ti.

      r_ti-sign = 'I'.
      r_ti-option = 'CP'.
      CONCATENATE '*' 'LTP' '*' 'TE' '*' INTO r_ti-low.
      APPEND r_ti.
      CLEAR : r_ti.
      lv_budget = 250000.
      PERFORM get_create_data.

      PERFORM irn_catg_chng.                             "ad by akshay_D 115110

      PERFORM irn_add_det.                               "ad by akshay_D-117834

      IF lt_irn[] IS NOT INITIAL.
        IF sy-batch IS INITIAL.
          CALL SCREEN 100.
        ENDIF.
      ENDIF.
    ELSE.
      MESSAGE : 'Date not maintained in ZMM_VALUES table' TYPE 'E'.
    ENDIF.
  ELSEIF p_cnc = 'X'.
    PERFORM get_canc_data.
  ELSEIF p_rpt = 'X'.
    PERFORM get_rept_data.
  ENDIF.
*&---------------------------------------------------------------------*
*&      Form  GET_IRN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_irn .
  CLEAR : wa_einv_token,lv_compid.
  MOVE-CORRESPONDING ls_irn TO ls_irn1.
  SELECT * FROM zeinv_token UP TO 1 ROWS
  INTO wa_einv_token WHERE gstin = ls_irn-usergstin ORDER BY PRIMARY KEY.
  ENDSELECT.
  IF wa_einv_token-token IS INITIAL OR wa_einv_token-compid IS INITIAL.
    ls_irn1-icon  = '1'.
    ls_irn1-message1 = 'GSTIN Token/CompanyId details not found'.
    ls_irn1-message2 = 'GSTIN Token/CompanyId details not found'.
    APPEND ls_irn1 TO lt_irn1.
    CLEAR : ls_irn1.
  ELSE.
    lv_compid = wa_einv_token-compid.
    CONDENSE lv_compid.

    IF sy-sysid = 'SEP'.
      SELECT url UP TO 1 ROWS
        FROM zeinv_url
        INTO lv_url.
      ENDSELECT.
    ELSE.
      lv_url = 'http://stage-api.irisgst.com'.
    ENDIF.

    IF lv_url IS INITIAL.
      MESSAGE : 'URL not maintained. Please use Tcode ZEINV_API to maintain' TYPE 'E'.
    ELSE.
      CONCATENATE lv_url '/irisgst/onyx/irn/addInvoice' INTO lv_url.
      CONDENSE lv_url.

      cl_http_client=>create_by_url(
        EXPORTING
          url    = lv_url
        IMPORTING
          client = lo_client ).

      IF lo_client IS BOUND.
        IF ls_irn-catg IS INITIAL.
          ls_irn-catg = 'B2B'.
        ENDIF.
        CALL FUNCTION 'SCP_REPLACE_STRANGE_CHARS'
          EXPORTING
            intext            = ls_irn-strdnm
          IMPORTING
            outtext           = ls_irn-strdnm
          EXCEPTIONS
            invalid_codepage  = 1
            codepage_mismatch = 2
            internal_error    = 3
            cannot_convert    = 4
            fields_not_type_c = 5
            OTHERS            = 6.

        CALL FUNCTION 'SCP_REPLACE_STRANGE_CHARS'
          EXPORTING
            intext            = ls_irn-sbnm
          IMPORTING
            outtext           = ls_irn-sbnm
          EXCEPTIONS
            invalid_codepage  = 1
            codepage_mismatch = 2
            internal_error    = 3
            cannot_convert    = 4
            fields_not_type_c = 5
            OTHERS            = 6.

        CALL FUNCTION 'SCP_REPLACE_STRANGE_CHARS'
          EXPORTING
            intext            = ls_irn-btrdnm
          IMPORTING
            outtext           = ls_irn-btrdnm
          EXCEPTIONS
            invalid_codepage  = 1
            codepage_mismatch = 2
            internal_error    = 3
            cannot_convert    = 4
            fields_not_type_c = 5
            OTHERS            = 6.

        CALL FUNCTION 'SCP_REPLACE_STRANGE_CHARS'
          EXPORTING
            intext            = ls_irn-bbnm
          IMPORTING
            outtext           = ls_irn-bbnm
          EXCEPTIONS
            invalid_codepage  = 1
            codepage_mismatch = 2
            internal_error    = 3
            cannot_convert    = 4
            fields_not_type_c = 5
            OTHERS            = 6.

        CALL FUNCTION 'SCP_REPLACE_STRANGE_CHARS'
          EXPORTING
            intext            = ls_irn-totrd_nm
          IMPORTING
            outtext           = ls_irn-totrd_nm
          EXCEPTIONS
            invalid_codepage  = 1
            codepage_mismatch = 2
            internal_error    = 3
            cannot_convert    = 4
            fields_not_type_c = 5
            OTHERS            = 6.

        CALL FUNCTION 'SCP_REPLACE_STRANGE_CHARS'
          EXPORTING
            intext            = ls_irn-tobnm
          IMPORTING
            outtext           = ls_irn-tobnm
          EXCEPTIONS
            invalid_codepage  = 1
            codepage_mismatch = 2
            internal_error    = 3
            cannot_convert    = 4
            fields_not_type_c = 5
            OTHERS            = 6.

        CLEAR : ls_headdata.
        IF ls_irn-catg = 'SEWOP' OR ls_irn-catg = 'EXWOP' OR ls_irn-catg = 'SEWP' OR ls_irn-catg = 'EXWP'.
          ls_irn-ntr = 'INTER'.
        ENDIF.

        CONDENSE : ls_irn-totiamt,ls_irn-totinvval,ls_irn-totinvval,ls_irn-totothchrg,ls_irn-totsamt,ls_irn-tottxval,ls_irn-totcamt.
        lv_amt = ls_irn-totiamt.
        ls_irn-totiamt = lv_amt.
        CLEAR : lv_amt.
        lv_amt = ls_irn-totinvval.
        ls_irn-totinvval = lv_amt.
        CLEAR : lv_amt.
        lv_amt = ls_irn-totothchrg.
        ls_irn-totothchrg = lv_amt.
        CLEAR : lv_amt.
        lv_amt = ls_irn-totsamt.
        ls_irn-totsamt = lv_amt.
        CLEAR : lv_amt.
        lv_amt = ls_irn-tottxval.
        ls_irn-tottxval = lv_amt.
        CLEAR : lv_amt.
        lv_amt = ls_irn-totcamt.
        ls_irn-totcamt = lv_amt.
        CLEAR : lv_amt.
        CONDENSE : ls_irn-totiamt,ls_irn-totinvval,ls_irn-totinvval,ls_irn-totothchrg,ls_irn-totsamt,ls_irn-tottxval,ls_irn-totcamt.

        MOVE-CORRESPONDING ls_irn TO ls_headdata.
        ls_headdata-vbeln = ls_einvmast-sap_doc.
        ls_headdata-bbnm = ls_irn-btrdnm.
        ls_headdata-blglnm = ls_irn-btrdnm.
        ls_headdata-dlglnm = ls_irn-dtrdnm.
        ls_headdata-zno = ls_irn-no.
        ls_headdata-slglnm = ls_irn-strdnm.
        ls_headdata-tolglnm = ls_irn-totrd_nm.
        ls_headdata-bukrs = ls_einvmast-bukrs.
        ls_headdata-tino = ls_einvmast-invoice_no.
        CONDENSE : ls_headdata-vbeln,ls_headdata-irn,ls_headdata-ackno,ls_headdata-ackdt,ls_headdata-catg,ls_headdata-bbnm,
                   ls_headdata-bgstin,ls_headdata-bloc,ls_headdata-bpin,ls_headdata-bstcd,ls_headdata-btrdnm,ls_headdata-blglnm,
                   ls_headdata-cntcd,ls_headdata-dgstin,ls_headdata-dloc,ls_headdata-doctype,ls_headdata-dpin,ls_headdata-dstcd,
                   ls_headdata-dtrdnm,ls_headdata-dlglnm,ls_headdata-forcur,ls_headdata-invforcur,ls_headdata-zno,ls_headdata-ntr,
                   ls_headdata-pos,ls_headdata-rchrg,ls_headdata-sbnm,ls_headdata-sgstin,ls_headdata-sloc,ls_headdata-spin,
                   ls_headdata-sstcd,ls_headdata-strdnm,ls_headdata-slglnm,ls_headdata-togstin,ls_headdata-toloc,ls_headdata-topin,
                   ls_headdata-tostcd,ls_headdata-totrd_nm,ls_headdata-tolglnm,ls_headdata-totcamt,ls_headdata-totiamt,ls_headdata-totinvval,
                   ls_headdata-totothchrg,ls_headdata-totsamt,ls_headdata-tottxval,ls_headdata-trntyp,ls_headdata-usergstin,ls_headdata-bukrs,
                   ls_headdata-tino.

        CONCATENATE '{' '"catg":' '"' ls_irn-catg '"' ',' INTO lv_body."'"B2B",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"balAmt":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"bbnm":' '"' ls_irn-btrdnm '"' ',' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"bbno":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"bdst":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"bem":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"bflno":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"bgstin":' '"' ls_irn-bgstin '"' ',' INTO lv_body."'"37BZNPM9430M1KL",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"bloc":' '"' ls_irn-bloc '"' ',' INTO lv_body."'"BANGALORE",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"boef":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"bph":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"bpin":' '"' ls_irn-bpin '"' ',' INTO lv_body."'"560054",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"bstcd":' '"' ls_irn-bstcd '"' ',' INTO lv_body."'"29",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"btrdNm":' '"' ls_irn-btrdnm '"' ',' INTO lv_body."'"LAKSHMI ENTERPRISES",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"blglNm":' '"' ls_irn-btrdnm '"' ',' INTO lv_body."'"LAKSHMI ENTERPRISES",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"clmrfnd":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"cntcd":' '"' ls_irn-cntcd '"' ',' INTO lv_body."'"IN",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"companyId":' '"' lv_compid '"' ',' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"contref":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"cptycde":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"crDay":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"crTrn":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        IF ls_irn-trntyp EQ 'CMB'."sneha-121879
          CONCATENATE lv_body '"dbnm":' '"' ls_irn-dbnm '"' ',' INTO lv_body.
        ELSE.
          CONCATENATE lv_body '"dbnm":' 'null,' INTO lv_body.
        ENDIF.
        CONDENSE lv_body.
        CONCATENATE lv_body '"dbno":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"ddst":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"dem":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"dflno":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"dgstin":' '"' ls_irn-dgstin '"' ',' INTO lv_body."'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"diffprcnt":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"dirDr":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"dloc":' '"' ls_irn-dloc '"' ',' INTO lv_body."'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"docType":' '"' ls_irn-doctype '"' ',' INTO lv_body."'"RI",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"dph":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"dpin":' '"' ls_irn-dpin '"' ',' INTO lv_body."'null,' INTO lv_body.
        CONDENSE lv_body.
        IF ls_irn-trntyp = 'CMB'."sneha-121879
          CONCATENATE lv_body '"dst":' 'null,' INTO lv_body.
        ELSE.
          CONCATENATE lv_body '"dst":' '"O",' INTO lv_body.
        ENDIF.
        CONDENSE lv_body.
        CONCATENATE lv_body '"dstcd":' '"' ls_irn-dstcd '"' ',' INTO lv_body."'"10",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"dt":' '"' ls_irn-dt '"' ',' INTO lv_body."'"12-05-2019",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"dtrdNm":' '"' ls_irn-dtrdnm '"' ',' INTO lv_body."'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"dlglNm":' '"' ls_irn-dtrdnm '"' ',' INTO lv_body."'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"etin":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"extref":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"forCur":' '"' ls_irn-forcur '"' ',' INTO lv_body."'null,' INTO lv_body.
        CONDENSE lv_body.
*       CONCATENATE lv_body '"fy":' 'null,' INTO lv_body.
        CONCATENATE lv_body '"fy":' '"' ls_irn-fy '"' ',' INTO lv_body.                 "akshay_D-117834
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen1":' 'null,' INTO lv_body.
        CONDENSE lv_body.
*       CONCATENATE lv_body '"gen10":' 'null,' INTO lv_body.
        CONCATENATE lv_body '"gen10":' '"' ls_irn-gen10 '"' ',' INTO lv_body.          "akshay_D-117834
        CONDENSE lv_body.
*       CONCATENATE lv_body '"gen11":' 'null,' INTO lv_body.
        CONCATENATE lv_body '"gen11":' '"' ls_irn-gen11 '"' ',' INTO lv_body.          "akshay_D-117834
        CONDENSE lv_body.
*       CONCATENATE lv_body '"gen12":' 'null,' INTO lv_body.
        CONCATENATE lv_body '"gen12":' '"' sy-uname '"' ',' INTO lv_body.              "akshay_D-117834
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen13":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen14":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen15":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen16":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen17":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen18":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen19":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen2":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen20":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen3":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen4":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen5":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen6":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen7":' 'null,' INTO lv_body.
        CONDENSE lv_body.
*       CONCATENATE lv_body '"gen8":' 'null,' INTO lv_body.
        CONCATENATE lv_body '"gen8":' '"' ls_irn-gen8 '"' ',' INTO lv_body.      "akshay_D-117834
        CONDENSE lv_body.
*       CONCATENATE lv_body '"gen9":' 'null,' INTO lv_body.
        CONCATENATE lv_body '"gen9":' '"' ls_irn-gen9 '"' ',' INTO lv_body.      "akshay_D-117834
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen21":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen22":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen23":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen24":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen25":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        IF ls_irn-trntyp EQ 'CMB'. "sneha-121879
          CONCATENATE lv_body '"gen26":' '"' ls_irn-gen26 '"' ',' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"gen27":' '"' ls_irn-gen27 '"' ',' INTO lv_body.
        ELSE.
          CONCATENATE lv_body '"gen26":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"gen27":' 'null,' INTO lv_body.
        ENDIF.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen28":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen29":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"gen30":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"invEndDt":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"invForCur":' '"' ls_irn-invforcur '"' ',' INTO lv_body."'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"invRmk":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"invStDt":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"ivst":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"kdrefidt":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"kdrefinum":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"mode":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"no":' '"' ls_irn-no '"' ',' INTO lv_body."'"LTP0819TI987",' INTO lv_body."
        CONDENSE lv_body.
        CONCATENATE lv_body '"ntr":' '"' ls_irn-ntr '"' ',' INTO lv_body."'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"octin":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"odty":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"oidt":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"oinum":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"oinvtyp":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"omon":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"paidAmt":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"payDueDt":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"payInstr":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"payTerm":' 'null,' INTO lv_body.
        CONDENSE lv_body.
*       CONCATENATE lv_body '"pdt":' 'null,' INTO lv_body.
        CONCATENATE lv_body '"pdt":' '"' ls_irn-pdt '"' ',' INTO lv_body.        "akshay_D-117834
        CONDENSE lv_body.
        CONCATENATE lv_body '"poref":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"port":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"pos":' '"' ls_irn-pos '"' ',' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"raref":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"rchrg":' '"' ls_irn-rchrg '"' ',' INTO lv_body."'"Y",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"refidt":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"refinum":' 'null,' INTO lv_body.
        CONDENSE lv_body.
*       CONCATENATE lv_body '"refnum":' 'null,' INTO lv_body.
        CONCATENATE lv_body '"refnum":' '"' ls_irn-refnum '"' ',' INTO lv_body.          "akshay_D-117834
        CONDENSE lv_body.
        CONCATENATE lv_body '"rfndelg":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"sbdt":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"sbnm":' '"' ls_irn-sbnm '"' ',' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"sbno":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"sbnum":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"sdst":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"sec7act":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"sem":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"sflno":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"sgstin":' '"' ls_irn-sgstin '"' ',' INTO lv_body."
        CONDENSE lv_body.
        CONCATENATE lv_body '"sloc":' '"' ls_irn-sloc '"' ',' INTO lv_body."'"BENGALURU",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"sph":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"spin":' '"' ls_irn-spin '"' ',' INTO lv_body."'"560090",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"sstcd":' '"' ls_irn-sstcd '"' ',' INTO lv_body."'"29",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"strdNm":' '"' ls_irn-strdnm '"' ',' INTO lv_body."'"AMBIKA CEMENTS",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"slglNm":' '"' ls_irn-strdnm '"' ',' INTO lv_body."'"AMBIKA CEMENTS",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"subSplyDes":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"subSplyTyp":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"supplyType":' '"O",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"taxSch":' '"' ls_irn-taxsch '"' ',' INTO lv_body."'"GST",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"tendref":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        IF ls_irn-trntyp EQ 'CMB'."sneha-121879
          CONCATENATE lv_body '"tobnm":' '"' ls_irn-tobnm '"' ',' INTO lv_body.
        ELSE.
          CONCATENATE lv_body '"tobnm":' 'null,' INTO lv_body.
        ENDIF.
        CONDENSE lv_body.
        CONCATENATE lv_body '"tobno":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"todst":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"toem":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"toflno":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"togstin":' '"' ls_irn-togstin '"' ',' INTO lv_body."'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"toloc":' '"' ls_irn-toloc '"' ',' INTO lv_body."'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"toph":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"topin":' '"' ls_irn-topin '"' ',' INTO lv_body."'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"tostcd":' '"' ls_irn-tostcd '"' ',' INTO lv_body."'"10",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"totcamt":' '"' ls_irn-totcamt '"' ',' INTO lv_body."'"1200",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"totcsNonAdVal":' '"0",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"totcsamt":' '"0",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"totdisc":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"totfrt":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"totiamt":' '"' ls_irn-totiamt '"' ',' INTO lv_body."'"0",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"totins":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"totinvval":' '"' ls_irn-totinvval '"' ',' INTO lv_body."'"12400",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"totothchrg":' '"' ls_irn-totothchrg '"' ',' INTO lv_body."'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"totpkg":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"totrd_nm":' '"' ls_irn-totrd_nm '"' ',' INTO lv_body."'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"tolglNm":' '"' ls_irn-totrd_nm+0(60) '"' ',' INTO lv_body."'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"totsamt":' '"' ls_irn-totsamt '"' ',' INTO lv_body."'"1200",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"totstcsamt":' '"0",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"rndOffAmt":' '"0",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"tottxval":' '"' ls_irn-tottxval '"' ',' INTO lv_body."'"10000",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"transDist":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"transdocdate":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"transDocNo":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"transId":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"transMode":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"transName":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"trnTyp":' '"' ls_irn-trntyp '"' ',' INTO lv_body."'"REG",' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"userGstin":' '"' ls_irn-usergstin '"' ',' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"userIRN":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"vehNo":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"vehTyp":' 'null,' INTO lv_body.
        CONDENSE lv_body.
        IF ls_irn-catg = 'B2CS' OR ls_irn-catg = 'B2CL' OR ls_irn-catg = 'B2C'.
          CONCATENATE lv_body '"genIrn":' '"false",' INTO lv_body.
        ELSE.
          CONCATENATE lv_body '"genIrn":' '"true",' INTO lv_body.
        ENDIF.
        CONDENSE : lv_body.
        IF ls_irn-catg = 'B2CS'.
          CONCATENATE lv_body '"payNm":' '"Larsen and Toubro Limited",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"acctdet":' '"000305015957",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"ifsc":' '"ICIC0000003",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"pa":' '"LNTPOWER@icici",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"mc":' '"1771",' INTO lv_body.
          CONDENSE lv_body.
        ELSE.
          CONCATENATE lv_body '"payNm":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"acctdet":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"ifsc":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"pa":' '"null",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"mc":' '"null",' INTO lv_body.
          CONDENSE lv_body.
        ENDIF.
        CONCATENATE lv_body '"signedDataReq":' '"true",' INTO lv_body.
        CONDENSE lv_body.

        CONCATENATE lv_body '"itemList": [' INTO lv_body.
        CONDENSE lv_body.

        DESCRIBE TABLE ls_irn-itemlist LINES DATA(lv_lines).

        LOOP AT ls_irn-itemlist INTO ls_item.
          DATA(lv_tabix1) = sy-tabix.
          CALL FUNCTION 'SCP_REPLACE_STRANGE_CHARS'
            EXPORTING
              intext            = ls_item-prdnm
            IMPORTING
              outtext           = ls_item-prdnm
            EXCEPTIONS
              invalid_codepage  = 1
              codepage_mismatch = 2
              internal_error    = 3
              cannot_convert    = 4
              fields_not_type_c = 5
              OTHERS            = 6.

          REPLACE ALL OCCURRENCES OF '"' IN ls_item-prdnm WITH space.

          CALL FUNCTION 'SCP_REPLACE_STRANGE_CHARS'
            EXPORTING
              intext            = ls_item-prddesc
            IMPORTING
              outtext           = ls_item-prddesc
            EXCEPTIONS
              invalid_codepage  = 1
              codepage_mismatch = 2
              internal_error    = 3
              cannot_convert    = 4
              fields_not_type_c = 5
              OTHERS            = 6.

          REPLACE ALL OCCURRENCES OF '"' IN ls_item-prddesc WITH space.

          CONDENSE ls_item-num.
          lv_qtyc = ls_item-qty.
          CONDENSE lv_qtyc.
          lv_qty = lv_qtyc.
          lv_qtyc = lv_qty.
          CONDENSE lv_qtyc.

          lv_amt = ls_item-camt.
          ls_item-camt =  lv_amt.
          CLEAR : lv_amt.
          lv_amt = ls_item-samt.
          ls_item-samt =  lv_amt.
          CLEAR : lv_amt.
          lv_amt = ls_item-iamt.
          ls_item-iamt =  lv_amt.
          CLEAR : lv_amt.
          lv_amt = ls_item-itmval.
          ls_item-itmval =  lv_amt.
          CLEAR : lv_amt.
          lv_amt = ls_item-sval.
          ls_item-sval =  lv_amt.
          CLEAR : lv_amt.
          lv_amt = ls_item-txval.
          ls_item-txval =  lv_amt.
          CLEAR : lv_amt.
          lv_amt = ls_item-unitprice.
          ls_item-unitprice =  lv_amt.
          CLEAR : lv_amt.
          CONDENSE : ls_item-num,ls_item-qty,ls_item-camt,ls_item-samt,ls_item-iamt,ls_item-itmval,ls_item-sval,ls_item-txval,ls_item-unitprice
          ,ls_item-unit,ls_item-disc.

          IF ls_item-camt IS INITIAL OR ls_item-camt = '0.00' OR ls_item-camt = '0'.
            CLEAR : ls_item-crt.
            ls_item-crt = '0'.
          ENDIF.
          IF ls_item-samt IS INITIAL OR ls_item-samt = '0.00' OR ls_item-samt = '0'.
            CLEAR : ls_item-srt.
            ls_item-srt = '0'.
          ENDIF.
          IF ls_item-iamt IS INITIAL OR ls_item-iamt = '0.00' OR ls_item-iamt = '0'.
            CLEAR : ls_item-irt.
            ls_item-irt = '0'.
          ENDIF.
          IF ls_item-disc IS INITIAL OR ls_item-disc = '0.00' OR ls_item-disc = '0'.
            CLEAR : ls_item-disc.
            ls_item-disc = '0'.
          ENDIF.
          CONDENSE : ls_item-crt,ls_item-srt,ls_item-irt,ls_item-disc.

          MOVE-CORRESPONDING ls_item TO ls_itemdata.
*        ls_itemdata-prddesc = ls_item-prdnm.
          ls_itemdata-item = ls_item-num.
          ls_itemdata-vbeln = ls_einvmast-sap_doc.
          ls_itemdata-bukrs = ls_einvmast-bukrs.
          ls_itemdata-tino = ls_einvmast-invoice_no.
          CONDENSE : ls_itemdata-vbeln,ls_itemdata-item,ls_itemdata-camt,ls_itemdata-samt,ls_itemdata-iamt,
          ls_itemdata-crt,ls_itemdata-srt,ls_itemdata-irt,ls_itemdata-hsncd,ls_itemdata-itmval
          ,ls_itemdata-othchrg,ls_itemdata-prddesc,ls_itemdata-prdnm,ls_itemdata-qty,ls_itemdata-sval,ls_itemdata-txval
          ,ls_itemdata-unit,ls_itemdata-unitprice,ls_itemdata-bukrs,ls_itemdata-tino,ls_itemdata-disc.
          APPEND ls_itemdata TO lt_itemdata.
          CLEAR : ls_itemdata.

          CONCATENATE lv_body '{"barcde":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"bchExpDt":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"bchWrDt":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"bchnm":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"camt":' '"' ls_item-camt '"' ',' INTO lv_body."'"0",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"cesNonAdval":' '"0",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"stCesNonAdvl":' '"0",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"crt":' '"' ls_item-crt '"' ',' INTO lv_body."'"0",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"csamt":' '"0",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"csrt":' '"0",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"disc":' '"' ls_item-disc '"' ',' INTO lv_body."'"0",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"freeQty":' '"0",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"hsnCd":' '"' ls_item-hsncd '"' ',' INTO lv_body."'"1001",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"iamt":' '"' ls_item-iamt '"' ',' INTO lv_body."'"0",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"irt":' '"' ls_item-irt '"' ',' INTO lv_body."'"0",' INTO lv_body.
          CONDENSE lv_body.

          CONCATENATE lv_body '"itmVal":' '"' ls_item-itmval '"' ',' INTO lv_body."'"225.25",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"num":' '"' ls_item-num '"' ',' INTO lv_body."'"1",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"othchrg":' '"' ls_item-othchrg '"' ',' INTO lv_body."'"0",' INTO lv_body.
          CONDENSE lv_body.
          IF ls_item-prddesc IS INITIAL.
            CONCATENATE lv_body '"prdDesc":' '"' ls_item-prdnm '"' ',' INTO lv_body."'"WHEAT AND MESLIN",' INTO lv_body.
            CONDENSE lv_body.
          ELSE.
            CONCATENATE lv_body '"prdDesc":' '"' ls_item-prddesc '"' ',' INTO lv_body."'"WHEAT AND MESLIN",' INTO lv_body.
            CONDENSE lv_body.
          ENDIF.
          IF ls_item-prdnm IS INITIAL.
            CONCATENATE lv_body '"prdNm":' '"' ls_item-prdnm '"' ',' INTO lv_body."'"WHEAT AND MESLIN",' INTO lv_body.
            CONDENSE lv_body.
          ELSE.
            CONCATENATE lv_body '"prdNm":' '"' ls_item-prddesc '"' ',' INTO lv_body."'"WHEAT AND MESLIN",' INTO lv_body.
            CONDENSE lv_body.
          ENDIF.
          CONCATENATE lv_body '"qty":' '"' lv_qtyc '"' ',' INTO lv_body."'"2",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"rt":' '"0",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"samt":' '"' ls_item-samt '"' ',' INTO lv_body."'"0",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"srt":' '"' ls_item-srt '"' ',' INTO lv_body."'"0",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"stcsamt":' '"0",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"stcsrt":' '"0",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"sval":' '"' ls_item-sval '"' ',' INTO lv_body."'"200",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"txp":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"txval":' '"' ls_item-txval '"' ',' INTO lv_body."'"205",' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"unit":' '"' ls_item-unit '"' ',' INTO lv_body."'"BAG",' INTO lv_body.
          CONDENSE lv_body.
          IF ls_item-hsncd+0(2) = '99'.
            CONCATENATE lv_body '"isServc":' '"Y",' INTO lv_body.
          ELSE.
            CONCATENATE lv_body '"isServc":' '"N",' INTO lv_body.
          ENDIF.
          CONDENSE lv_body.
          CONCATENATE lv_body '"preTaxVal":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"ordLineRef":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"orgCntry":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"prdSlNo":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"itmgen1":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"itmgen2":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"itmgen3":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"itmgen4":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"itmgen5":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"itmgen6":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"itmgen7":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"itmgen8":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"itmgen9":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"itmgen10":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"unitPrice":' '"' ls_item-unitprice '"' ',' INTO lv_body."'"100"' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"invItmOtherDtls":' '[{' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"attNm":' 'null,' INTO lv_body.
          CONDENSE lv_body.
          CONCATENATE lv_body '"attVal":' 'null}]}' INTO lv_body.
          CONDENSE lv_body.
          IF lv_tabix1 LT lv_lines.
            CONCATENATE lv_body ',' INTO lv_body.
            CONDENSE lv_body.
          ENDIF.
          CLEAR : lv_qty,lv_qtyc.
        ENDLOOP.
        CLEAR : lv_tabix1,lv_lines.

        CONCATENATE lv_body '],"invOthDocDtls": [{' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"url":' 'null,' INTO lv_body.
        CONDENSE : lv_body.
        CONCATENATE lv_body '"docs":' 'null,' INTO lv_body.
        CONDENSE : lv_body.
        CONCATENATE lv_body '"infoDtls":' 'null' INTO lv_body.
        CONDENSE : lv_body.
        CONCATENATE lv_body '}' INTO lv_body.
        CONDENSE lv_body.

        CONCATENATE lv_body '],"invRefPreDtls": [{' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"oinum":' 'null,' INTO lv_body.
        CONDENSE : lv_body.
        CONCATENATE lv_body '"oidt":' 'null,' INTO lv_body.
        CONDENSE : lv_body.
        CONCATENATE lv_body '"othRefNo":' 'null' INTO lv_body.
        CONDENSE : lv_body.
        CONCATENATE lv_body '}' INTO lv_body.
        CONDENSE lv_body.

        CONCATENATE lv_body '],"invRefContDtls": [{' INTO lv_body.
        CONDENSE lv_body.
        CONCATENATE lv_body '"raref":' 'null,' INTO lv_body.
        CONDENSE : lv_body.
        CONCATENATE lv_body '"radt":' 'null,' INTO lv_body.
        CONDENSE : lv_body.
        CONCATENATE lv_body '"tendref":' 'null,' INTO lv_body.
        CONDENSE : lv_body.
        CONCATENATE lv_body '"contref":' 'null,' INTO lv_body.
        CONDENSE : lv_body.
        CONCATENATE lv_body '"extref":' 'null,' INTO lv_body.
        CONDENSE : lv_body.
        CONCATENATE lv_body '"projref":' 'null,' INTO lv_body.
        CONDENSE : lv_body.
        CONCATENATE lv_body '"poref":' 'null,' INTO lv_body.
        CONDENSE : lv_body.
        CONCATENATE lv_body '"porefdt":' 'null' INTO lv_body.
        CONDENSE : lv_body.
        CONCATENATE lv_body '}]}' INTO lv_body.
        CONDENSE lv_body.


        CONCATENATE '"' 'null' '"' INTO DATA(lv_null).
        DATA(lv_null1) = 'null'.
        REPLACE ALL OCCURRENCES OF lv_null IN lv_body WITH lv_null1.

        lo_client->request->set_cdata( lv_body ).
        lo_client->request->set_content_type( 'application/json' ).
        lo_client->request->set_method( 'POST' ).
        lo_client->request->set_header_field( name = 'companyId' value = lv_compid ).
        lo_client->request->set_header_field( name = 'X-Auth-Token' value = wa_einv_token-token ).
        lo_client->request->set_header_field( name = 'product' value = 'ONYX' ).
        CALL METHOD lo_client->send
          EXCEPTIONS
            http_communication_failure = 1
            http_invalid_state         = 2
            http_processing_failed     = 3
            OTHERS                     = 4.

        CALL METHOD lo_client->receive
          EXCEPTIONS
            http_communication_failure = 1
            http_invalid_state         = 2
            http_processing_failed     = 3
            OTHERS                     = 4.
        IF sy-subrc <> 0.
          DATA(connerr) = 'X'.
        ENDIF.
        response = lo_client->response->get_cdata( ).

        CALL FUNCTION 'HR_KR_STRING_TO_XSTRING'
          EXPORTING
            unicode_string   = response
          IMPORTING
            xstring_stream   = xstring
          EXCEPTIONS
            invalid_codepage = 1.

        DATA(reader) = cl_sxml_string_reader=>create( xstring ).
        DATA(writer) = CAST if_sxml_writer( cl_sxml_string_writer=>create( ) ).
        TRY.
            DO.
              CLEAR node_wa.
              DATA(node) = reader->read_next_node( ).
              IF node IS INITIAL.
                EXIT.
              ENDIF.
              writer->write_node( node ).
              CASE node->type.
                WHEN if_sxml_node=>co_nt_element_open.
                  DATA(open_element) = CAST if_sxml_open_element( node ).
                  node_wa-node_type = `open element`.
                  node_wa-prefix    = open_element->prefix.
                  node_wa-name      = open_element->qname-name.
                  node_wa-nsuri     = open_element->qname-namespace.
                  DATA(attributes)  = open_element->get_attributes( ).
                  APPEND node_wa TO nodes.
                  LOOP AT attributes INTO DATA(attribute).
                    node_wa-node_type = `attribute`.
                    node_wa-prefix    = attribute->prefix.
                    node_wa-name      = attribute->qname-name.
                    node_wa-nsuri     = attribute->qname-namespace.
                    IF attribute->value_type = if_sxml_value=>co_vt_text.
                      node_wa-value = attribute->get_value( ).
                    ELSEIF attribute->value_type =
                                       if_sxml_value=>co_vt_raw.
                      node_wa-value_raw = attribute->get_value_raw( ).
                    ENDIF.
                    APPEND node_wa TO nodes.
                  ENDLOOP.
                  CONTINUE.
                WHEN if_sxml_node=>co_nt_element_close.
                  DATA(close_element) = CAST if_sxml_close_element( node ).
                  node_wa-node_type   = `close element`.
                  node_wa-prefix      = close_element->prefix.
                  node_wa-name        = close_element->qname-name.
                  node_wa-nsuri       = close_element->qname-namespace.
                  APPEND node_wa TO nodes.
                  CONTINUE.
                WHEN if_sxml_node=>co_nt_value.
                  DATA(value_node) = CAST if_sxml_value_node( node ).
                  node_wa-node_type   = `value`.
                  IF value_node->value_type = if_sxml_value=>co_vt_text.
                    node_wa-value = value_node->get_value( ).
                  ELSEIF value_node->value_type = if_sxml_value=>co_vt_raw.
                    node_wa-value_raw = value_node->get_value_raw( ).
                  ENDIF.
                  APPEND node_wa TO nodes.
                  CONTINUE.
                WHEN OTHERS.
                  node_wa-node_type   = `Error`.
                  APPEND node_wa TO nodes.
                  EXIT.
              ENDCASE.
            ENDDO.
          CATCH cx_sxml_parse_error INTO DATA(parse_error).
        ENDTRY.

        LOOP AT nodes INTO node_wa WHERE node_type = 'attribute'.
          DATA(lv_tabix) = sy-tabix.
          IF node_wa-value = 'status'.
            IF status IS INITIAL.
              lv_tabix = lv_tabix + 1.
              READ TABLE nodes INTO DATA(wa_node) INDEX lv_tabix.
              status = wa_node-value.
            ENDIF.
          ELSEIF node_wa-value = 'message'.
            lv_tabix = lv_tabix + 1.
            READ TABLE nodes INTO wa_node INDEX lv_tabix.
            IF message IS INITIAL.
              message = wa_node-value.
            ENDIF.
          ELSEIF node_wa-value = 'msg'.
            lv_tabix = lv_tabix + 1.
            READ TABLE nodes INTO wa_node INDEX lv_tabix.
            IF msg IS INITIAL.
              msg = wa_node-value.
            ENDIF.
          ELSEIF node_wa-value = 'ackNo' OR node_wa-value = 'ackno'.
            lv_tabix = lv_tabix + 1.
            READ TABLE nodes INTO wa_node INDEX lv_tabix.
            ackno = wa_node-value.
          ELSEIF node_wa-value = 'ackDt' OR node_wa-value = 'ackdt'.
            lv_tabix = lv_tabix + 1.
            READ TABLE nodes INTO wa_node INDEX lv_tabix.
            SPLIT wa_node-value AT space INTO ackdt acktm.
          ELSEIF node_wa-value = 'irn'.
            lv_tabix = lv_tabix + 1.
            READ TABLE nodes INTO wa_node INDEX lv_tabix.
            irn = wa_node-value.
          ELSEIF node_wa-value = 'qrCode' OR node_wa-value = 'qrcode'.
            lv_tabix = lv_tabix + 1.
            READ TABLE nodes INTO wa_node INDEX lv_tabix.
            qrcode = wa_node-value.
          ELSEIF node_wa-value = 'signedQrCode' OR node_wa-value = 'signedqrCode'.
            lv_tabix = lv_tabix + 1.
            READ TABLE nodes INTO wa_node INDEX lv_tabix.
            sqrcode = wa_node-value.
          ELSEIF node_wa-value = 'signedInvoice' OR node_wa-value = 'signedinvoice'.
            lv_tabix = lv_tabix + 1.
            READ TABLE nodes INTO wa_node INDEX lv_tabix.
            sinvoice = wa_node-value.
          ELSEIF node_wa-value = 'id'.
            lv_tabix = lv_tabix + 1.
            READ TABLE nodes INTO wa_node INDEX lv_tabix.
            id = wa_node-value.
          ELSEIF node_wa-value = 'no'.
            lv_tabix = lv_tabix + 1.
            READ TABLE nodes INTO wa_node INDEX lv_tabix.
            no = wa_node-value.
          ELSEIF node_wa-value = 'type'.
            lv_tabix = lv_tabix + 1.
            READ TABLE nodes INTO wa_node INDEX lv_tabix.
            type = wa_node-value.
            IF type = 'ERROR' OR type = 'Error' OR type = 'Error' OR type = 'IRN_ERROR' OR type = 'EWB_ERROR'.
              erronc = 'X'.
            ELSE.
              IF erronc IS INITIAL.
                CLEAR : message,msg,type.
              ENDIF.
            ENDIF.
          ENDIF.
          CLEAR : lv_tabix,wa_node.
        ENDLOOP.

        IF connerr = 'X' AND irn IS INITIAL AND qrcode IS INITIAL.
          status = 'Error'.
          message = 'Connectivity Issue'.
          msg = 'Please try after some time else invoice will be cancelled at 10PM'.
          ls_connlog-tino = ls_irn-no.
          ls_connlog-zmodule = 'FI'.
          ls_connlog-errordate = sy-datum.
          ls_connlog-errortime = sy-uzeit.
          MODIFY zeinv_connerr_lg FROM ls_connlog.
          COMMIT WORK.

          ls_retr-bukrs   = '1000'.
          ls_retr-werks   = ls_einvmast-werks.
          ls_retr-zmodule = 'FI'.
          ls_retr-tino    = ls_einvmast-invoice_no.
          ls_retr-sapdoc  = ls_einvmast-sap_doc.
          IF ls_einvmast-invoice_no CP 'LTP*CN*'.
            ls_retr-doctyp  = 'C'.
          ELSEIF ls_einvmast-invoice_no CP 'LTP*DN*'.
            ls_retr-doctyp  = 'D'.
          ELSE.
            ls_retr-doctyp  = 'RI'.
          ENDIF.
          ls_retr-gstin     = ls_einvmast-user_gstin.
          CONCATENATE ls_irn-dt+6(4) ls_irn-dt+3(2) ls_irn-dt+0(2) INTO ls_retr-budat.
          MODIFY zeinv_retr_data FROM ls_retr.
          COMMIT WORK.
        ELSE.
          IF msg IS INITIAL AND message IS INITIAL AND irn IS INITIAL AND qrcode IS INITIAL.
            status = 'Error'.
            message = 'Connectivity Issue'.
            msg = 'Please try after some time else invoice will be cancelled at 10PM'.
            ls_connlog-tino = ls_irn-no.
            ls_connlog-zmodule = 'FI'.
            ls_connlog-errordate = sy-datum.
            ls_connlog-errortime = sy-uzeit.
            MODIFY zeinv_connerr_lg FROM ls_connlog.
            COMMIT WORK.

            ls_retr-bukrs   = '1000'.
            ls_retr-werks   = ls_einvmast-werks.
            ls_retr-zmodule = 'FI'.
            ls_retr-tino    = ls_einvmast-invoice_no.
            ls_retr-sapdoc  = ls_einvmast-sap_doc.
            IF ls_einvmast-invoice_no CP 'LTP*CN*'.
              ls_retr-doctyp  = 'C'.
            ELSEIF ls_einvmast-invoice_no CP 'LTP*DN*'.
              ls_retr-doctyp  = 'D'.
            ELSE.
              ls_retr-doctyp  = 'RI'.
            ENDIF.
            ls_retr-gstin     = ls_einvmast-user_gstin.
            CONCATENATE ls_irn-dt+6(4) ls_irn-dt+3(2) ls_irn-dt+0(2) INTO ls_retr-budat.
            MODIFY zeinv_retr_data FROM ls_retr.
            COMMIT WORK.
          ENDIF.
        ENDIF.

        CLEAR : erronc,type,ls_connlog,ls_retr.

        CONDENSE : status,message,msg,ackdt,acktm,irn,qrcode,sqrcode,sinvoice,ackno,id,no.

        IF irn IS NOT INITIAL OR qrcode IS NOT INITIAL.
          ls_headdata-irn = irn.
          ls_headdata-ackno = ackno.
          ls_headdata-ackdt = ackdt.
          CONDENSE : ls_headdata-irn,ls_headdata-ackno,ls_headdata-ackdt.
          MODIFY zeinv_head_data FROM ls_headdata.
          COMMIT WORK.
          LOOP AT lt_itemdata INTO ls_itemdata.
            MODIFY zeinv_item_data FROM ls_itemdata.
            COMMIT WORK.
          ENDLOOP.

          CONDENSE ls_irn-no.
          LOOP AT lt_einv_master ASSIGNING FIELD-SYMBOL(<ls_einv_master>) WHERE invoice_no = ls_irn-no.
            <ls_einv_master>-irn  = irn.
            <ls_einv_master>-status = status.
            <ls_einv_master>-ackno = ackno.
            <ls_einv_master>-ackdt = ackdt.
            <ls_einv_master>-acktm = acktm.
            <ls_einv_master>-id = id.
            <ls_einv_master>-signed_qr = sqrcode.
            <ls_einv_master>-signed_inv = sinvoice.
            <ls_einv_master>-qr_image = qrcode.
            <ls_einv_master>-message1 = message.
            <ls_einv_master>-message2 = msg.
            <ls_einv_master>-process_date = sy-datum.
            <ls_einv_master>-process_time = sy-uzeit.
            <ls_einv_master>-created_by = sy-uname.
            MODIFY zeinv_master FROM <ls_einv_master>.
            COMMIT WORK.
            DELETE FROM zeinv_connerr_lg WHERE tino = <ls_einv_master>-invoice_no.
            COMMIT WORK.
            DELETE FROM zeinv_retr_data WHERE tino = <ls_einv_master>-invoice_no.
            COMMIT WORK.
          ENDLOOP.
          PERFORM set_image.
          ls_irn1-icon  = '3'.
        ELSE.
          ls_irn1-icon  = '1'.
        ENDIF.
        ls_irn1-irn  = irn.
        ls_irn1-status = status.
        ls_irn1-ackno = ackno.
        ls_irn1-ackdt = ackdt.
        ls_irn1-acktm = acktm.
        ls_irn1-message1 = message.
        ls_irn1-message2 = msg.
        ls_irn1-id = id.
        APPEND ls_irn1 TO lt_irn1.

        CLEAR : lv_body,response,node_wa,nodes,status,message,msg,ackno,ackdt,acktm,irn,qrcode,sqrcode,sinvoice,id,no,
        reader,writer,node,open_element,close_element,value_node,parse_error,xstring,ls_irn1.
        REFRESH : nodes[],attributes[].

        CALL METHOD lo_client->close
          EXCEPTIONS
            http_invalid_state = 1
            OTHERS             = 2.

        FREE lo_client.
        CLEAR : lo_client.
      ENDIF.
    ENDIF.
  ENDIF.
  CLEAR : connerr.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_CREATE_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_create_data .
  SELECT * FROM zsd_einv_canc_ml
    INTO TABLE lt_auth
    WHERE werks IN s_werks.

***************** Chargeable Tax Invoice *****************
  PERFORM f_charg.

***************** STO Tax Invoice *****************
  PERFORM f_sto_tax.

***************** RCM Tax /Manual Invoice *****************
  PERFORM f_rcm_tax.

***************** Tax Invoice for Customer W/o SO *****************
  PERFORM f_wo_so.

***************** Payment Voucher *****************
  PERFORM f_paym_vouc.

***************** Assessment Cycle *****************
  PERFORM f_assessment.

***************** Assessment Cycle Credit Note *****************
  PERFORM f_assessment_cr.

***************** GRN *****************
  PERFORM f_grn.

***************** Vendor Credit Note *****************
  PERFORM f_vend_cn.

***************** Asset Transfer *****************
  PERFORM f_asset.

***************** Asset Transfer *****************
  PERFORM f_asset_cr.

***************** Material Returnable *****************
  PERFORM f_mat_return.

***************** Customer Invoice W/O Customer Code *****************
  PERFORM f_inv_wocust.

***************** EXIM Bibiyana South *****************
  PERFORM f_bibiyana_south.

***************** EXIM Oman *****************
  PERFORM f_oman.

***************** Equipment IHC *************
  PERFORM equipment_ihc.

***************** Excel Invoicing *************
  PERFORM excel_inv.

  IF lt_irn[] IS INITIAL.
    MESSAGE: 'No Data found' TYPE 'S' DISPLAY LIKE 'E'.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_IMAGE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_image .
  DATA : lv_img_name TYPE tdobname.
  DATA : lv_irn TYPE zirn.
  DATA : lv_tino TYPE zfi_tax_inv.
  CONDENSE ls_irn-no.
  lv_tino = ls_irn-no.
  CONDENSE lv_tino.
  CALL FUNCTION 'ZEINV_QR_IMAGE'
    EXPORTING
      ti_no             = lv_tino
    IMPORTING
      name              = lv_img_name
      irn               = lv_irn
    EXCEPTIONS
      enqueue_failed    = 1
      conversion_failed = 2
      OTHERS            = 3.
*  IF lv_img_name IS INITIAL OR lv_irn IS INITIAL.
  IF lv_img_name IS INITIAL AND lv_irn IS INITIAL.        "Changed Malvika (B2CS & B2CL - lv_irn is blank)
    MESSAGE : 'QR code generation error' TYPE 'E'.
  ELSE.
    WRITE : 'Image' && lv_img_name && 'created successfully'.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0100 OUTPUT.
  SET PF-STATUS 'ST_500'.
  SET TITLEBAR 'TT_100'.

  PERFORM build_fcat.
  PERFORM display_alv.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.
  CASE sy-ucomm.
    WHEN 'BACK' OR 'CANCEL' OR 'EXIT'.
      LEAVE TO SCREEN 0.
    WHEN 'CREATE'.
      CALL METHOD alv_grid->check_changed_data.
      LOOP AT lt_irn INTO ls_irn WHERE check = 'X'.
        READ TABLE lt_einv_master INTO ls_einvmast WITH KEY invoice_no = ls_irn-no.
        PERFORM get_irn.
        CLEAR : ls_irn,ls_einvmast.
      ENDLOOP.
      IF lt_irn1[] IS NOT INITIAL.
        CALL SCREEN 200.
      ENDIF.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Form  BUILD_FCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM build_fcat .
  DATA:l_fieldcat TYPE lvc_s_fcat.
  REFRESH : i_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'CHECK'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Select'.
  l_fieldcat-checkbox  = 'X'.
  l_fieldcat-edit      = 'X'.
  l_fieldcat-outputlen  = '6'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'CATG'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Category'.
  l_fieldcat-outputlen  = '10'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'TAXSCH'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Tax Scheme'.
  l_fieldcat-outputlen  = '10'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'DOCTYPE'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Doc Typ'.
  l_fieldcat-outputlen  = '7'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'TRNTYP'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Trans Typ'.
  l_fieldcat-outputlen  = '9'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'NO'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Doc No.'.
  l_fieldcat-outputlen  = '10'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'DT'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Doc Dt'.
  l_fieldcat-outputlen  = '10'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'RCHRG'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Rev Chrg'.
  l_fieldcat-outputlen  = '8'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'POS'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Place of supply'.
  l_fieldcat-outputlen  = '15'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'SGSTIN'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Supplier GSTIN'.
  l_fieldcat-outputlen  = '15'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'STRDNM'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Supplier Name'.
  l_fieldcat-outputlen  = '25'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'SLOC'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Location'.
  l_fieldcat-outputlen  = '10'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'SSTCD'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'State'.
  l_fieldcat-outputlen  = '5'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'SPIN'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Pin Code'.
  l_fieldcat-outputlen  = '10'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'BGSTIN'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Buyer GSTIN'.
  l_fieldcat-outputlen  = '15'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'BTRDNM'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Buyer Name'.
  l_fieldcat-outputlen  = '25'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'BLOC'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Location'.
  l_fieldcat-outputlen  = '10'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'BSTCD'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'State'.
  l_fieldcat-outputlen  = '5'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'BPIN'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Pin Code'.
  l_fieldcat-outputlen  = '10'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'TOGSTIN'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Shipping to GSTIN'.
  l_fieldcat-outputlen  = '20'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'TOTRD_NM'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Shipping to Name'.
  l_fieldcat-outputlen  = '25'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'TOLOC'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Location'.
  l_fieldcat-outputlen  = '10'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'TOSTCD'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'State'.
  l_fieldcat-outputlen  = '5'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'TOPIN'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Pin Code'.
  l_fieldcat-outputlen  = '10'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'CNTCD'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Country'.
  l_fieldcat-outputlen  = '10'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'FORCUR'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Foreign Curr.'.
  l_fieldcat-outputlen  = '5'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'INVFORCUR'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Final Inv Value Foreign Curr'.
  l_fieldcat-outputlen  = '25'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'TOTINVVAL'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Final Inv. Value'.
  l_fieldcat-outputlen  = '25'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'TOTTXVAL'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Total Taxable Value'.
  l_fieldcat-outputlen  = '25'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'TOTOTHCHRG'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Total Other Charges'.
  l_fieldcat-outputlen  = '25'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'TOTIAMT'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Total IGST Amount'.
  l_fieldcat-outputlen  = '25'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'TOTCAMT'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Total CGST Amount'.
  l_fieldcat-outputlen  = '25'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.

  l_fieldcat-col_pos   = 1.
  l_fieldcat-fieldname = 'TOTSAMT'.
  l_fieldcat-tabname   = 'LT_IRN'.
  l_fieldcat-coltext   = 'Total SGST Amount'.
  l_fieldcat-outputlen  = '25'.
  APPEND l_fieldcat TO i_fieldcat.
  CLEAR l_fieldcat.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM display_alv .
  IF g_custom_container IS INITIAL.
    CREATE OBJECT g_custom_container
      EXPORTING
        container_name = g_container.
    CREATE OBJECT alv_grid
      EXPORTING
        i_parent = g_custom_container.

    PERFORM exclude_buttons.

    CALL METHOD alv_grid->set_table_for_first_display
      EXPORTING
        is_layout            = wa_layout
        it_toolbar_excluding = lt_exclude
      CHANGING
        it_outtab            = lt_irn[]
        it_fieldcatalog      = i_fieldcat[].
  ELSE.
    CALL METHOD alv_grid->refresh_table_display.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  EXCLUDE_BUTTONS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM exclude_buttons .
  REFRESH lt_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_copy_row.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_delete_row.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_append_row.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_insert_row.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_copy.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_cut.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_paste.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_paste_new_row.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_undo.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_select_all.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_sort_asc.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_sort_dsc.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_sort.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_sum.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_subtot.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

*  ls_exclude = cl_gui_alv_grid=>mc_fc_filter.
*  APPEND ls_exclude TO lt_exclude.
*  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_maintain_variant.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_save_variant.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_to_office.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_variant_admin.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_views.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_view_crystal.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_view_excel.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_view_grid.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.

  ls_exclude = cl_gui_alv_grid=>mc_fc_view_lotus.
  APPEND ls_exclude TO lt_exclude.
  CLEAR ls_exclude.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0200 OUTPUT.
  SET PF-STATUS 'ST_200'.
  SET TITLEBAR 'TT_200'.

  PERFORM build_fcat1.
  PERFORM display_alv1.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Form  BUILD_FCAT1
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM build_fcat1 .
  DATA:l_fieldcat1 TYPE lvc_s_fcat.
  REFRESH : i_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'NO'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Doc No.'.
  l_fieldcat1-outputlen  = '15'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'STATUS'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Status'.
  l_fieldcat1-outputlen  = '8'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'MESSAGE1'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Message1'.
  l_fieldcat1-outputlen  = '35'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'MESSAGE2'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Message2'.
  l_fieldcat1-outputlen  = '35'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'IRN'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'IRN No.'.
  l_fieldcat1-outputlen  = '64'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'CATG'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Category'.
  l_fieldcat1-outputlen  = '10'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'TAXSCH'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Tax Scheme'.
  l_fieldcat1-outputlen  = '10'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'DOCTYPE'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Doc Typ'.
  l_fieldcat1-outputlen  = '7'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'TRNTYP'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Trans Typ'.
  l_fieldcat1-outputlen  = '9'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'DT'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Doc Dt'.
  l_fieldcat1-outputlen  = '10'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'RCHRG'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Rev Chrg'.
  l_fieldcat1-outputlen  = '8'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'POS'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Place of supply'.
  l_fieldcat1-outputlen  = '15'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'SGSTIN'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Supplier GSTIN'.
  l_fieldcat1-outputlen  = '15'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'STRDNM'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Supplier Name'.
  l_fieldcat1-outputlen  = '25'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'SLOC'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Location'.
  l_fieldcat1-outputlen  = '10'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'SSTCD'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'State'.
  l_fieldcat1-outputlen  = '5'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'SPIN'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Pin Code'.
  l_fieldcat1-outputlen  = '10'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'BGSTIN'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Buyer GSTIN'.
  l_fieldcat1-outputlen  = '15'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'BTRDNM'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Buyer Name'.
  l_fieldcat1-outputlen  = '25'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'BLOC'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Location'.
  l_fieldcat1-outputlen  = '10'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'BSTCD'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'State'.
  l_fieldcat1-outputlen  = '5'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'BPIN'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Pin Code'.
  l_fieldcat1-outputlen  = '10'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'TOGSTIN'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Shipping to GSTIN'.
  l_fieldcat1-outputlen  = '20'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'TOTRD_NM'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Shipping to Name'.
  l_fieldcat1-outputlen  = '25'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'TOLOC'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Location'.
  l_fieldcat1-outputlen  = '10'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'TOSTCD'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'State'.
  l_fieldcat1-outputlen  = '5'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'TOPIN'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Pin Code'.
  l_fieldcat1-outputlen  = '10'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'CNTCD'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Country'.
  l_fieldcat1-outputlen  = '10'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'FORCUR'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Foreign Curr.'.
  l_fieldcat1-outputlen  = '5'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'INVFORCUR'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Total Inv Value Foreign Curr'.
  l_fieldcat1-outputlen  = '25'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'TOTINVVAL'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Total Inv. Value'.
  l_fieldcat1-outputlen  = '25'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'TOTTXVAL'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Total Taxable Value'.
  l_fieldcat1-outputlen  = '25'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'TOTOTHCHRG'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Total Other Charges'.
  l_fieldcat1-outputlen  = '25'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'TOTIAMT'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Total IGST Amount'.
  l_fieldcat1-outputlen  = '25'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'TOTCAMT'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Total CGST Amount'.
  l_fieldcat1-outputlen  = '25'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  l_fieldcat1-col_pos   = 1.
  l_fieldcat1-fieldname = 'TOTSAMT'.
  l_fieldcat1-tabname   = 'LT_IRN1'.
  l_fieldcat1-coltext   = 'Total SGST Amount'.
  l_fieldcat1-outputlen  = '25'.
  APPEND l_fieldcat1 TO i_fieldcat1.
  CLEAR l_fieldcat1.

  wa_layout-excp_fname = 'ICON'.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_ALV1
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM display_alv1 .
  IF g_custom_container1 IS INITIAL.
    CREATE OBJECT g_custom_container1
      EXPORTING
        container_name = g_container1.
    CREATE OBJECT alv_grid1
      EXPORTING
        i_parent = g_custom_container1.

    PERFORM exclude_buttons.

    CALL METHOD alv_grid1->set_table_for_first_display
      EXPORTING
        is_layout            = wa_layout
        it_toolbar_excluding = lt_exclude
      CHANGING
        it_outtab            = lt_irn1[]
        it_fieldcatalog      = i_fieldcat1[].
  ELSE.
    CALL METHOD alv_grid1->refresh_table_display.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0200 INPUT.
  CASE sy-ucomm.
    WHEN 'BACK' OR 'CANCEL' OR 'EXIT'.
      LEAVE TO TRANSACTION 'ZFI_IRN_POST'.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Form  GET_CANC_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_canc_data .
  SELECT * FROM zsd_einv_canc_ml
    INTO TABLE lt_auth
    WHERE werks IN s_werks.

  SELECT * FROM zeinv_master
    INTO CORRESPONDING FIELDS OF TABLE lt_canc
    WHERE invoice_no IN s_ti AND werks IN s_werks AND irn_canc = ' ' AND zmodule = 'FI'.
  IF lt_canc[] IS NOT INITIAL.
    SELECT * FROM bkpf
      INTO TABLE @DATA(lt_bkpf)
      FOR ALL ENTRIES IN @lt_canc WHERE bkpf~belnr = @lt_canc-sap_doc AND bkpf~stblg = ' ' AND bkpf~bukrs = '1000'.
    LOOP AT lt_canc INTO DATA(ls_canc).
      READ TABLE lt_bkpf INTO DATA(ls_bkpf) WITH KEY belnr = ls_canc-sap_doc.
      IF sy-subrc = 0.
        IF ls_bkpf-usnam = sy-uname.
        ELSE.
          READ TABLE lt_auth WITH KEY werks = ls_canc-werks psno = sy-uname TRANSPORTING NO FIELDS.
          IF sy-subrc <> 0.
            DELETE lt_canc WHERE invoice_no = ls_canc-invoice_no.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.

  IF lt_canc[] IS NOT INITIAL.
    CALL SCREEN 300.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0300  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0300 OUTPUT.
  SET PF-STATUS 'ST_300'.
  SET TITLEBAR 'TT_300'.

  PERFORM build_fcat2.
  PERFORM display_alv2.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0300 INPUT.
  CASE sy-ucomm.
    WHEN 'BACK' OR 'CANC' OR 'EXIT'.
      LEAVE TO SCREEN 0.
    WHEN 'CANCEL'.
      CALL METHOD alv_grid2->check_changed_data.
      IF sy-sysid = 'SEP'.
        SELECT url UP TO 1 ROWS
          FROM zeinv_url
          INTO lv_url.
        ENDSELECT.
      ELSE.
        lv_url = 'http://stage-api.irisgst.com'.
      ENDIF.

      IF lv_url IS INITIAL.
        MESSAGE : 'URL not maintained. Please use Tcode ZEINV_API to maintain' TYPE 'E'.
      ELSE.
        CONCATENATE lv_url '/irisgst/onyx/irn/cancel' INTO lv_url.
        CONDENSE lv_url.

        cl_http_client=>create_by_url(
          EXPORTING
            url    = lv_url
          IMPORTING
            client = lo_client ).

        IF lo_client IS BOUND.
          LOOP AT lt_canc ASSIGNING FIELD-SYMBOL(<ls_canc1>) WHERE check = 'X'.
            SELECT * FROM zeinv_token UP TO 1 ROWS
              INTO wa_einv_token WHERE gstin = <ls_canc1>-user_gstin ORDER BY PRIMARY KEY.
            ENDSELECT.
            DATA(in) = 'X'.
            IF wa_einv_token IS NOT INITIAL.
              lv_compid = wa_einv_token-compid.
              CONDENSE lv_compid.
              CONDENSE <ls_canc1>-irn.
              CONCATENATE '{' '"irn":' '"' <ls_canc1>-irn '"' ',' INTO lv_body.
              CONDENSE lv_body.
              CONCATENATE lv_body '"cnlRsn":' '"1"' ',' INTO lv_body.
              CONDENSE lv_body.
              CONCATENATE  lv_body '"cnlRem":' '"' <ls_canc1>-remarks '"' ',' INTO lv_body.
              CONDENSE lv_body.
              CONCATENATE  lv_body '"userGstin":' '"' <ls_canc1>-user_gstin '"' '}' INTO lv_body.
              CONDENSE lv_body.

              lo_client->request->set_cdata( lv_body ).
              lo_client->request->set_content_type( 'application/json' ).
              lo_client->request->set_method( 'PUT' ).
              lo_client->request->set_header_field( name = 'companyId' value = lv_compid ).
              lo_client->request->set_header_field( name = 'X-Auth-Token' value = wa_einv_token-token ).
              lo_client->request->set_header_field( name = 'product' value = 'ONYX' ).

              CALL METHOD lo_client->send
                EXCEPTIONS
                  http_communication_failure = 1
                  http_invalid_state         = 2
                  http_processing_failed     = 3
                  OTHERS                     = 4.

              CALL METHOD lo_client->receive
                EXCEPTIONS
                  http_communication_failure = 1
                  http_invalid_state         = 2
                  http_processing_failed     = 3
                  OTHERS                     = 4.
              response = lo_client->response->get_cdata( ).

              CALL FUNCTION 'HR_KR_STRING_TO_XSTRING'
                EXPORTING
                  unicode_string   = response
                IMPORTING
                  xstring_stream   = xstring
                EXCEPTIONS
                  invalid_codepage = 1.

              DATA(reader) = cl_sxml_string_reader=>create( xstring ).
              DATA(writer) = CAST if_sxml_writer( cl_sxml_string_writer=>create( ) ).
              TRY.
                  DO.
                    CLEAR node_wa.
                    DATA(node) = reader->read_next_node( ).
                    IF node IS INITIAL.
                      EXIT.
                    ENDIF.
                    writer->write_node( node ).
                    CASE node->type.
                      WHEN if_sxml_node=>co_nt_element_open.
                        DATA(open_element) = CAST if_sxml_open_element( node ).
                        node_wa-node_type = `open element`.
                        node_wa-prefix    = open_element->prefix.
                        node_wa-name      = open_element->qname-name.
                        node_wa-nsuri     = open_element->qname-namespace.
                        DATA(attributes)  = open_element->get_attributes( ).
                        APPEND node_wa TO nodes.
                        LOOP AT attributes INTO DATA(attribute).
                          node_wa-node_type = `attribute`.
                          node_wa-prefix    = attribute->prefix.
                          node_wa-name      = attribute->qname-name.
                          node_wa-nsuri     = attribute->qname-namespace.
                          IF attribute->value_type = if_sxml_value=>co_vt_text.
                            node_wa-value = attribute->get_value( ).
                          ELSEIF attribute->value_type =
                                             if_sxml_value=>co_vt_raw.
                            node_wa-value_raw = attribute->get_value_raw( ).
                          ENDIF.
                          APPEND node_wa TO nodes.
                        ENDLOOP.
                        CONTINUE.
                      WHEN if_sxml_node=>co_nt_element_close.
                        DATA(close_element) = CAST if_sxml_close_element( node ).
                        node_wa-node_type   = `close element`.
                        node_wa-prefix      = close_element->prefix.
                        node_wa-name        = close_element->qname-name.
                        node_wa-nsuri       = close_element->qname-namespace.
                        APPEND node_wa TO nodes.
                        CONTINUE.
                      WHEN if_sxml_node=>co_nt_value.
                        DATA(value_node) = CAST if_sxml_value_node( node ).
                        node_wa-node_type   = `value`.
                        IF value_node->value_type = if_sxml_value=>co_vt_text.
                          node_wa-value = value_node->get_value( ).
                        ELSEIF value_node->value_type = if_sxml_value=>co_vt_raw.
                          node_wa-value_raw = value_node->get_value_raw( ).
                        ENDIF.
                        APPEND node_wa TO nodes.
                        CONTINUE.
                      WHEN OTHERS.
                        node_wa-node_type   = `Error`.
                        APPEND node_wa TO nodes.
                        EXIT.
                    ENDCASE.
                  ENDDO.
                CATCH cx_sxml_parse_error INTO DATA(parse_error).
              ENDTRY.

              LOOP AT nodes INTO node_wa WHERE node_type = 'attribute'.
                DATA(lv_tabix) = sy-tabix.
                IF node_wa-value = 'status'.
                  IF status IS INITIAL.
                    lv_tabix = lv_tabix + 1.
                    READ TABLE nodes INTO DATA(wa_node) INDEX lv_tabix.
                    status = wa_node-value.
                  ENDIF.
                ELSEIF node_wa-value = 'message'.
                  lv_tabix = lv_tabix + 1.
                  READ TABLE nodes INTO wa_node INDEX lv_tabix.
                  message = wa_node-value.
                ELSEIF node_wa-value = 'msg'.
                  lv_tabix = lv_tabix + 1.
                  READ TABLE nodes INTO wa_node INDEX lv_tabix.
                  msg = wa_node-value.
                ELSEIF node_wa-value = 'cancelDate' OR node_wa-value = 'canceldate'.
                  lv_tabix = lv_tabix + 1.
                  READ TABLE nodes INTO wa_node INDEX lv_tabix.
                  SPLIT wa_node-value AT space INTO cncdt cnctm.
                ELSEIF node_wa-value = 'irn'.
                  lv_tabix = lv_tabix + 1.
                  READ TABLE nodes INTO wa_node INDEX lv_tabix.
                  irn = wa_node-value.
                ENDIF.
                CLEAR : lv_tabix,wa_node.
              ENDLOOP.
              CONDENSE : status,message,msg,cncdt,cnctm,irn.

              <ls_canc1>-status = status.
              <ls_canc1>-message = message.
              <ls_canc1>-msg = msg.
              IF status = 'SUCCESS'.
                UPDATE zeinv_master SET irn_canc = 'X'
                                        canc_rem = <ls_canc1>-remarks
                                        canc_date = sy-datum
                                        canc_time = sy-uzeit
                                        cncdt = cncdt
                                        cnctm = cnctm
                                        WHERE irn = <ls_canc1>-irn.
                COMMIT WORK.
                <ls_canc1>-icon  = '3'.
              ELSE.
                <ls_canc1>-icon  = '1'.
              ENDIF.
            ELSE.
              <ls_canc1>-status = 'Error'.
              <ls_canc1>-message = 'Token not found for GSTIN'.
              <ls_canc1>-msg = 'Token not found for GSTIN'.
              <ls_canc1>-icon  = '1'.
            ENDIF.
            CLEAR : lv_body,response,node_wa,nodes,status,message,msg,cncdt,cnctm,irn,
            reader,writer,node,open_element,close_element,value_node,parse_error,xstring,wa_einv_token,lv_compid.
            REFRESH : nodes[],attributes[].
          ENDLOOP.

          IF in = 'X'.
            CALL SCREEN 400.
          ENDIF.
        ELSE.
          MESSAGE : 'Cannot connect to API' TYPE 'I' DISPLAY LIKE 'E'.
          LEAVE TO SCREEN 0.
        ENDIF.
      ENDIF.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Form  BUILD_FCAT2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM build_fcat2 .
  DATA:l_fieldcat2 TYPE lvc_s_fcat.
  REFRESH : i_fieldcat2.

  l_fieldcat2-col_pos   = 1.
  l_fieldcat2-fieldname = 'CHECK'.
  l_fieldcat2-tabname   = 'LT_CANC'.
  l_fieldcat2-coltext   = 'Select'.
  l_fieldcat2-outputlen = '8'.
  l_fieldcat2-edit      = 'X'.
  l_fieldcat2-checkbox  = 'X'.
  l_fieldcat2-fix_column = 'X'.
  APPEND l_fieldcat2 TO i_fieldcat2.
  CLEAR l_fieldcat2.

  l_fieldcat2-col_pos   = 1.
  l_fieldcat2-fieldname = 'REMARKS'.
  l_fieldcat2-tabname   = 'LT_CANC'.
  l_fieldcat2-coltext   = 'Cancel Remarks'.
  l_fieldcat2-outputlen  = '50'.
  l_fieldcat2-edit      = 'X'.
  APPEND l_fieldcat2 TO i_fieldcat2.
  CLEAR l_fieldcat2.

  l_fieldcat2-col_pos   = 1.
  l_fieldcat2-fieldname = 'INVOICE_NO'.
  l_fieldcat2-tabname   = 'LT_CANC'.
  l_fieldcat2-coltext   = 'Tax Invoice'.
  l_fieldcat2-outputlen  = '20'.
  APPEND l_fieldcat2 TO i_fieldcat2.
  CLEAR l_fieldcat2.

  l_fieldcat2-col_pos   = 1.
  l_fieldcat2-fieldname = 'IRN'.
  l_fieldcat2-tabname   = 'LT_CANC'.
  l_fieldcat2-coltext   = 'IRN No'.
  l_fieldcat2-outputlen  = '64'.
  APPEND l_fieldcat2 TO i_fieldcat2.
  CLEAR l_fieldcat2.

  l_fieldcat2-col_pos   = 1.
  l_fieldcat2-fieldname = 'PROCESS_DATE'.
  l_fieldcat2-tabname   = 'LT_CANC'.
  l_fieldcat2-coltext   = 'Process Dt'.
  l_fieldcat2-outputlen  = '10'.
  APPEND l_fieldcat2 TO i_fieldcat2.
  CLEAR l_fieldcat2.

  l_fieldcat2-col_pos   = 1.
  l_fieldcat2-fieldname = 'PROCESS_TIME'.
  l_fieldcat2-tabname   = 'LT_CANC'.
  l_fieldcat2-coltext   = 'Process Time'.
  l_fieldcat2-outputlen  = '14'.
  APPEND l_fieldcat2 TO i_fieldcat2.
  CLEAR l_fieldcat2.

  l_fieldcat2-col_pos   = 1.
  l_fieldcat2-fieldname = 'ACKNO'.
  l_fieldcat2-tabname   = 'LT_CANC'.
  l_fieldcat2-coltext   = 'Ack. No'.
  l_fieldcat2-outputlen  = '10'.
  APPEND l_fieldcat2 TO i_fieldcat2.
  CLEAR l_fieldcat2.

  l_fieldcat2-col_pos   = 1.
  l_fieldcat2-fieldname = 'ACKDT'.
  l_fieldcat2-tabname   = 'LT_CANC'.
  l_fieldcat2-coltext   = 'Ack. Dt.'.
  l_fieldcat2-outputlen  = '12'.
  APPEND l_fieldcat2 TO i_fieldcat2.
  CLEAR l_fieldcat2.

  l_fieldcat2-col_pos   = 1.
  l_fieldcat2-fieldname = 'ACKTM'.
  l_fieldcat2-tabname   = 'LT_CANC'.
  l_fieldcat2-coltext   = 'Ack. Tm.'.
  l_fieldcat2-outputlen  = '10'.
  APPEND l_fieldcat2 TO i_fieldcat2.
  CLEAR l_fieldcat2.

  l_fieldcat2-col_pos   = 1.
  l_fieldcat2-fieldname = 'ID'.
  l_fieldcat2-tabname   = 'LT_CANC'.
  l_fieldcat2-coltext   = 'Id'.
  l_fieldcat2-outputlen  = '8'.
  APPEND l_fieldcat2 TO i_fieldcat2.
  CLEAR l_fieldcat2.

  l_fieldcat2-col_pos   = 1.
  l_fieldcat2-fieldname = 'BUKRS'.
  l_fieldcat2-tabname   = 'LT_CANC'.
  l_fieldcat2-coltext   = 'CCode'.
  l_fieldcat2-outputlen  = '5'.
  APPEND l_fieldcat2 TO i_fieldcat2.
  CLEAR l_fieldcat2.

  l_fieldcat2-col_pos   = 1.
  l_fieldcat2-fieldname = 'WERKS'.
  l_fieldcat2-tabname   = 'LT_CANC'.
  l_fieldcat2-coltext   = 'Plant'.
  l_fieldcat2-outputlen  = '6'.
  APPEND l_fieldcat2 TO i_fieldcat2.
  CLEAR l_fieldcat2.

  l_fieldcat2-col_pos   = 1.
  l_fieldcat2-fieldname = 'REGION'.
  l_fieldcat2-tabname   = 'LT_CANC'.
  l_fieldcat2-coltext   = 'Region'.
  l_fieldcat2-outputlen  = '6'.
  APPEND l_fieldcat2 TO i_fieldcat2.
  CLEAR l_fieldcat2.

  l_fieldcat2-col_pos   = 1.
  l_fieldcat2-fieldname = 'CORR_SAP_DOC'.
  l_fieldcat2-tabname   = 'LT_CANC'.
  l_fieldcat2-coltext   = 'Billing Doc'.
  l_fieldcat2-outputlen  = '10'.
  APPEND l_fieldcat2 TO i_fieldcat2.
  CLEAR l_fieldcat2.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_ALV2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM display_alv2 .
  IF g_custom_container2 IS INITIAL.
    CREATE OBJECT g_custom_container2
      EXPORTING
        container_name = g_container2.
    CREATE OBJECT alv_grid2
      EXPORTING
        i_parent = g_custom_container2.

    PERFORM exclude_buttons.

    CALL METHOD alv_grid2->set_table_for_first_display
      EXPORTING
        is_layout            = wa_layout
        it_toolbar_excluding = lt_exclude
      CHANGING
        it_outtab            = lt_canc[]
        it_fieldcatalog      = i_fieldcat2[].
  ELSE.
    CALL METHOD alv_grid2->refresh_table_display.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0400  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0400 OUTPUT.
  SET PF-STATUS 'ST_400'.
  SET TITLEBAR 'TT_400'.

  PERFORM build_fcat3.
  PERFORM display_alv3.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0400  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0400 INPUT.
  CASE sy-ucomm.
    WHEN 'BACK' OR 'CANCEL' OR 'EXIT'.
      LEAVE TO TRANSACTION 'ZFI_IRN_POST'.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Form  BUILD_FCAT3
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM build_fcat3 .
  DATA:l_fieldcat3 TYPE lvc_s_fcat.
  REFRESH : i_fieldcat3.

  l_fieldcat3-col_pos   = 1.
  l_fieldcat3-fieldname = 'STATUS'.
  l_fieldcat3-tabname   = 'LT_CANC'.
  l_fieldcat3-coltext   = 'Status'.
  l_fieldcat3-outputlen = '10'.
  APPEND l_fieldcat3 TO i_fieldcat3.
  CLEAR l_fieldcat3.

  l_fieldcat3-col_pos   = 1.
  l_fieldcat3-fieldname = 'MESSAGE'.
  l_fieldcat3-tabname   = 'LT_CANC'.
  l_fieldcat3-coltext   = 'Message1'.
  l_fieldcat3-outputlen = '40'.
  APPEND l_fieldcat3 TO i_fieldcat3.
  CLEAR l_fieldcat3.

  l_fieldcat3-col_pos   = 1.
  l_fieldcat3-fieldname = 'MSG'.
  l_fieldcat3-tabname   = 'LT_CANC'.
  l_fieldcat3-coltext   = 'Message2'.
  l_fieldcat3-outputlen = '40'.
  APPEND l_fieldcat3 TO i_fieldcat3.
  CLEAR l_fieldcat3.

  l_fieldcat3-col_pos   = 1.
  l_fieldcat3-fieldname = 'REMARKS'.
  l_fieldcat3-tabname   = 'LT_CANC'.
  l_fieldcat3-coltext   = 'Cancel Remarks'.
  l_fieldcat3-outputlen  = '50'.
  APPEND l_fieldcat3 TO i_fieldcat3.
  CLEAR l_fieldcat3.

  l_fieldcat3-col_pos   = 1.
  l_fieldcat3-fieldname = 'INVOICE_NO'.
  l_fieldcat3-tabname   = 'LT_CANC'.
  l_fieldcat3-coltext   = 'Tax Invoice'.
  l_fieldcat3-outputlen  = '20'.
  APPEND l_fieldcat3 TO i_fieldcat3.
  CLEAR l_fieldcat3.

  l_fieldcat3-col_pos   = 1.
  l_fieldcat3-fieldname = 'IRN'.
  l_fieldcat3-tabname   = 'LT_CANC'.
  l_fieldcat3-coltext   = 'IRN No'.
  l_fieldcat3-outputlen  = '64'.
  APPEND l_fieldcat3 TO i_fieldcat3.
  CLEAR l_fieldcat3.

  l_fieldcat3-col_pos   = 1.
  l_fieldcat3-fieldname = 'PROCESS_DATE'.
  l_fieldcat3-tabname   = 'LT_CANC'.
  l_fieldcat3-coltext   = 'Process Dt'.
  l_fieldcat3-outputlen  = '10'.
  APPEND l_fieldcat3 TO i_fieldcat3.
  CLEAR l_fieldcat3.

  l_fieldcat3-col_pos   = 1.
  l_fieldcat3-fieldname = 'PROCESS_TIME'.
  l_fieldcat3-tabname   = 'LT_CANC'.
  l_fieldcat3-coltext   = 'Process Time'.
  l_fieldcat3-outputlen  = '14'.
  APPEND l_fieldcat3 TO i_fieldcat3.
  CLEAR l_fieldcat3.

  l_fieldcat3-col_pos   = 1.
  l_fieldcat3-fieldname = 'ACKNO'.
  l_fieldcat3-tabname   = 'LT_CANC'.
  l_fieldcat3-coltext   = 'Ack. No'.
  l_fieldcat3-outputlen  = '10'.
  APPEND l_fieldcat3 TO i_fieldcat3.
  CLEAR l_fieldcat3.

  l_fieldcat3-col_pos   = 1.
  l_fieldcat3-fieldname = 'ACKDT'.
  l_fieldcat3-tabname   = 'LT_CANC'.
  l_fieldcat3-coltext   = 'Ack. Dt.'.
  l_fieldcat3-outputlen  = '12'.
  APPEND l_fieldcat3 TO i_fieldcat3.
  CLEAR l_fieldcat3.

  l_fieldcat3-col_pos   = 1.
  l_fieldcat3-fieldname = 'ACKTM'.
  l_fieldcat3-tabname   = 'LT_CANC'.
  l_fieldcat3-coltext   = 'Ack. Tm.'.
  l_fieldcat3-outputlen  = '10'.
  APPEND l_fieldcat3 TO i_fieldcat3.
  CLEAR l_fieldcat3.

  l_fieldcat3-col_pos   = 1.
  l_fieldcat3-fieldname = 'ID'.
  l_fieldcat3-tabname   = 'LT_CANC'.
  l_fieldcat3-coltext   = 'Id'.
  l_fieldcat3-outputlen  = '8'.
  APPEND l_fieldcat3 TO i_fieldcat3.
  CLEAR l_fieldcat3.

  l_fieldcat3-col_pos   = 1.
  l_fieldcat3-fieldname = 'BUKRS'.
  l_fieldcat3-tabname   = 'LT_CANC'.
  l_fieldcat3-coltext   = 'CCode'.
  l_fieldcat3-outputlen  = '5'.
  APPEND l_fieldcat3 TO i_fieldcat3.
  CLEAR l_fieldcat3.

  l_fieldcat3-col_pos   = 1.
  l_fieldcat3-fieldname = 'WERKS'.
  l_fieldcat3-tabname   = 'LT_CANC'.
  l_fieldcat3-coltext   = 'Plant'.
  l_fieldcat3-outputlen  = '6'.
  APPEND l_fieldcat3 TO i_fieldcat3.
  CLEAR l_fieldcat3.

  l_fieldcat3-col_pos   = 1.
  l_fieldcat3-fieldname = 'REGION'.
  l_fieldcat3-tabname   = 'LT_CANC'.
  l_fieldcat3-coltext   = 'Region'.
  l_fieldcat3-outputlen  = '6'.
  APPEND l_fieldcat3 TO i_fieldcat3.
  CLEAR l_fieldcat3.

  l_fieldcat3-col_pos   = 1.
  l_fieldcat3-fieldname = 'CORR_SAP_DOC'.
  l_fieldcat3-tabname   = 'LT_CANC'.
  l_fieldcat3-coltext   = 'Billing Doc'.
  l_fieldcat3-outputlen  = '10'.
  APPEND l_fieldcat3 TO i_fieldcat3.
  CLEAR l_fieldcat3.

  wa_layout-excp_fname = 'ICON'.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_ALV3
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM display_alv3 .
  IF g_custom_container3 IS INITIAL.
    CREATE OBJECT g_custom_container3
      EXPORTING
        container_name = g_container3.
    CREATE OBJECT alv_grid3
      EXPORTING
        i_parent = g_custom_container3.

    PERFORM exclude_buttons.

    CALL METHOD alv_grid3->set_table_for_first_display
      EXPORTING
        is_layout            = wa_layout
        it_toolbar_excluding = lt_exclude
      CHANGING
        it_outtab            = lt_canc[]
        it_fieldcatalog      = i_fieldcat3[].
  ELSE.
    CALL METHOD alv_grid3->refresh_table_display.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CHARG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_charg .
  SELECT * FROM zfi_creditnote
    INTO TABLE @DATA(it_cbi)
    WHERE zfi_tax_inv IN @s_ti
    AND werks IN @s_werks AND bukrs = '1000' AND zfi_tax_inv IN @r_ti.
  IF sy-subrc = 0.

    IF it_cbi IS NOT INITIAL.
      SELECT bukrs,belnr,gjahr,budat,bldat,usnam
        FROM bkpf INTO TABLE @DATA(lt_dtchk)
        FOR ALL ENTRIES IN @it_cbi
        WHERE bukrs = @it_cbi-bukrs AND belnr = @it_cbi-db_doc_no AND bldat IN @s_budat AND stblg = ' '.
      IF lt_dtchk[] IS NOT INITIAL.
        SELECT bukrs,
               belnr,
               gjahr,
               lifnr,
               kunnr,
               bupla,
               werks,
               koart
          FROM bseg
          INTO TABLE @DATA(it_bg)
          FOR ALL ENTRIES IN @lt_dtchk
          WHERE bukrs = @lt_dtchk-bukrs
          AND   belnr = @lt_dtchk-belnr
          AND   gjahr = @lt_dtchk-gjahr
          AND ( koart = 'D'
          OR    koart = 'K' ).
      ENDIF.

      SELECT a~lifnr,
             a~name1,
             a~regio,
             a~pstlz,
             a~stcd3,
             a~land1,
             a~ven_class,    "$LTIM b~ven_class,
             c~bezei,
             p~street,
             p~str_suppl1,
             p~str_suppl2
        FROM lfa1 AS a
*        INNER JOIN j_1imovend AS b ON a~lifnr EQ b~lifnr "$LTIM S/4 HANA code remediation : Viji : 08.12.2022
        INNER JOIN t005u AS c ON a~regio EQ c~bland AND c~spras EQ 'E' AND c~land1 = 'IN'
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO TABLE @DATA(it_lfa1)
        FOR ALL ENTRIES IN @it_cbi
        WHERE a~lifnr = @it_cbi-lifnr.

      SELECT *
        FROM makt
        INNER JOIN marc ON makt~matnr = marc~matnr
        INTO TABLE @DATA(it_st)
        FOR ALL ENTRIES IN @it_cbi
        WHERE makt~matnr = @it_cbi-matnr
        AND   marc~werks = @it_cbi-werks
        AND   makt~spras = 'E'.
      IF it_st IS NOT INITIAL.
        SELECT *
          FROM zgst_hsn_rate
          INTO TABLE it_hsn
          FOR ALL ENTRIES IN it_st
          WHERE steuc = it_st-marc-steuc.
      ENDIF.
    ENDIF.

    DATA(it_cbh) = it_cbi[].
    SORT it_cbh BY db_doc_no.
    DELETE ADJACENT DUPLICATES FROM it_cbh COMPARING db_doc_no.

    IF it_cbh[] IS NOT INITIAL.
      SELECT a~werks,
             a~name1,
             a~regio,
             a~pstlz,
             a~stras,
             a~land1,
             b~gstin,
             c~bezei,
             p~street,
             p~str_suppl1,
             p~str_suppl2
        FROM t001w AS a
        INNER JOIN j_1bbranch AS b ON a~j_1bbranch = b~branch AND b~bukrs = '1000'
        INNER JOIN t005u AS c ON a~regio = c~bland AND c~land1 = 'IN' AND c~spras = 'E'
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO TABLE @DATA(it_wk)
        FOR ALL ENTRIES IN @it_cbh
        WHERE a~werks = @it_cbh-werks.
    ENDIF.

    LOOP AT it_cbh INTO DATA(wa_cbh).
      READ TABLE lt_dtchk INTO DATA(ls_dtchk) WITH KEY bukrs = wa_cbh-bukrs belnr = wa_cbh-db_doc_no.
      IF sy-subrc = 0.
        CLEAR : show.
        IF ls_dtchk-usnam = sy-uname.
          show = 'X'.
        ELSE.
          READ TABLE lt_auth WITH KEY werks = wa_cbh-werks psno = sy-uname TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            show = 'X'.
          ENDIF.
        ENDIF.
        IF show = 'X'.
          READ TABLE it_bg INTO DATA(wa_bg) WITH KEY bukrs = ls_dtchk-bukrs belnr = ls_dtchk-belnr gjahr = ls_dtchk-gjahr.
          READ TABLE it_lfa1 INTO DATA(wa_lfa1) WITH KEY lifnr = wa_bg-lifnr.

          ls_irn-doctype = 'RI'.
          ls_irn-trntyp = 'Regular'.
          ls_irn-rchrg = 'N'.
          ls_irn-taxsch = 'GST'.
          ls_irn-no = wa_cbh-zfi_tax_inv.


          CLEAR : lv_budat,lv_cpudt,lv_m1,lv_m2,date_end.
          SELECT budat
           cpudt UP TO 1 ROWS
           FROM bkpf
           INTO ( lv_budat,lv_cpudt )
           WHERE belnr = ls_dtchk-belnr
           AND bukrs EQ ls_dtchk-bukrs
           AND gjahr EQ ls_dtchk-gjahr ORDER BY budat.
          ENDSELECT.

          IF sy-subrc EQ 0.
            lv_m1 = lv_budat+4(2).
            lv_m2 = lv_cpudt+4(2).

            IF lv_m1 EQ lv_m2.
              date_end = lv_cpudt.
            ELSE.

              CALL FUNCTION 'HR_JP_MONTH_BEGIN_END_DATE'
                EXPORTING
                  iv_date           = lv_budat
                IMPORTING
                  ev_month_end_date = date_end.       " end date.
            ENDIF.
          ENDIF.
          CONCATENATE date_end+6(2) date_end+4(2) date_end+0(4) INTO ls_irn-dt SEPARATED BY '-'.

          READ TABLE it_wk INTO DATA(wa_wk) WITH KEY werks = wa_cbh-werks.
          IF sy-subrc = 0.
            ls_irn-strdnm = wa_wk-name1.
            ls_irn-sgstin = wa_wk-gstin.
            ls_irn-sloc   = wa_wk-bezei.
            ls_irn-sstcd  = wa_wk-regio.
            ls_irn-spin   = wa_wk-pstlz.
            ls_irn-pos    = wa_wk-regio.
            CONCATENATE wa_wk-street wa_wk-str_suppl1 wa_wk-str_suppl2 INTO ls_irn-sbnm SEPARATED BY space.
            ls_irn-cntcd  = wa_wk-land1.
            IF sy-sysid = 'SED' OR sy-sysid = 'SEQ'.
              SELECT gstin UP TO 1 ROWS
                FROM zeinv_gstin
                INTO ls_irn-sgstin
                WHERE zregio = wa_wk-regio.
              ENDSELECT.
            ENDIF.
            ls_irn-usergstin = ls_irn-sgstin.
          ENDIF.

          ls_irn-bgstin  = wa_lfa1-stcd3.
          ls_irn-btrdnm  = wa_lfa1-name1.
          ls_irn-bloc    = wa_lfa1-bezei.
          ls_irn-bstcd   = wa_lfa1-regio.
          ls_irn-bpin    = wa_lfa1-pstlz.
          CONCATENATE wa_lfa1-street wa_lfa1-str_suppl1 wa_lfa1-str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
          IF ls_irn-bgstin IS INITIAL.
            ls_irn-bgstin = 'URP'.
          ELSE.
            ls_irn-catg = 'B2B'.
          ENDIF.
*      ls_irn-togstin = ls_irn-sgstin.

          IF ls_irn-dgstin IS INITIAL.
            ls_irn-dgstin = 'null'.
          ENDIF.
          IF ls_irn-dtrdnm IS INITIAL.
            ls_irn-dtrdnm = 'null'.
          ENDIF.
          IF ls_irn-dloc IS INITIAL.
            ls_irn-dloc = 'null'.
          ENDIF.
          IF ls_irn-dstcd IS INITIAL.
            ls_irn-dstcd = 'null'.
          ENDIF.
          IF ls_irn-dpin IS INITIAL.
            ls_irn-dpin = 'null'.
          ENDIF.
          IF ls_irn-togstin IS INITIAL.
            ls_irn-togstin = 'null'.
          ENDIF.
          IF ls_irn-totrd_nm IS INITIAL.
            ls_irn-totrd_nm = 'null'.
          ENDIF.
          IF ls_irn-toloc IS INITIAL.
            ls_irn-toloc = 'null'.
          ENDIF.
          IF ls_irn-tostcd IS INITIAL.
            ls_irn-tostcd = 'null'.
          ENDIF.
          IF ls_irn-topin IS INITIAL.
            ls_irn-topin = 'null'.
          ENDIF.



          CLEAR: lv_tottxval, lv_totiamt, lv_totcamt, lv_totsamt,lv_tottcsvl.
          LOOP AT it_cbi INTO DATA(wa_cbi) WHERE db_doc_no = wa_cbh-db_doc_no.
            lv_num = lv_num + 1.
            DATA(wa_st) = it_st[ makt-matnr = wa_cbi-matnr
                                 marc-werks = wa_cbi-werks ].

            ls_item-no = wa_cbi-zfi_tax_inv.
            ls_item-prdnm = wa_cbi-matnr.
            ls_item-prddesc = wa_st-makt-maktg.

            REPLACE ALL OCCURRENCES OF ',' IN ls_item-prdnm WITH space.
            ls_item-hsncd = wa_st-marc-steuc.

            ls_item-num = lv_num.
            CONDENSE : ls_item-num.
            ls_item-qty = wa_cbi-mb_qty.
            SELECT einvuom UP TO 1 ROWS
              FROM zeinv_uom
              INTO ls_item-unit WHERE sapuom = wa_cbi-meins.
            ENDSELECT.
            ls_item-sval = wa_cbi-dt_not_val_ovhead.
            ls_item-txval = ls_item-sval.
            ls_item-unitprice = wa_cbi-dt_not_val_ovhead / wa_cbi-mb_qty.
            ls_item-othchrg = wa_cbi-tcsval.
            lv_tottcsvl = lv_tottcsvl + wa_cbi-tcsval.
*        lv_tottxval = lv_tottxval + ls_item-sval + ls_item-txval.
            lv_tottxval = lv_tottxval + wa_cbi-dt_not_val_ovhead.

            IF wa_cbi-zigst EQ '0.00' OR wa_cbi-zigst IS INITIAL.
              CLEAR: flg_igst.
              ls_irn-ntr = 'INTRA'.
            ELSE.
              flg_igst = 'X'.
              ls_irn-ntr = 'INTER'.
            ENDIF.

            IF flg_igst = 'X'.
              ls_item-irt = wa_cbi-zigst.
              ls_item-iamt = wa_cbi-zigst_val.
              lv_totiamt = lv_totiamt + wa_cbi-zigst_val.
            ELSE.
              ls_item-crt = wa_cbi-zcgst.
              ls_item-srt = wa_cbi-zsgst.
              ls_item-camt = wa_cbi-zcgst_val.
              ls_item-samt = wa_cbi-zsgst_val.
              lv_totcamt = lv_totcamt + wa_cbi-zcgst_val.
              lv_totsamt = lv_totsamt + wa_cbi-zsgst_val.
            ENDIF.

            ls_item-itmval = ls_item-txval + ls_item-iamt + ls_item-camt + ls_item-samt + ls_item-othchrg.

            CONDENSE: ls_item-no,
                      ls_item-prdnm,
                      ls_item-prddesc,
                      ls_item-hsncd,
                      ls_item-qty,
                      ls_item-unit,
                      ls_item-unitprice,
                      ls_item-itmval,
                      ls_item-sval,
                      ls_item-txval,
                      ls_item-othchrg,
                      ls_item-crt,
                      ls_item-srt,
                      ls_item-irt,
                      ls_item-iamt,
                      ls_item-camt,
                      ls_item-samt.
            IF ls_item-irt IS INITIAL.
              ls_item-irt = '0'.
            ENDIF.
            IF ls_item-crt IS INITIAL.
              ls_item-crt = '0'.
            ENDIF.
            IF ls_item-srt IS INITIAL.
              ls_item-srt = '0'.
            ENDIF.
            IF ls_item-iamt IS INITIAL.
              ls_item-iamt = '0'.
            ENDIF.
            IF ls_item-camt IS INITIAL.
              ls_item-camt = '0'.
            ENDIF.
            IF ls_item-samt IS INITIAL.
              ls_item-samt = '0'.
            ENDIF.
            IF ls_item-othchrg IS INITIAL.
              ls_item-othchrg = '0'.
            ENDIF.
            APPEND ls_item TO lt_item.
            CLEAR : ls_item.
          ENDLOOP.

          ls_irn-itemlist = lt_item[].

          ls_irn-tottxval = lv_tottxval.
          ls_irn-totiamt = lv_totiamt.
          ls_irn-totcamt = lv_totcamt.
          ls_irn-totsamt = lv_totsamt.
          ls_irn-totinvval = ls_irn-tottxval + ls_irn-totiamt + ls_irn-totcamt + ls_irn-totsamt + lv_tottcsvl.
          lv_totinval = lv_tottxval + lv_totcamt + lv_totsamt + lv_totiamt + lv_tottcsvl.
          IF ls_irn-catg IS INITIAL.
            IF lv_totinval GT lv_budget.
              IF ls_irn-ntr = 'INTER'.
                ls_irn-catg = 'B2CL'.
              ELSE.
                ls_irn-catg = 'B2CS'.
              ENDIF.
            ELSE.
              ls_irn-catg = 'B2CS'.
            ENDIF.
          ENDIF.

          CONDENSE : ls_irn-forcur,ls_irn-ntr.

          IF ls_irn-forcur IS INITIAL.
            ls_irn-forcur = 'null'.
          ENDIF.
          IF ls_irn-invforcur IS INITIAL.
            ls_irn-invforcur = '0'.
          ENDIF.
          IF ls_irn-totothchrg IS INITIAL.
            ls_irn-totothchrg = '0'.
          ENDIF.
          IF ls_irn-totiamt IS INITIAL.
            ls_irn-totiamt = '0'.
          ENDIF.
          IF ls_irn-totcamt IS INITIAL.
            ls_irn-totcamt = '0'.
          ENDIF.
          IF ls_irn-totsamt IS INITIAL.
            ls_irn-totsamt = '0'.
          ENDIF.
          ls_irn-gen9 = wa_cbh-chargeable_mater.                                       "ad by akshay_D-117834
          CONDENSE: ls_irn-doctype, ls_irn-catg, ls_irn-trntyp, ls_irn-no, ls_irn-rchrg, ls_irn-sgstin, ls_irn-strdnm,
                    ls_irn-sloc, ls_irn-sstcd, ls_irn-spin, ls_irn-bgstin, ls_irn-btrdnm, ls_irn-bloc,
                    ls_irn-bstcd, ls_irn-bpin, ls_irn-togstin, ls_irn-totrd_nm,ls_irn-toloc,
                    ls_irn-tostcd, ls_irn-topin, ls_irn-taxsch, ls_irn-totinvval, ls_irn-tottxval,
                    ls_irn-totcamt, ls_irn-totsamt, ls_irn-totiamt,ls_irn-gen9.
          APPEND ls_irn TO lt_irn.

          ls_einv_master-bukrs = ls_dtchk-bukrs.
          ls_einv_master-werks = wa_cbh-werks.
          ls_einv_master-region = wa_wk-regio.
          ls_einv_master-invoice_no = wa_cbh-zfi_tax_inv.
          ls_einv_master-user_gstin = ls_irn-sgstin.
          ls_einv_master-zmodule = 'FI'.
          ls_einv_master-sap_doc = ls_dtchk-belnr.
          ls_einv_master-creation_date = ls_dtchk-bldat.
          ls_einv_master-gjahr = ls_dtchk-gjahr.
          CONDENSE: ls_einv_master-bukrs, ls_einv_master-werks, ls_einv_master-region,
                    ls_einv_master-invoice_no, ls_einv_master-zmodule, ls_einv_master-sap_doc.
          APPEND ls_einv_master TO lt_einv_master.
          CLEAR : ls_einv_master.
          CLEAR : lv_count,ls_irn,lv_totinval.
          REFRESH : lt_item,ls_irn-itemlist.
        ENDIF.
      ENDIF.
      CLEAR : wa_bg,ls_dtchk,wa_lfa1,lv_num.
    ENDLOOP.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_STO_TAX
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_sto_tax .

  SELECT *
    FROM zfi_sto_taxinv AS hd
    INNER JOIN zfi_sto_tax_itm AS it
    ON  hd~mblnr   = it~mblnr
    AND hd~mjahr   = it~mjahr
    AND hd~taxrate = it~taxrate
    AND hd~belnr   = it~belnr
    AND hd~gjahr   = it~gjahr
    INTO TABLE @DATA(it_sti)
    WHERE hd~bukrs = '1000'
    AND   hd~rcpt_no IN @s_ti
    AND   hd~owerks IN @s_werks AND hd~rcpt_no IN @r_ti.
  IF sy-subrc = 0.
    SELECT bukrs,belnr,gjahr,budat,bldat,usnam
      FROM bkpf INTO TABLE @DATA(lt_dtchk)
      FOR ALL ENTRIES IN @it_sti
      WHERE bukrs = @it_sti-hd-bukrs AND belnr = @it_sti-hd-belnr AND bldat IN @s_budat AND stblg = ' '.
    IF lt_dtchk[] IS NOT INITIAL.
      SELECT bukrs,
             belnr,
             gjahr,
             lifnr,
             kunnr,
             bupla,
             werks,
             koart
        FROM bseg
        INTO TABLE @DATA(it_bg)
        FOR ALL ENTRIES IN @lt_dtchk
        WHERE bukrs = @lt_dtchk-bukrs
        AND   belnr = @lt_dtchk-belnr
        AND   gjahr = @lt_dtchk-gjahr
        AND ( koart = 'D'
        OR    koart = 'K' ).
    ENDIF.

    SELECT *
      FROM makt
      INNER JOIN marc ON makt~matnr = marc~matnr
      INTO TABLE @DATA(it_st1)
      FOR ALL ENTRIES IN @it_sti
      WHERE makt~matnr = @it_sti-it-matnr
      AND   marc~werks = @it_sti-hd-owerks
      AND   makt~spras = 'E'.
    IF it_st1 IS NOT INITIAL.
      SELECT *
        FROM zgst_hsn_rate
        INTO TABLE it_hsn
        FOR ALL ENTRIES IN it_st1
        WHERE steuc = it_st1-marc-steuc.
    ENDIF.

    DATA(it_sth) = it_sti[].
    SORT it_sth BY hd-belnr hd-gjahr.
    DELETE ADJACENT DUPLICATES FROM it_sth COMPARING hd-belnr hd-gjahr.

    IF it_sth[] IS NOT INITIAL.
      SELECT a~werks,
             a~name1,
             a~regio,
             a~pstlz,
             a~stras,
             a~land1,
             b~gstin,
             c~bezei,
             p~street,
             p~str_suppl1,
             p~str_suppl2
        FROM t001w AS a
        INNER JOIN j_1bbranch AS b ON a~j_1bbranch = b~branch AND b~bukrs = '1000'
        INNER JOIN t005u AS c ON a~regio = c~bland AND c~land1 = 'IN' AND c~spras = 'E'
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO TABLE @DATA(it_stwk)
        FOR ALL ENTRIES IN @it_sth
        WHERE a~werks = @it_sth-hd-owerks
        OR    a~werks = @it_sth-hd-nwerks.

      "soc by sneha-121879
      READ TABLE it_sti INTO DATA(wa_sti) INDEX 1.
      IF sy-subrc = 0.
        SHIFT wa_sti-hd-zzship_to LEFT DELETING LEADING '0'.
        SHIFT wa_sti-hd-zzdispatch_from LEFT DELETING LEADING '0'.
        IF strlen( wa_sti-hd-zzship_to ) EQ 4.
          wa_werks-ship_werks = wa_sti-hd-zzship_to.
        ENDIF.
        IF strlen( wa_sti-hd-zzdispatch_from ) EQ 4.
          wa_werks-dis_werks  = wa_sti-hd-zzdispatch_from.
        ENDIF.
        APPEND wa_werks TO it_werks.
      ENDIF.

      SELECT a~lifnr AS ship_to,a~name1,a~ort01,a~pstlz,a~regio, a~stcd3,b~name1 AS adrc_name1, b~str_suppl1, b~str_suppl2,b~str_suppl3
        FROM lfa1 AS a
        INNER JOIN adrc AS b ON a~adrnr = b~addrnumber
        INTO TABLE @DATA(it_shipaddr)
        FOR ALL ENTRIES IN @it_sti
        WHERE a~lifnr = @it_sti-hd-zzship_to.
      IF sy-subrc NE 0.
        SELECT a~kunnr AS ship_to,a~name1,a~ort01,a~pstlz,a~regio, a~stcd3,b~name1 AS adrc_name1, b~str_suppl1, b~str_suppl2,b~str_suppl3
      FROM kna1 AS a
      INNER JOIN adrc AS b ON a~adrnr = b~addrnumber
      INTO TABLE @it_shipaddr
      FOR ALL ENTRIES IN @it_sti
      WHERE a~kunnr = @it_sti-hd-zzship_to.
        IF sy-subrc NE 0.
          SELECT a~werks AS ship_to,
             a~name1,
             a~regio,
             a~ort01,
             a~pstlz,
*             a~stcd3,
*             a~stras,
*             a~land1,
*             p~street,
             p~name1 AS adrc_name1,
             p~str_suppl1,
             p~str_suppl2,
             p~str_suppl3
        FROM t001w AS a
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO TABLE @it_shipaddr
        FOR ALL ENTRIES IN @it_werks
        WHERE a~werks = @it_werks-ship_werks.
        ENDIF.
      ENDIF.

      SELECT a~lifnr AS disp_from,a~name1,a~ort01,a~pstlz,a~regio, a~stcd3,b~name1 AS adrc_name1, b~str_suppl1, b~str_suppl2,b~str_suppl3
      FROM lfa1 AS a
      INNER JOIN adrc AS b ON a~adrnr = b~addrnumber
      INTO TABLE @DATA(it_disaddr)
      FOR ALL ENTRIES IN @it_sti
      WHERE a~lifnr = @it_sti-hd-zzdispatch_from.
      IF sy-subrc NE 0.
        SELECT a~kunnr AS disp_from,a~name1,a~ort01,a~pstlz,a~regio, a~stcd3,b~name1 AS adrc_name1, b~str_suppl1, b~str_suppl2,b~str_suppl3
      FROM kna1 AS a
      INNER JOIN adrc AS b ON a~adrnr = b~addrnumber
      INTO CORRESPONDING FIELDS OF TABLE @it_disaddr
      FOR ALL ENTRIES IN @it_sti
      WHERE a~kunnr = @it_sti-hd-zzdispatch_from.
        IF sy-subrc NE 0.
          SELECT a~werks AS disp_from,
             a~name1,
             a~pstlz,
             a~ort01,
             a~regio,
*             a~stcd3,
*             a~stras,
*             a~land1,
*             p~street,
             p~name1 AS adrc_name1,
             p~str_suppl1,
             p~str_suppl2,
             p~str_suppl3
        FROM t001w AS a
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO CORRESPONDING FIELDS OF TABLE @it_disaddr
        FOR ALL ENTRIES IN @it_werks
        WHERE a~werks = @it_werks-dis_werks.
        ENDIF.
      ENDIF.
      CLEAR it_werks.
*            eoc by sneha-121879
    ENDIF.

    LOOP AT it_sth INTO DATA(wa_sth).
      READ TABLE lt_dtchk INTO DATA(ls_dtchk) WITH KEY bukrs = wa_sth-hd-bukrs belnr = wa_sth-hd-belnr.
      IF sy-subrc = 0.
        CLEAR : show.
        IF ls_dtchk-usnam = sy-uname.
          show = 'X'.
        ELSE.
          READ TABLE lt_auth WITH KEY werks = wa_sth-hd-owerks psno = sy-uname TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            show = 'X'.
          ENDIF.
        ENDIF.
        IF show = 'X'.

          ls_irn-doctype = 'RI'.
          ls_irn-trntyp = 'Regular'.
          ls_irn-rchrg = 'N'.
          ls_irn-taxsch = 'GST'.

          IF wa_sth-hd-region = wa_sth-hd-rregion.
            CLEAR: flg_igst.
            ls_irn-ntr = 'INTRA'.
          ELSE.
            flg_igst = 'X'.
            ls_irn-ntr = 'INTER'.
          ENDIF.

          ls_irn-no = wa_sth-hd-rcpt_no.

          CLEAR : lv_budat,lv_cpudt,lv_m1,lv_m2,date_end.
          SELECT budat
           cpudt UP TO 1 ROWS
           FROM bkpf
           INTO ( lv_budat,lv_cpudt )
           WHERE belnr = ls_dtchk-belnr
           AND bukrs EQ ls_dtchk-bukrs
           AND gjahr EQ ls_dtchk-gjahr ORDER BY budat.
          ENDSELECT.

          IF sy-subrc EQ 0.
            lv_m1 = lv_budat+4(2).
            lv_m2 = lv_cpudt+4(2).

            IF lv_m1 EQ lv_m2.
              date_end = lv_cpudt.
            ELSE.

              CALL FUNCTION 'HR_JP_MONTH_BEGIN_END_DATE'
                EXPORTING
                  iv_date           = lv_budat
                IMPORTING
                  ev_month_end_date = date_end.       " end date.
            ENDIF.
          ENDIF.
          CONCATENATE date_end+6(2) date_end+4(2) date_end+0(4) INTO ls_irn-dt SEPARATED BY '-'.

          READ TABLE it_stwk INTO DATA(wa_owk) WITH KEY werks = wa_sth-hd-owerks.
          IF sy-subrc = 0.
            ls_irn-strdnm = wa_owk-name1.
            ls_irn-sgstin = wa_owk-gstin.
            ls_irn-sloc   = wa_owk-bezei.
            ls_irn-sstcd  = wa_owk-regio.
            ls_irn-spin   = wa_owk-pstlz.
            ls_irn-sbnm   = wa_owk-stras.
            ls_irn-cntcd  = wa_owk-land1.
            CONCATENATE wa_owk-street wa_owk-str_suppl1 wa_owk-str_suppl2 INTO ls_irn-sbnm SEPARATED BY space.
            IF sy-sysid = 'SED' OR sy-sysid = 'SEQ'.
              SELECT gstin UP TO 1 ROWS
                FROM zeinv_gstin
                INTO ls_irn-sgstin
                WHERE zregio = wa_owk-regio.
              ENDSELECT.
            ENDIF.
            ls_irn-usergstin = ls_irn-sgstin.
          ENDIF.

          READ TABLE it_stwk INTO DATA(wa_nwk) WITH KEY werks = wa_sth-hd-nwerks.
          IF sy-subrc = 0.
            ls_irn-bgstin  = wa_nwk-gstin.
            ls_irn-btrdnm  = wa_nwk-name1.
            ls_irn-bloc    = wa_nwk-bezei.
            ls_irn-bstcd   = wa_nwk-regio.
            ls_irn-pos     = wa_nwk-regio.
            ls_irn-bpin    = wa_nwk-pstlz.
            CONCATENATE wa_nwk-street wa_nwk-str_suppl1 wa_nwk-str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
*        ls_irn-togstin = wa_nwk-gstin.
            IF ls_irn-bgstin IS INITIAL.
              ls_irn-bgstin = 'URP'.
            ELSE.
              ls_irn-catg = 'B2B'.
            ENDIF.
          ENDIF.



          CLEAR: lv_tottxval, lv_totiamt, lv_totcamt, lv_totsamt.
          LOOP AT it_sti INTO wa_sti WHERE it-mblnr   = wa_sth-hd-mblnr
                                             AND it-mjahr   = wa_sth-hd-mjahr
                                             AND it-taxrate = wa_sth-hd-taxrate
                                             AND it-belnr   = wa_sth-hd-belnr
                                             AND it-gjahr   = wa_sth-hd-gjahr.


            DATA(wa_st1) = it_st1[ makt-matnr = wa_sti-it-matnr
                                   marc-werks = wa_sti-hd-owerks ].

            ls_item-no = wa_sth-hd-rcpt_no.
            ls_item-prdnm = wa_sti-it-matnr.
            ls_item-prddesc = wa_st1-makt-maktg.

            REPLACE ALL OCCURRENCES OF ',' IN ls_item-prdnm WITH space.
            ls_item-hsncd = wa_st1-marc-steuc.

            ls_item-num = wa_sti-it-zint.

            ls_item-qty = wa_sti-it-menge.
            DATA: lv_un TYPE meins.
            SELECT meins UP TO 1 ROWS
              FROM mseg
              INTO lv_un
              WHERE mblnr = wa_sti-it-mblnr
              AND   mjahr = wa_sti-it-mjahr
              AND   line_id = wa_sti-it-zint
              ORDER BY PRIMARY KEY.
            ENDSELECT.

            SELECT einvuom UP TO 1 ROWS
              FROM zeinv_uom
              INTO ls_item-unit WHERE sapuom = lv_un.
            ENDSELECT.

            ls_item-unitprice = wa_sti-it-verpr.
            ls_item-sval = ls_item-qty * ls_item-unitprice.
            ls_item-txval = ls_item-sval.
            lv_tottxval = lv_tottxval + ls_item-sval.

            IF flg_igst = 'X'.
              IF line_exists( it_hsn[ steuc = wa_st1-marc-steuc ] ) .
                ls_item-irt = it_hsn[ steuc = wa_st1-marc-steuc ]-taxrate.
              ENDIF.
              CONDENSE: ls_item-irt.
              ls_item-iamt = wa_sti-it-taxval.
              lv_totiamt = lv_totiamt + ls_item-iamt.
            ELSE.
              IF line_exists( it_hsn[ steuc = wa_st1-marc-steuc ] ) .
                ls_item-crt = it_hsn[ steuc = wa_st1-marc-steuc ]-taxrate / 2.
                ls_item-srt = it_hsn[ steuc = wa_st1-marc-steuc ]-taxrate / 2.
              ENDIF.
              CONDENSE: ls_item-crt, ls_item-srt.
              ls_item-camt = wa_sti-it-taxval / 2.
              ls_item-samt = wa_sti-it-taxval / 2.
              lv_totcamt = lv_totcamt + ls_item-camt.
              lv_totsamt = lv_totsamt + ls_item-samt.
            ENDIF.

            ls_item-itmval = ls_item-txval + ls_item-iamt + ls_item-camt + ls_item-samt.

            CONDENSE: ls_item-no,
                      ls_item-prdnm,
                      ls_item-prddesc,
                      ls_item-hsncd,
                      ls_item-qty,
                      ls_item-unit,
                      ls_item-unitprice,
                      ls_item-itmval,
                      ls_item-sval,
                      ls_item-txval,
                      ls_item-crt,
                      ls_item-srt,
                      ls_item-irt,
                      ls_item-iamt,
                      ls_item-camt,
                      ls_item-samt.
            IF ls_item-irt IS INITIAL.
              ls_item-irt = '0'.
            ENDIF.
            IF ls_item-crt IS INITIAL.
              ls_item-crt = '0'.
            ENDIF.
            IF ls_item-srt IS INITIAL.
              ls_item-srt = '0'.
            ENDIF.
            IF ls_item-iamt IS INITIAL.
              ls_item-iamt = '0'.
            ENDIF.
            IF ls_item-camt IS INITIAL.
              ls_item-camt = '0'.
            ENDIF.
            IF ls_item-samt IS INITIAL.
              ls_item-samt = '0'.
            ENDIF.
            IF ls_item-othchrg IS INITIAL.
              ls_item-othchrg = '0'.
            ENDIF.
            APPEND ls_item TO lt_item.
            CLEAR : ls_item.
          ENDLOOP.

          ls_irn-itemlist = lt_item[].

          ls_irn-tottxval = lv_tottxval.
          ls_irn-totiamt = lv_totiamt.
          ls_irn-totcamt = lv_totcamt.
          ls_irn-totsamt = lv_totsamt.
          ls_irn-totinvval = ls_irn-tottxval + ls_irn-totiamt + ls_irn-totcamt + ls_irn-totsamt.
          CONDENSE : ls_irn-totinvval.
          lv_totinval = ls_irn-totinvval.
          IF ls_irn-catg IS INITIAL.
            IF lv_totinval GT lv_budget.
              IF ls_irn-ntr = 'INTER'.
                ls_irn-catg = 'B2CL'.
              ELSE.
                ls_irn-catg = 'B2CS'.
              ENDIF.
            ELSE.
              ls_irn-catg = 'B2CS'.
            ENDIF.
          ENDIF.
          CONDENSE : ls_irn-forcur,ls_irn-ntr.

          IF ls_irn-forcur IS INITIAL.
            ls_irn-forcur = 'null'.
          ENDIF.
          IF ls_irn-invforcur IS INITIAL.
            ls_irn-invforcur = '0'.
          ENDIF.
          IF ls_irn-totothchrg IS INITIAL.
            ls_irn-totothchrg = '0'.
          ENDIF.
          IF ls_irn-totiamt IS INITIAL.
            ls_irn-totiamt = '0'.
          ENDIF.
          IF ls_irn-totcamt IS INITIAL.
            ls_irn-totcamt = '0'.
          ENDIF.
          IF ls_irn-totsamt IS INITIAL.
            ls_irn-totsamt = '0'.
          ENDIF.
          ls_irn-gen9 = 'STO Tax Invoice Data'.   "ad by akshay_D-117834
          IF wa_sth-hd-bukrs = '1000' AND wa_sth-hd-zzdispatch_from IS NOT INITIAL AND wa_sth-hd-zzship_to IS NOT INITIAL ."SNEHA-121879
            ls_irn-trntyp = 'CMB'.
            DATA(lv_ship) =  wa_sth-hd-zzship_to.
            DATA(lv_disp) = wa_sth-hd-zzdispatch_from.
            SHIFT lv_ship LEFT DELETING LEADING '0'.
            SHIFT lv_disp LEFT DELETING LEADING '0'.
            IF strlen( lv_ship ) EQ 4.
              READ TABLE it_shipaddr INTO DATA(wa_shipaddr) WITH KEY ship_to = lv_ship.
            ELSE.
              READ TABLE it_shipaddr INTO wa_shipaddr WITH KEY ship_to = wa_sth-hd-zzship_to.
            ENDIF.
            CONCATENATE wa_shipaddr-adrc_name1 ',' wa_shipaddr-str_suppl1 wa_shipaddr-str_suppl2 wa_shipaddr-str_suppl3 INTO ls_irn-gen26.
            IF strlen( lv_disp ) EQ 4.
              READ TABLE it_disaddr INTO DATA(wa_disaddr) WITH KEY disp_from = lv_disp.
            ELSE.
              READ TABLE it_disaddr INTO wa_disaddr WITH KEY disp_from = wa_sth-hd-zzdispatch_from.
            ENDIF.
            CONCATENATE wa_disaddr-adrc_name1 ',' wa_disaddr-str_suppl1 wa_disaddr-str_suppl2 wa_disaddr-str_suppl3 INTO ls_irn-gen27.
*            SELECT SINGLE name1,ort01, pstlz, regio, stcd3
*              FROM lfa1
*              WHERE lifnr = @wa_sth-hd-zzdispatch_from
*              INTO @DATA(ls_dispatch).
*            IF sy-subrc EQ 0.
            ls_irn-dgstin = wa_disaddr-stcd3.
            ls_irn-dtrdnm = wa_disaddr-name1.
            ls_irn-dloc = wa_disaddr-ort01.
            ls_irn-dstcd = wa_disaddr-regio.
            ls_irn-dpin = wa_disaddr-pstlz.
            CONCATENATE wa_disaddr-name1 ', ' wa_disaddr-ort01 INTO ls_irn-dbnm.
*            ENDIF.
*            SELECT SINGLE name1,ort01, pstlz, regio, stcd3
*              FROM lfa1
*              WHERE lifnr = @wa_sth-hd-zzship_to
*              INTO @DATA(ls_ship).
*            IF sy-subrc EQ 0.
            ls_irn-togstin = wa_shipaddr-stcd3.
            ls_irn-toloc = wa_shipaddr-ort01.
            ls_irn-totrd_nm = wa_shipaddr-name1.
            ls_irn-topin = wa_shipaddr-pstlz.
            ls_irn-tostcd = wa_shipaddr-regio.
            ls_irn-tolglnm = wa_shipaddr-name1.
            CONCATENATE wa_shipaddr-name1 ', ' wa_shipaddr-ort01 INTO ls_irn-tobnm.
*            ENDIF.
          ENDIF.
          IF ls_irn-dgstin IS INITIAL.
            ls_irn-dgstin = 'null'.
          ENDIF.
          IF ls_irn-dtrdnm IS INITIAL.
            ls_irn-dtrdnm = 'null'.
          ENDIF.
          IF ls_irn-dloc IS INITIAL.
            ls_irn-dloc = 'null'.
          ENDIF.
          IF ls_irn-dstcd IS INITIAL.
            ls_irn-dstcd = 'null'.
          ENDIF.
          IF ls_irn-dpin IS INITIAL.
            ls_irn-dpin = 'null'.
          ENDIF.
          IF ls_irn-togstin IS INITIAL.
            ls_irn-togstin = 'null'.
          ENDIF.
          IF ls_irn-totrd_nm IS INITIAL.
            ls_irn-totrd_nm = 'null'.
          ENDIF.
          IF ls_irn-toloc IS INITIAL.
            ls_irn-toloc = 'null'.
          ENDIF.
          IF ls_irn-tostcd IS INITIAL.
            ls_irn-tostcd = 'null'.
          ENDIF.
          IF ls_irn-topin IS INITIAL.
            ls_irn-topin = 'null'.
          ENDIF.
          CONDENSE: ls_irn-doctype, ls_irn-catg, ls_irn-trntyp, ls_irn-no, ls_irn-rchrg, ls_irn-sgstin, ls_irn-strdnm,
                    ls_irn-sloc, ls_irn-sstcd, ls_irn-spin, ls_irn-bgstin, ls_irn-btrdnm, ls_irn-bloc,
                    ls_irn-bstcd, ls_irn-bpin, ls_irn-togstin, ls_irn-totrd_nm,ls_irn-toloc,
                    ls_irn-tostcd, ls_irn-topin, ls_irn-taxsch, ls_irn-totinvval, ls_irn-tottxval,
                    ls_irn-totcamt, ls_irn-totsamt, ls_irn-totiamt,ls_irn-gen9,ls_irn-gen26,ls_irn-gen27,ls_irn-tobnm,ls_irn-dbnm.
          APPEND ls_irn TO lt_irn.

          ls_einv_master-bukrs = ls_dtchk-bukrs.
          ls_einv_master-werks = wa_sth-hd-owerks.
          ls_einv_master-region = wa_sth-hd-region.
          ls_einv_master-invoice_no = wa_sth-hd-rcpt_no.
          ls_einv_master-user_gstin = ls_irn-sgstin.
          ls_einv_master-zmodule = 'FI'.
          ls_einv_master-sap_doc = ls_dtchk-belnr.
          ls_einv_master-creation_date = ls_dtchk-bldat.
          ls_einv_master-gjahr = ls_dtchk-gjahr.
          CONDENSE: ls_einv_master-bukrs, ls_einv_master-werks, ls_einv_master-region,
                    ls_einv_master-invoice_no, ls_einv_master-zmodule, ls_einv_master-sap_doc.
          APPEND ls_einv_master TO lt_einv_master.
          CLEAR : ls_einv_master.
          CLEAR : lv_count,ls_irn,lv_totinval, wa_shipaddr,wa_disaddr."ls_ship,ls_dispatch.
          REFRESH : lt_item,ls_irn-itemlist.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_RCM_TAX
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_rcm_tax .

  SELECT *
    FROM zfi_rcm_tax_inv
    INTO TABLE @DATA(it_rci)
    WHERE bukrs = '1000'
    AND   zfi_tax_inv IN @s_ti
    AND   werks IN @s_werks AND zfi_tax_inv IN @r_ti.
  IF sy-subrc = 0.
    IF it_rci[] IS NOT INITIAL.
      SELECT bukrs,belnr,gjahr,budat,bldat,usnam
        FROM bkpf INTO TABLE @DATA(lt_dtchk)
        FOR ALL ENTRIES IN @it_rci
        WHERE bukrs = @it_rci-bukrs AND belnr = @it_rci-belnr AND bldat IN @s_budat AND stblg = ' '.
      IF lt_dtchk[] IS NOT INITIAL.
        SELECT bukrs,
               belnr,
               gjahr,
               lifnr,
               kunnr,
               bupla,
               werks,
               koart
          FROM bseg
          INTO TABLE @DATA(it_bg)
          FOR ALL ENTRIES IN @lt_dtchk
          WHERE bukrs = @lt_dtchk-bukrs
          AND   belnr = @lt_dtchk-belnr
          AND   gjahr = @lt_dtchk-gjahr
          AND ( koart = 'D'
          OR    koart = 'K' ).
      ENDIF.

      SELECT belnr,
             bukrs,
             gjahr,
             hkont
        FROM bseg
        INTO TABLE @DATA(it_hk)
        FOR ALL ENTRIES IN @it_rci
        WHERE bukrs = @it_rci-bukrs
        AND   belnr = @it_rci-belnr
        AND   gjahr = @it_rci-gjahr
        AND   gvtyp = 'X'.

      SELECT a~lifnr,
             a~name1,
             a~regio,
             a~pstlz,
             a~stcd3,
             a~land1,
             a~ven_class,  "b~ven_class "$LTIM S/4 HANA Code Remediation : Viji : 08.12.2022
             c~bezei,
             p~street,
             p~str_suppl1,
             p~str_suppl2
        FROM lfa1 AS a
*        INNER JOIN j_1imovend AS b ON a~lifnr EQ b~lifnr  "$LTIM
        INNER JOIN t005u AS c ON a~regio EQ c~bland AND c~spras EQ 'E' AND c~land1 = a~land1"'IN'
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO TABLE @DATA(it_lfa1)
        FOR ALL ENTRIES IN @it_rci
        WHERE a~lifnr = @it_rci-lifnr.
    ENDIF.

    DATA(it_rch) = it_rci[].
    SORT it_rch BY belnr gjahr.
    DELETE ADJACENT DUPLICATES FROM it_rch COMPARING belnr gjahr.

    IF it_rch[] IS NOT INITIAL.
      SELECT werks,land1 FROM t001w INTO
        TABLE @DATA(lt_bdplant) FOR ALL ENTRIES IN @it_rch
        WHERE werks = @it_rch-werks AND land1 = 'BD'.

      SELECT a~werks,
             a~name1,
             a~regio,
             a~pstlz,
             a~stras,
             a~land1,
             b~gstin,
             c~bezei,
             p~street,
             p~str_suppl1,
             p~str_suppl2
        FROM t001w AS a
        INNER JOIN j_1bbranch AS b ON a~j_1bbranch = b~branch AND b~bukrs = '1000'
        INNER JOIN t005u AS c ON a~regio = c~bland AND c~spras = 'E' AND c~land1 = a~land1"'IN'
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO TABLE @DATA(it_rcwk)
        FOR ALL ENTRIES IN @it_rch
        WHERE a~werks = @it_rch-werks.
    ENDIF.

    LOOP AT it_rch INTO DATA(wa_rch).
      READ TABLE lt_dtchk INTO DATA(ls_dtchk) WITH KEY bukrs = wa_rch-bukrs belnr = wa_rch-belnr.
      IF sy-subrc = 0.
        CLEAR : show.
        IF ls_dtchk-usnam = sy-uname.
          show = 'X'.
        ELSE.
          READ TABLE lt_auth WITH KEY werks = wa_rch-werks psno = sy-uname TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            show = 'X'.
          ENDIF.
        ENDIF.
        IF show = 'X'.
          READ TABLE it_bg INTO DATA(wa_bg) WITH KEY bukrs = ls_dtchk-bukrs belnr = ls_dtchk-belnr gjahr = ls_dtchk-gjahr.
          READ TABLE it_lfa1 INTO DATA(wa_lfa1) WITH KEY lifnr = wa_bg-lifnr.

          ls_irn-doctype = 'RI'.
          ls_irn-trntyp = 'Regular'.
          ls_irn-rchrg = 'N'.
          ls_irn-taxsch = 'GST'.

          IF wa_rch-zigst EQ '0.00' OR wa_rch-zigst IS INITIAL.
            IF wa_rch-zcgst IS NOT INITIAL.
              CLEAR: flg_igst.
              ls_irn-ntr = 'INTRA'.
            ELSE.
              flg_igst = 'X'.
              ls_irn-ntr = 'INTER'.
            ENDIF.
          ELSE.
            flg_igst = 'X'.
            ls_irn-ntr = 'INTER'.
          ENDIF.

          ls_irn-no = wa_rch-zfi_tax_inv.

          CLEAR : lv_budat,lv_cpudt,lv_m1,lv_m2,date_end.
          SELECT budat
           cpudt UP TO 1 ROWS
           FROM bkpf
           INTO ( lv_budat,lv_cpudt )
           WHERE belnr = ls_dtchk-belnr
           AND bukrs EQ ls_dtchk-bukrs
           AND gjahr EQ ls_dtchk-gjahr ORDER BY budat.
          ENDSELECT.

          IF sy-subrc EQ 0.
            lv_m1 = lv_budat+4(2).
            lv_m2 = lv_cpudt+4(2).

            IF lv_m1 EQ lv_m2.
              date_end = lv_cpudt.
            ELSE.

              CALL FUNCTION 'HR_JP_MONTH_BEGIN_END_DATE'
                EXPORTING
                  iv_date           = lv_budat
                IMPORTING
                  ev_month_end_date = date_end.       " end date.
            ENDIF.
          ENDIF.
          CONCATENATE date_end+6(2) date_end+4(2) date_end+0(4) INTO ls_irn-dt SEPARATED BY '-'.

          READ TABLE it_rcwk INTO DATA(wa_rcwk) WITH KEY werks = wa_rch-werks.
          IF sy-subrc = 0.
            ls_irn-strdnm = wa_rcwk-name1.
            ls_irn-sgstin = wa_rcwk-gstin.
            ls_irn-sloc   = wa_rcwk-bezei.
            ls_irn-sstcd  = wa_rcwk-regio.
            ls_irn-spin   = wa_rcwk-pstlz.
            CONCATENATE wa_rcwk-street wa_rcwk-str_suppl1 wa_rcwk-str_suppl2 INTO ls_irn-sbnm SEPARATED BY space.
            ls_irn-cntcd  = wa_rcwk-land1.

            READ TABLE lt_bdplant WITH KEY werks = wa_rch-werks TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              ls_irn-sgstin = '24AAACL0140P8ZI'.
              ls_irn-sloc   = 'Gujarat'.
              ls_irn-sstcd  = '24'.
              ls_irn-spin   = '390019'.
              wa_rcwk-regio = '24'.
            ENDIF.

            IF sy-sysid = 'SED' OR sy-sysid = 'SEQ'.
              SELECT gstin UP TO 1 ROWS
                FROM zeinv_gstin
                INTO ls_irn-sgstin
                WHERE zregio = wa_rcwk-regio.
              ENDSELECT.
            ENDIF.

            ls_irn-usergstin = ls_irn-sgstin.
          ENDIF.

          ls_irn-bgstin  = wa_lfa1-stcd3.
          ls_irn-btrdnm  = wa_lfa1-name1.
          ls_irn-bloc    = wa_lfa1-bezei.
          ls_irn-bstcd   = wa_lfa1-regio.
          ls_irn-pos     = wa_lfa1-regio.
          ls_irn-bpin    = wa_lfa1-pstlz.
          CONCATENATE wa_lfa1-street wa_lfa1-str_suppl1 wa_lfa1-str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
          IF ls_irn-bgstin IS INITIAL.
            ls_irn-bgstin = 'URP'.
          ELSE.
            ls_irn-catg = 'B2B'.
          ENDIF.

          IF wa_rch-zfi_tax_inv CP 'LTP*TE*'.
            ls_irn-bstcd  = '96'.
            ls_irn-pos    = '96'.
            ls_irn-bpin   = '999999'.
            ls_irn-bgstin = 'URP'.
            IF wa_rch-zigst IS INITIAL AND wa_rch-zcgst IS INITIAL AND wa_rch-zsgst IS INITIAL.
              ls_irn-catg = 'EXWOP'.
            ELSE.
              ls_irn-catg = 'EXWP'.
            ENDIF.
          ENDIF.

          IF wa_rch-zpos IS NOT INITIAL .                  "ad by akshay_D-118984
            ls_irn-pos    = wa_rch-zpos .
          ENDIF.

          IF ls_irn-dgstin IS INITIAL.
            ls_irn-dgstin = 'null'.
          ENDIF.
          IF ls_irn-dtrdnm IS INITIAL.
            ls_irn-dtrdnm = 'null'.
          ENDIF.
          IF ls_irn-dloc IS INITIAL.
            ls_irn-dloc = 'null'.
          ENDIF.
          IF ls_irn-dstcd IS INITIAL.
            ls_irn-dstcd = 'null'.
          ENDIF.
          IF ls_irn-dpin IS INITIAL.
            ls_irn-dpin = 'null'.
          ENDIF.
          IF ls_irn-togstin IS INITIAL.
            ls_irn-togstin = 'null'.
          ENDIF.
          IF ls_irn-totrd_nm IS INITIAL.
            ls_irn-totrd_nm = 'null'.
          ENDIF.
          IF ls_irn-toloc IS INITIAL.
            ls_irn-toloc = 'null'.
          ENDIF.
          IF ls_irn-tostcd IS INITIAL.
            ls_irn-tostcd = 'null'.
          ENDIF.
          IF ls_irn-topin IS INITIAL.
            ls_irn-topin = 'null'.
          ENDIF.

          CLEAR: lv_tottxval, lv_totiamt, lv_totcamt, lv_totsamt, lv_tottcsv.
          LOOP AT it_rci INTO DATA(wa_rci) WHERE belnr = wa_rch-belnr.

            ls_item-no = wa_rci-zfi_tax_inv.

            READ TABLE it_hk INTO DATA(wa_hk) WITH KEY belnr = wa_rch-belnr.
            IF wa_rci-item_desc IS NOT INITIAL.
              ls_item-prdnm = wa_rci-item_desc.
              ls_item-prddesc = wa_rci-item_desc.
            ELSE.
*              IF wa_rci-zhsn_code IS NOT INITIAL.
*                SELECT text1
*                  UP TO 1 ROWS
*                  FROM t604n
*                  INTO ls_item-prdnm
*                  WHERE spras = 'E'
*                  AND   land1 = 'IN'
*                  AND   steuc = wa_rci-zhsn_code
*                  ORDER BY PRIMARY KEY.
*                ENDSELECT.
*                ls_item-prddesc = ls_item-prdnm.
*              ENDIF.
*              IF ls_item-prdnm IS INITIAL.
*                ls_item-prdnm = wa_hk-hkont.
*                ls_item-prddesc = wa_hk-hkont.
*              ENDIF.
            ENDIF.

            REPLACE ALL OCCURRENCES OF ',' IN ls_item-prdnm WITH space.

            ls_item-hsncd = wa_rci-zhsn_code.

            ls_item-num = wa_rci-buzei.
            ls_item-qty = wa_rci-menge.

            SELECT einvuom UP TO 1 ROWS
              FROM zeinv_uom
              INTO ls_item-unit WHERE sapuom = wa_rci-meins.
            ENDSELECT.

            ls_item-unitprice = wa_rci-rate.
            ls_item-sval = ls_item-qty * ls_item-unitprice.
            ls_item-txval = ls_item-sval.
            ls_item-othchrg = wa_rci-tcsval.
            lv_tottxval = lv_tottxval + ls_item-txval.
            lv_tottcsv = lv_tottcsv + wa_rci-tcsval.

            IF flg_igst = 'X'.
              ls_item-irt = wa_rci-zigst.
              CONDENSE: ls_item-irt.
              ls_item-iamt = wa_rci-zigst_val.
              lv_totiamt = lv_totiamt + ls_item-iamt.
            ELSE.
              ls_item-crt = wa_rci-zcgst.
              ls_item-srt = wa_rci-zsgst.
              CONDENSE: ls_item-crt, ls_item-srt.
              ls_item-camt = wa_rci-zcgst_val.
              ls_item-samt = wa_rci-zsgst_val.
              lv_totcamt = lv_totcamt + ls_item-camt.
              lv_totsamt = lv_totsamt + ls_item-samt.
            ENDIF.

            ls_item-itmval = ls_item-txval + ls_item-iamt + ls_item-camt + ls_item-samt + ls_item-othchrg.

            CONDENSE: ls_item-no,
                      ls_item-prdnm,
                      ls_item-prddesc,
                      ls_item-hsncd,
                      ls_item-qty,
                      ls_item-unit,
                      ls_item-unitprice,
                      ls_item-itmval,
                      ls_item-sval,
                      ls_item-txval,
                      ls_item-crt,
                      ls_item-srt,
                      ls_item-irt,
                      ls_item-iamt,
                      ls_item-camt,
                      ls_item-samt,
                      ls_item-othchrg.
            IF ls_item-irt IS INITIAL.
              ls_item-irt = '0'.
            ENDIF.
            IF ls_item-crt IS INITIAL.
              ls_item-crt = '0'.
            ENDIF.
            IF ls_item-srt IS INITIAL.
              ls_item-srt = '0'.
            ENDIF.
            IF ls_item-iamt IS INITIAL.
              ls_item-iamt = '0'.
            ENDIF.
            IF ls_item-camt IS INITIAL.
              ls_item-camt = '0'.
            ENDIF.
            IF ls_item-samt IS INITIAL.
              ls_item-samt = '0'.
            ENDIF.
            IF ls_item-othchrg IS INITIAL.
              ls_item-othchrg = '0'.
            ENDIF.
            APPEND ls_item TO lt_item.
            CLEAR : ls_item.
          ENDLOOP.

          ls_irn-itemlist = lt_item[].

          ls_irn-tottxval = lv_tottxval.
          ls_irn-totiamt = lv_totiamt.
          ls_irn-totcamt = lv_totcamt.
          ls_irn-totsamt = lv_totsamt.
          ls_irn-totinvval = ls_irn-tottxval + ls_irn-totiamt + ls_irn-totcamt + ls_irn-totsamt + lv_tottcsv.
          CONDENSE : ls_irn-totinvval.
          lv_totinval = ls_irn-totinvval.
          IF ls_irn-catg IS INITIAL.
            IF lv_totinval GT lv_budget.
              IF ls_irn-ntr = 'INTER'.
                ls_irn-catg = 'B2CL'.
              ELSE.
                ls_irn-catg = 'B2CS'.
              ENDIF.
            ELSE.
              ls_irn-catg = 'B2CS'.
            ENDIF.
          ENDIF.
          CONDENSE : ls_irn-forcur,ls_irn-ntr.

          IF ls_irn-forcur IS INITIAL.
            ls_irn-forcur = 'null'.
          ENDIF.
          IF ls_irn-invforcur IS INITIAL.
            ls_irn-invforcur = '0'.
          ENDIF.
          IF ls_irn-totothchrg IS INITIAL.
            ls_irn-totothchrg = '0'.
          ENDIF.
          IF ls_irn-totiamt IS INITIAL.
            ls_irn-totiamt = '0'.
          ENDIF.
          IF ls_irn-totcamt IS INITIAL.
            ls_irn-totcamt = '0'.
          ENDIF.
          IF ls_irn-totsamt IS INITIAL.
            ls_irn-totsamt = '0'.
          ENDIF.
          ls_irn-gen9 = wa_rch-ztype.                                       "ad by akshay_D-117834
          CONDENSE: ls_irn-doctype, ls_irn-catg, ls_irn-trntyp, ls_irn-no, ls_irn-rchrg, ls_irn-sgstin, ls_irn-strdnm,
                    ls_irn-sloc, ls_irn-sstcd, ls_irn-spin, ls_irn-bgstin, ls_irn-btrdnm, ls_irn-bloc,
                    ls_irn-bstcd, ls_irn-bpin, ls_irn-togstin, ls_irn-totrd_nm,ls_irn-toloc,
                    ls_irn-tostcd, ls_irn-topin, ls_irn-taxsch, ls_irn-totinvval, ls_irn-tottxval,
                    ls_irn-totcamt, ls_irn-totsamt, ls_irn-totiamt,ls_irn-gen9.
          APPEND ls_irn TO lt_irn.

          ls_einv_master-bukrs = ls_dtchk-bukrs.
          ls_einv_master-werks = wa_rch-werks.
          ls_einv_master-region = wa_rcwk-regio.
          ls_einv_master-invoice_no = wa_rch-zfi_tax_inv.
          ls_einv_master-user_gstin = ls_irn-sgstin.
          ls_einv_master-zmodule = 'FI'.
          ls_einv_master-sap_doc = ls_dtchk-belnr.
          ls_einv_master-creation_date = ls_dtchk-bldat.
          ls_einv_master-gjahr = ls_dtchk-gjahr.
          CONDENSE: ls_einv_master-bukrs, ls_einv_master-werks, ls_einv_master-region,
                    ls_einv_master-invoice_no, ls_einv_master-zmodule, ls_einv_master-sap_doc.
          APPEND ls_einv_master TO lt_einv_master.
          CLEAR : ls_einv_master.
          CLEAR : lv_count,ls_irn,lv_totinval.
          REFRESH : lt_item,ls_irn-itemlist.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_WO_SO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_wo_so .

  SELECT *
    FROM zfi_ti_woso_man AS hd
    INNER JOIN zfi_ti_woso_mani AS it
    ON  hd~belnr = it~belnr
    AND hd~gjahr = it~gjahr
    INTO TABLE @DATA(it_wsi)
    WHERE hd~bukrs = '1000'
    AND   hd~ti_no IN @s_ti
    AND   hd~werks IN @s_werks.
  IF sy-subrc = 0.
    IF it_wsi[] IS NOT INITIAL.
      SELECT bukrs,belnr,gjahr,budat,bldat,usnam
        FROM bkpf INTO TABLE @DATA(lt_dtchk)
        FOR ALL ENTRIES IN @it_wsi
        WHERE bukrs = @it_wsi-hd-bukrs AND belnr = @it_wsi-hd-belnr AND bldat IN @s_budat AND stblg = ' '.
      IF lt_dtchk[] IS NOT INITIAL.
        SELECT bukrs,
               belnr,
               gjahr,
               lifnr,
               kunnr,
               bupla,
               werks,
               koart
          FROM bseg
          INTO TABLE @DATA(it_bg)
          FOR ALL ENTRIES IN @lt_dtchk
          WHERE bukrs = @lt_dtchk-bukrs
          AND   belnr = @lt_dtchk-belnr
          AND   gjahr = @lt_dtchk-gjahr
          AND ( koart = 'D'
          OR    koart = 'K' ).
      ENDIF.

      SELECT a~kunnr,
             a~name1,
             a~stcd3,
             a~regio,
             a~pstlz,
             a~gform,
             b~bezei,
             p~street,
             p~str_suppl1,
             p~str_suppl2
        FROM kna1 AS a
        INNER JOIN t005u AS b ON a~regio = b~bland AND b~land1 = 'IN' AND b~spras = 'E'
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO TABLE @DATA(it_kna1)
        FOR ALL ENTRIES IN @it_wsi
        WHERE kunnr = @it_wsi-hd-kunnr.

      SELECT *
        FROM zgst_hsn_rate
        INTO TABLE it_hsn
        FOR ALL ENTRIES IN it_wsi
        WHERE steuc = it_wsi-it-steuc.
    ENDIF.

    DATA(it_wsh) = it_wsi[].
    SORT it_wsh BY hd-belnr hd-gjahr.
    DELETE ADJACENT DUPLICATES FROM it_wsh COMPARING hd-belnr hd-gjahr.

    IF it_wsh[] IS NOT INITIAL.
      SELECT a~werks,
             a~name1,
             a~regio,
             a~pstlz,
             a~land1,
             a~stras,
             b~gstin,
             c~bezei,
             p~street,
             p~str_suppl1,
             p~str_suppl2
        FROM t001w AS a
        INNER JOIN j_1bbranch AS b ON a~j_1bbranch = b~branch AND b~bukrs = '1000'
        INNER JOIN t005u AS c ON a~regio = c~bland AND c~land1 = 'IN' AND c~spras = 'E'
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO TABLE @DATA(it_wk)
        FOR ALL ENTRIES IN @it_wsh
        WHERE a~werks = @it_wsh-hd-werks.
    ENDIF.

    LOOP AT it_wsh INTO DATA(wa_wsh).
      READ TABLE lt_dtchk INTO DATA(ls_dtchk) WITH KEY bukrs = wa_wsh-hd-bukrs belnr = wa_wsh-hd-belnr.
      IF sy-subrc = 0.
        CLEAR : show.
        IF ls_dtchk-usnam = sy-uname.
          show = 'X'.
        ELSE.
          READ TABLE lt_auth WITH KEY werks = wa_wsh-hd-werks psno = sy-uname TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            show = 'X'.
          ENDIF.
        ENDIF.
        IF show = 'X'.
          READ TABLE it_bg INTO DATA(wa_bg) WITH KEY bukrs = ls_dtchk-bukrs belnr = ls_dtchk-belnr gjahr = ls_dtchk-gjahr.
          READ TABLE it_kna1 INTO DATA(wa_kna1) WITH KEY kunnr = wa_bg-kunnr.

          ls_irn-doctype = 'RI'.
          ls_irn-trntyp = 'Regular'.
          ls_irn-rchrg = 'N'.
          ls_irn-taxsch = 'GST'.

          IF wa_wsh-hd-igstv EQ '0.00'.
            CLEAR: flg_igst.
            ls_irn-ntr = 'INTRA'.
          ELSE.
            flg_igst = 'X'.
            ls_irn-ntr = 'INTER'.
          ENDIF.

          SELECT vtext UP TO 1 ROWS FROM tvgft INTO ls_irn-catg
            WHERE gform = wa_kna1-gform AND spras = 'E'.
          ENDSELECT.
          ls_irn-no = wa_wsh-hd-ti_no.

          CLEAR : lv_budat,lv_cpudt,lv_m1,lv_m2,date_end.
          SELECT budat
           cpudt UP TO 1 ROWS
           FROM bkpf
           INTO ( lv_budat,lv_cpudt )
           WHERE belnr = ls_dtchk-belnr
           AND bukrs EQ ls_dtchk-bukrs
           AND gjahr EQ ls_dtchk-gjahr ORDER BY budat.
          ENDSELECT.

          IF sy-subrc EQ 0.
            lv_m1 = lv_budat+4(2).
            lv_m2 = lv_cpudt+4(2).

            IF lv_m1 EQ lv_m2.
              date_end = lv_cpudt.
            ELSE.

              CALL FUNCTION 'HR_JP_MONTH_BEGIN_END_DATE'
                EXPORTING
                  iv_date           = lv_budat
                IMPORTING
                  ev_month_end_date = date_end.       " end date.
            ENDIF.
          ENDIF.
          CONCATENATE date_end+6(2) date_end+4(2) date_end+0(4) INTO ls_irn-dt SEPARATED BY '-'.

          READ TABLE it_wk INTO DATA(wa_wk) WITH KEY werks = wa_wsh-hd-werks.
          IF sy-subrc = 0.
            ls_irn-strdnm = wa_wk-name1.
            ls_irn-sgstin = wa_wk-gstin.
            ls_irn-sloc   = wa_wk-bezei.
            ls_irn-sstcd  = wa_wk-regio.
            ls_irn-spin   = wa_wk-pstlz.
            CONCATENATE wa_wk-street wa_wk-str_suppl1 wa_wk-str_suppl2 INTO ls_irn-sbnm SEPARATED BY space.
            ls_irn-cntcd  = wa_wk-land1.
            IF sy-sysid = 'SED' OR sy-sysid = 'SEQ'.
              SELECT gstin UP TO 1 ROWS
                FROM zeinv_gstin
                INTO ls_irn-sgstin
                WHERE zregio = wa_wk-regio.
              ENDSELECT.
            ENDIF.
            ls_irn-usergstin = ls_irn-sgstin.
          ENDIF.

          ls_irn-bgstin  = wa_kna1-stcd3.
          ls_irn-btrdnm  = wa_kna1-name1.
          ls_irn-bloc    = wa_kna1-bezei.
          ls_irn-bstcd   = wa_kna1-regio.
          ls_irn-pos     = wa_kna1-regio.
          ls_irn-bpin    = wa_kna1-pstlz.
          CONCATENATE wa_kna1-street wa_kna1-str_suppl1 wa_kna1-str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
          IF ls_irn-bgstin IS INITIAL.
            ls_irn-bgstin = 'URP'.
          ENDIF.
*      ls_irn-togstin = wa_wk-gstin.

          IF ls_irn-dgstin IS INITIAL.
            ls_irn-dgstin = 'null'.
          ENDIF.
          IF ls_irn-dtrdnm IS INITIAL.
            ls_irn-dtrdnm = 'null'.
          ENDIF.
          IF ls_irn-dloc IS INITIAL.
            ls_irn-dloc = 'null'.
          ENDIF.
          IF ls_irn-dstcd IS INITIAL.
            ls_irn-dstcd = 'null'.
          ENDIF.
          IF ls_irn-dpin IS INITIAL.
            ls_irn-dpin = 'null'.
          ENDIF.
          IF ls_irn-togstin IS INITIAL.
            ls_irn-togstin = 'null'.
          ENDIF.
          IF ls_irn-totrd_nm IS INITIAL.
            ls_irn-totrd_nm = 'null'.
          ENDIF.
          IF ls_irn-toloc IS INITIAL.
            ls_irn-toloc = 'null'.
          ENDIF.
          IF ls_irn-tostcd IS INITIAL.
            ls_irn-tostcd = 'null'.
          ENDIF.
          IF ls_irn-topin IS INITIAL.
            ls_irn-topin = 'null'.
          ENDIF.

          CLEAR: lv_tottxval, lv_totiamt, lv_totcamt, lv_totsamt.
          LOOP AT it_wsi INTO DATA(wa_wsi) WHERE it-belnr = wa_wsh-hd-belnr.

            ls_item-no = wa_wsi-hd-ti_no.
*            SELECT text1
*              UP TO 1 ROWS
*              FROM t604n
*              INTO ls_item-prdnm
*              WHERE spras = 'E'
*              AND   land1 = 'IN'
*              AND   steuc = wa_wsi-it-steuc
*              ORDER BY PRIMARY KEY.
*            ENDSELECT.
*            IF ls_item-prdnm IS NOT INITIAL.
*              ls_item-prddesc = ls_item-prdnm.
*            ELSE.
*              ls_item-prdnm = wa_wsi-it-hkont.
*              ls_item-prddesc = wa_wsi-it-hkont.
*            ENDIF.
            ls_item-prdnm = wa_wsi-it-description.
            ls_item-prddesc = wa_wsi-it-description.
            IF ls_item-prdnm IS INITIAL.
              SELECT text1
                UP TO 1 ROWS
                FROM t604n
                INTO ls_item-prdnm
                WHERE spras = 'E'
                AND   land1 = 'IN'
                AND   steuc = wa_wsi-it-steuc
                ORDER BY PRIMARY KEY.
              ENDSELECT.
              ls_item-prddesc = ls_item-prdnm.
            ENDIF.

            REPLACE ALL OCCURRENCES OF ',' IN ls_item-prdnm WITH space.

            ls_item-hsncd = wa_wsi-it-steuc.

            ls_item-num = wa_wsi-it-zcount.
            ls_item-qty = wa_wsi-it-menge.

            SELECT einvuom UP TO 1 ROWS
              FROM zeinv_uom
              INTO ls_item-unit WHERE sapuom = wa_wsi-it-uom.
            ENDSELECT.

            ls_item-unitprice = wa_wsi-it-netpr.
            ls_item-sval = wa_wsi-it-totval.
            ls_item-txval = ls_item-sval.
            lv_tottxval = lv_tottxval + ls_item-txval.

            IF flg_igst = 'X'.
              IF line_exists( it_hsn[ steuc = wa_wsi-it-steuc ] ) .
                ls_item-irt = it_hsn[ steuc = wa_wsi-it-steuc ]-taxrate.
              ENDIF.
              ls_item-iamt = wa_wsi-it-igstv.
              lv_totiamt = lv_totiamt + ls_item-iamt.
            ELSE.
              IF line_exists( it_hsn[ steuc = wa_wsi-it-steuc ] ) .
                ls_item-crt = it_hsn[ steuc = wa_wsi-it-steuc ]-taxrate / 2.
                ls_item-srt = it_hsn[ steuc = wa_wsi-it-steuc ]-taxrate / 2.
              ENDIF.
              ls_item-camt = wa_wsi-it-cgstv.
              ls_item-samt = wa_wsi-it-sgstv.
              lv_totcamt = lv_totcamt + ls_item-camt.
              lv_totsamt = lv_totsamt + ls_item-samt.
            ENDIF.

            ls_item-itmval = ls_item-txval + ls_item-iamt + ls_item-camt + ls_item-samt.

            CONDENSE: ls_item-no,
                      ls_item-prdnm,
                      ls_item-prddesc,
                      ls_item-hsncd,
                      ls_item-qty,
                      ls_item-unit,
                      ls_item-unitprice,
                      ls_item-itmval,
                      ls_item-sval,
                      ls_item-txval,
                      ls_item-crt,
                      ls_item-srt,
                      ls_item-irt,
                      ls_item-iamt,
                      ls_item-camt,
                      ls_item-samt.
            "soc by Ganesh-123197
            IF ls_item-hsncd = '997313'.
              ls_item-irt = ls_item-iamt.
            ENDIF.
            "Eoc
            IF ls_item-irt IS INITIAL.
              ls_item-irt = '0'.
            ENDIF.
            IF ls_item-crt IS INITIAL.
              ls_item-crt = '0'.
            ENDIF.
            IF ls_item-srt IS INITIAL.
              ls_item-srt = '0'.
            ENDIF.
            IF ls_item-iamt IS INITIAL.
              ls_item-iamt = '0'.
            ENDIF.
            IF ls_item-camt IS INITIAL.
              ls_item-camt = '0'.
            ENDIF.
            IF ls_item-samt IS INITIAL.
              ls_item-samt = '0'.
            ENDIF.
            IF ls_item-othchrg IS INITIAL.
              ls_item-othchrg = '0'.
            ENDIF.
            APPEND ls_item TO lt_item.
            CLEAR : ls_item.
          ENDLOOP.

          ls_irn-itemlist = lt_item[].

          ls_irn-tottxval = lv_tottxval.
          ls_irn-totiamt = lv_totiamt.
          ls_irn-totcamt = lv_totcamt.
          ls_irn-totsamt = lv_totsamt.
          ls_irn-totinvval = ls_irn-tottxval + ls_irn-totiamt + ls_irn-totcamt + ls_irn-totsamt.

          CONDENSE : ls_irn-forcur,ls_irn-ntr.

          IF ls_irn-forcur IS INITIAL.
            ls_irn-forcur = 'null'.
          ENDIF.
          IF ls_irn-invforcur IS INITIAL.
            ls_irn-invforcur = '0'.
          ENDIF.
          IF ls_irn-totothchrg IS INITIAL.
            ls_irn-totothchrg = '0'.
          ENDIF.
          IF ls_irn-totiamt IS INITIAL.
            ls_irn-totiamt = '0'.
          ENDIF.
          IF ls_irn-totcamt IS INITIAL.
            ls_irn-totcamt = '0'.
          ENDIF.
          IF ls_irn-totsamt IS INITIAL.
            ls_irn-totsamt = '0'.
          ENDIF.
          ls_irn-gen9 = 'Tax Invoice Without SO Manual'.                                       "ad by akshay_D-117834
          CONDENSE: ls_irn-doctype, ls_irn-catg, ls_irn-trntyp, ls_irn-no, ls_irn-rchrg, ls_irn-sgstin, ls_irn-strdnm,
                    ls_irn-sloc, ls_irn-sstcd, ls_irn-spin, ls_irn-bgstin, ls_irn-btrdnm, ls_irn-bloc,
                    ls_irn-bstcd, ls_irn-bpin, ls_irn-togstin, ls_irn-totrd_nm,ls_irn-toloc,
                    ls_irn-tostcd, ls_irn-topin, ls_irn-taxsch, ls_irn-totinvval, ls_irn-tottxval,
                    ls_irn-totcamt, ls_irn-totsamt, ls_irn-totiamt,ls_irn-gen9.
          APPEND ls_irn TO lt_irn.

          ls_einv_master-bukrs = ls_dtchk-bukrs.
          ls_einv_master-werks = wa_wsh-hd-werks.
          ls_einv_master-region = wa_wk-regio.
          ls_einv_master-invoice_no = wa_wsh-hd-ti_no.
          ls_einv_master-user_gstin = ls_irn-sgstin.
          ls_einv_master-zmodule = 'FI'.
          ls_einv_master-sap_doc = ls_dtchk-belnr.
          ls_einv_master-creation_date = ls_dtchk-bldat.
          ls_einv_master-gjahr = ls_dtchk-gjahr.
          CONDENSE: ls_einv_master-bukrs, ls_einv_master-werks, ls_einv_master-region,
                    ls_einv_master-invoice_no, ls_einv_master-zmodule, ls_einv_master-sap_doc.
          APPEND ls_einv_master TO lt_einv_master.
          CLEAR : ls_einv_master.
          CLEAR : lv_count,ls_irn.
          REFRESH : lt_item,ls_irn-itemlist.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_PAYM_VOUC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_paym_vouc .

  SELECT *
    FROM zfi_paym_vouc_nm AS pmv
    INNER JOIN zfi_rcm_tax_inv AS rcm
    ON  pmv~belnr = rcm~belnr
    AND pmv~bukrs = rcm~bukrs
    AND pmv~gjahr = rcm~gjahr
    INTO TABLE @DATA(it_pvi)
    WHERE pmv~bukrs = '1000'
    AND   pmv~rcpt_no IN @s_ti
    AND   pmv~werks IN @s_werks.
  IF sy-subrc = 0.
    IF it_pvi[] IS NOT INITIAL.
      SELECT bukrs,belnr,gjahr,budat,bldat,usnam
        FROM bkpf INTO TABLE @DATA(lt_dtchk)
        FOR ALL ENTRIES IN @it_pvi
        WHERE bukrs = '1000' AND belnr = @it_pvi-pmv-belnr AND bldat IN @s_budat AND stblg = ' '.
      IF lt_dtchk[] IS NOT INITIAL.
        SELECT bukrs,
               belnr,
               gjahr,
               lifnr,
               kunnr,
               bupla,
               werks,
               koart
          FROM bseg
          INTO TABLE @DATA(it_bg)
          FOR ALL ENTRIES IN @lt_dtchk
          WHERE bukrs = @lt_dtchk-bukrs
          AND   belnr = @lt_dtchk-belnr
          AND   gjahr = @lt_dtchk-gjahr
          AND ( koart = 'D'
          OR    koart = 'K' ).
      ENDIF.

      SELECT belnr,
             bukrs,
             gjahr,
             hkont
        FROM bseg
        INTO TABLE @DATA(it_hk)
        FOR ALL ENTRIES IN @it_pvi
        WHERE bukrs = @it_pvi-rcm-bukrs
        AND   belnr = @it_pvi-rcm-belnr
        AND   gjahr = @it_pvi-rcm-gjahr
        AND   gvtyp = 'X'.

      SELECT a~lifnr,
             a~name1,
             a~regio,
             a~pstlz,
             a~stcd3,
             a~ven_class,  "b~ven_class, "$LTIM S/4 HANA Code Remediation : Viji : 08.12.2022
             c~bezei,
             p~street,
             p~str_suppl1,
             p~str_suppl2
        FROM lfa1 AS a
*        INNER JOIN j_1imovend AS b ON a~lifnr EQ b~lifnr
        INNER JOIN t005u AS c ON a~regio EQ c~bland AND c~spras EQ 'E' AND c~land1 = 'IN'
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO TABLE @DATA(it_lfa1)
        FOR ALL ENTRIES IN @it_pvi
        WHERE a~lifnr = @it_pvi-rcm-lifnr.
    ENDIF.

    DATA(it_pvh) = it_pvi[].
    SORT it_pvh BY pmv-belnr pmv-gjahr.
    DELETE ADJACENT DUPLICATES FROM it_pvh COMPARING pmv-belnr pmv-gjahr.

    IF it_pvh[] IS NOT INITIAL.
      SELECT a~werks,
             a~name1,
             a~regio,
             a~pstlz,
             a~stras,
             a~land1,
             b~gstin,
             c~bezei,
             p~street,
             p~str_suppl1,
             p~str_suppl2
        FROM t001w AS a
        INNER JOIN j_1bbranch AS b ON a~j_1bbranch = b~branch AND b~bukrs = '1000'
        INNER JOIN t005u AS c ON a~regio = c~bland AND c~land1 = 'IN' AND c~spras = 'E'
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO TABLE @DATA(it_wk)
        FOR ALL ENTRIES IN @it_pvh
        WHERE a~werks = @it_pvh-pmv-werks.
    ENDIF.

    LOOP AT it_pvh INTO DATA(wa_pvh).
      READ TABLE lt_dtchk INTO DATA(ls_dtchk) WITH KEY bukrs = wa_pvh-pmv-bukrs belnr = wa_pvh-pmv-belnr.
      IF sy-subrc = 0.
        CLEAR : show.
        IF ls_dtchk-usnam = sy-uname.
          show = 'X'.
        ELSE.
          READ TABLE lt_auth WITH KEY werks = wa_pvh-pmv-werks psno = sy-uname TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            show = 'X'.
          ENDIF.
        ENDIF.
        IF show = 'X'.
          READ TABLE it_bg INTO DATA(wa_bg) WITH KEY bukrs = ls_dtchk-bukrs belnr = ls_dtchk-belnr gjahr = ls_dtchk-gjahr.
          READ TABLE it_lfa1 INTO DATA(wa_lfa1) WITH KEY lifnr = wa_bg-lifnr.

          ls_irn-doctype = 'RI'.
          ls_irn-trntyp = 'Regular'.
          ls_irn-rchrg = 'N'.
          ls_irn-taxsch = 'GST'.

          IF wa_pvh-pmv-igst_p EQ '0.00'.
            CLEAR: flg_igst.
            ls_irn-ntr = 'INTRA'.
          ELSE.
            flg_igst = 'X'.
            ls_irn-ntr = 'INTER'.
          ENDIF.

          ls_irn-no = wa_pvh-rcm-zfi_tax_inv.
          CONCATENATE ls_dtchk-budat+6(2) ls_dtchk-budat+4(2) ls_dtchk-budat+0(4) INTO ls_irn-dt SEPARATED BY '-'.

          READ TABLE it_wk INTO DATA(wa_wk) WITH KEY werks = wa_pvh-pmv-werks.
          IF sy-subrc = 0.
            ls_irn-strdnm = wa_wk-name1.
            ls_irn-sgstin = wa_wk-gstin.
            ls_irn-sloc   = wa_wk-bezei.
            ls_irn-sstcd  = wa_wk-regio.
            ls_irn-spin   = wa_wk-pstlz.
            CONCATENATE wa_wk-street wa_wk-str_suppl1 wa_wk-str_suppl2 INTO ls_irn-sbnm SEPARATED BY space.
            ls_irn-cntcd  = wa_wk-land1.
            IF sy-sysid = 'SED' OR sy-sysid = 'SEQ'.
              SELECT gstin UP TO 1 ROWS
                FROM zeinv_gstin
                INTO ls_irn-sgstin
                WHERE zregio = wa_wk-regio.
              ENDSELECT.
            ENDIF.
            ls_irn-usergstin = ls_irn-sgstin.
          ENDIF.

          ls_irn-bgstin  = wa_lfa1-stcd3.
          ls_irn-btrdnm  = wa_lfa1-name1.
          ls_irn-bloc    = wa_lfa1-bezei.
          ls_irn-bstcd   = wa_lfa1-regio.
          ls_irn-pos    = wa_lfa1-regio.
          ls_irn-bpin    = wa_lfa1-pstlz.
          CONCATENATE wa_lfa1-street wa_lfa1-str_suppl1 wa_lfa1-str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
          IF ls_irn-bgstin IS INITIAL.
            ls_irn-bgstin = 'URP'.
          ELSE.
            ls_irn-catg = 'B2B'.
          ENDIF.
*      ls_irn-togstin = wa_lfa1-stcd3.

          IF ls_irn-dgstin IS INITIAL.
            ls_irn-dgstin = 'null'.
          ENDIF.
          IF ls_irn-dtrdnm IS INITIAL.
            ls_irn-dtrdnm = 'null'.
          ENDIF.
          IF ls_irn-dloc IS INITIAL.
            ls_irn-dloc = 'null'.
          ENDIF.
          IF ls_irn-dstcd IS INITIAL.
            ls_irn-dstcd = 'null'.
          ENDIF.
          IF ls_irn-dpin IS INITIAL.
            ls_irn-dpin = 'null'.
          ENDIF.
          IF ls_irn-togstin IS INITIAL.
            ls_irn-togstin = 'null'.
          ENDIF.
          IF ls_irn-totrd_nm IS INITIAL.
            ls_irn-totrd_nm = 'null'.
          ENDIF.
          IF ls_irn-toloc IS INITIAL.
            ls_irn-toloc = 'null'.
          ENDIF.
          IF ls_irn-tostcd IS INITIAL.
            ls_irn-tostcd = 'null'.
          ENDIF.
          IF ls_irn-topin IS INITIAL.
            ls_irn-topin = 'null'.
          ENDIF.

          CLEAR: lv_tottxval, lv_totiamt, lv_totcamt, lv_totsamt.
          LOOP AT it_pvi INTO DATA(wa_pvi) WHERE rcm-bukrs = wa_pvh-pmv-bukrs
                                             AND rcm-belnr = wa_pvh-pmv-belnr
                                             AND rcm-gjahr = wa_pvh-pmv-gjahr.

            ls_item-no = wa_pvi-rcm-zfi_tax_inv.

            READ TABLE it_hk INTO DATA(wa_hk) WITH KEY belnr = wa_pvh-pmv-belnr.
            IF wa_pvi-rcm-item_desc IS NOT INITIAL.
              ls_item-prdnm = wa_pvi-rcm-item_desc.
              ls_item-prddesc = wa_pvi-rcm-item_desc.
            ELSE.
*              IF wa_pvi-rcm-zhsn_code IS NOT INITIAL.
*                SELECT text1
*                  UP TO 1 ROWS
*                  FROM t604n
*                  INTO ls_item-prdnm
*                  WHERE spras = 'E'
*                  AND   land1 = 'IN'
*                  AND   steuc = wa_pvi-rcm-zhsn_code
*                  ORDER BY PRIMARY KEY.
*                ENDSELECT.
*              ENDIF.
*              IF ls_item-prdnm IS NOT INITIAL.
*                ls_item-prddesc = ls_item-prdnm.
*              ELSE.
*                ls_item-prdnm = wa_hk-hkont.
*                ls_item-prddesc = wa_hk-hkont.
*              ENDIF.
            ENDIF.

            REPLACE ALL OCCURRENCES OF ',' IN ls_item-prdnm WITH space.

            ls_item-hsncd = wa_pvi-rcm-zhsn_code.

            ls_item-num = wa_pvi-rcm-buzei.
            ls_item-qty = wa_pvi-rcm-menge.

            SELECT einvuom UP TO 1 ROWS
              FROM zeinv_uom
              INTO ls_item-unit WHERE sapuom = wa_pvi-rcm-meins.
            ENDSELECT.

            IF wa_pvi-rcm-menge NE '0.000'.
              ls_item-unitprice = wa_pvi-rcm-dmbtr / wa_pvi-rcm-menge.
            ENDIF.
            ls_item-sval = wa_pvi-rcm-dmbtr.
            ls_item-txval = ls_item-sval."wa_pvi-pmv-tax_val.
            lv_tottxval = lv_tottxval + ls_item-txval.

            IF flg_igst = 'X'.
              ls_item-irt = wa_pvi-rcm-zigst.
              CONDENSE: ls_item-irt.
              ls_item-iamt = wa_pvi-rcm-zigst_val.
              lv_totiamt = lv_totiamt + ls_item-iamt.
            ELSE.
              ls_item-crt = wa_pvi-rcm-zcgst.
              ls_item-srt = wa_pvi-rcm-zsgst.
              CONDENSE: ls_item-crt, ls_item-srt.
              ls_item-camt = wa_pvi-rcm-zcgst_val.
              ls_item-samt = wa_pvi-rcm-zsgst_val.
              lv_totcamt = lv_totcamt + ls_item-camt.
              lv_totsamt = lv_totsamt + ls_item-samt.
            ENDIF.

            ls_item-itmval = ls_item-txval + ls_item-iamt + ls_item-camt + ls_item-samt.

            CONDENSE: ls_item-no,
                      ls_item-prdnm,
                      ls_item-prddesc,
                      ls_item-hsncd,
                      ls_item-qty,
                      ls_item-unit,
                      ls_item-unitprice,
                      ls_item-itmval,
                      ls_item-sval,
                      ls_item-txval,
                      ls_item-crt,
                      ls_item-srt,
                      ls_item-irt,
                      ls_item-iamt,
                      ls_item-camt,
                      ls_item-samt.
            IF ls_item-irt IS INITIAL.
              ls_item-irt = '0'.
            ENDIF.
            IF ls_item-crt IS INITIAL.
              ls_item-crt = '0'.
            ENDIF.
            IF ls_item-srt IS INITIAL.
              ls_item-srt = '0'.
            ENDIF.
            IF ls_item-iamt IS INITIAL.
              ls_item-iamt = '0'.
            ENDIF.
            IF ls_item-camt IS INITIAL.
              ls_item-camt = '0'.
            ENDIF.
            IF ls_item-samt IS INITIAL.
              ls_item-samt = '0'.
            ENDIF.
            IF ls_item-othchrg IS INITIAL.
              ls_item-othchrg = '0'.
            ENDIF.
            APPEND ls_item TO lt_item.
            CLEAR : ls_item.
          ENDLOOP.

          ls_irn-itemlist = lt_item[].

          ls_irn-tottxval = lv_tottxval.
          ls_irn-totiamt = lv_totiamt.
          ls_irn-totcamt = lv_totcamt.
          ls_irn-totsamt = lv_totsamt.
          ls_irn-totinvval = ls_irn-tottxval + ls_irn-totiamt + ls_irn-totcamt + ls_irn-totsamt.
          CONDENSE : ls_irn-totinvval.
          lv_totinval = ls_irn-totinvval.
          IF ls_irn-catg IS INITIAL.
            IF lv_totinval GT lv_budget.
              IF ls_irn-ntr = 'INTER'.
                ls_irn-catg = 'B2CL'.
              ELSE.
                ls_irn-catg = 'B2CS'.
              ENDIF.
            ELSE.
              ls_irn-catg = 'B2CS'.
            ENDIF.
          ENDIF.
          CONDENSE : ls_irn-forcur,ls_irn-ntr.

          IF ls_irn-forcur IS INITIAL.
            ls_irn-forcur = 'null'.
          ENDIF.
          IF ls_irn-invforcur IS INITIAL.
            ls_irn-invforcur = '0'.
          ENDIF.
          IF ls_irn-totothchrg IS INITIAL.
            ls_irn-totothchrg = '0'.
          ENDIF.
          IF ls_irn-totiamt IS INITIAL.
            ls_irn-totiamt = '0'.
          ENDIF.
          IF ls_irn-totcamt IS INITIAL.
            ls_irn-totcamt = '0'.
          ENDIF.
          IF ls_irn-totsamt IS INITIAL.
            ls_irn-totsamt = '0'.
          ENDIF.
          ls_irn-gen9 = 'Payment Voucher Tax Invoice Number'.                                           "ad by akshay_D-117834
          CONDENSE: ls_irn-doctype, ls_irn-catg, ls_irn-trntyp, ls_irn-no, ls_irn-rchrg, ls_irn-sgstin, ls_irn-strdnm,
                    ls_irn-sloc, ls_irn-sstcd, ls_irn-spin, ls_irn-bgstin, ls_irn-btrdnm, ls_irn-bloc,
                    ls_irn-bstcd, ls_irn-bpin, ls_irn-togstin, ls_irn-totrd_nm,ls_irn-toloc,
                    ls_irn-tostcd, ls_irn-topin, ls_irn-taxsch, ls_irn-totinvval, ls_irn-tottxval,
                    ls_irn-totcamt, ls_irn-totsamt, ls_irn-totiamt,ls_irn-gen9.
          APPEND ls_irn TO lt_irn.

          ls_einv_master-bukrs = ls_dtchk-bukrs.
          ls_einv_master-werks = wa_pvh-pmv-werks.
          ls_einv_master-region = wa_wk-regio.
          ls_einv_master-invoice_no = wa_pvh-rcm-zfi_tax_inv.
          ls_einv_master-user_gstin = ls_irn-sgstin.
          ls_einv_master-zmodule = 'FI'.
          ls_einv_master-sap_doc = ls_dtchk-belnr.
          ls_einv_master-creation_date = ls_dtchk-bldat.
          ls_einv_master-gjahr = ls_dtchk-gjahr.
          CONDENSE: ls_einv_master-bukrs, ls_einv_master-werks, ls_einv_master-region,
                    ls_einv_master-invoice_no, ls_einv_master-zmodule, ls_einv_master-sap_doc.
          APPEND ls_einv_master TO lt_einv_master.
          CLEAR : ls_einv_master.
          CLEAR : lv_count,ls_irn,lv_totinval.
          REFRESH : lt_item,ls_irn-itemlist.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_ASSESSMENT_CY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_assessment .

  SELECT *
    FROM zfi_assessmnt_ti
    INTO TABLE @DATA(it_aci)
    WHERE zfi_tax_inv IN @s_ti
    AND   bukrs       = '1000'.
*    AND   werks       IN @s_werks.
  IF sy-subrc = 0.

    DATA(it_ach) = it_aci[].
    SORT it_ach BY db_doc_no db_gjahr.
    DELETE ADJACENT DUPLICATES FROM it_ach COMPARING db_doc_no db_gjahr.

    IF it_ach[] IS NOT INITIAL.
      SELECT bukrs,belnr,gjahr,budat,bldat,usnam
        FROM bkpf INTO TABLE @DATA(lt_dtchk)
        FOR ALL ENTRIES IN @it_aci
        WHERE bukrs = @it_aci-bukrs AND belnr = @it_aci-db_doc_no AND bldat IN @s_budat AND stblg = ' '.
      IF lt_dtchk IS NOT INITIAL.
        SELECT bukrs,
               belnr,
               gjahr,
               lifnr,
               kunnr,
               bupla,
               werks,
               koart
          FROM bseg
          INTO TABLE @DATA(it_bg)
          FOR ALL ENTRIES IN @lt_dtchk
          WHERE bukrs = @lt_dtchk-bukrs
          AND   belnr = @lt_dtchk-belnr
          AND   gjahr = @lt_dtchk-gjahr
          AND ( koart = 'D'
          OR    koart = 'K' ).
      ENDIF.
      SELECT a~werks,
             a~name1,
             a~regio,
             a~pstlz,
             a~stras,
             a~land1,
             b~gstin,
             c~bezei,
             p~street,
             p~str_suppl1,
             p~str_suppl2
        FROM t001w AS a
        INNER JOIN j_1bbranch AS b ON a~j_1bbranch = b~branch AND b~bukrs = '1000'
        INNER JOIN t005u AS c ON a~regio = c~bland AND c~land1 = 'IN' AND c~spras = 'E'
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO TABLE @DATA(it_wk)
        FOR ALL ENTRIES IN @it_ach
        WHERE a~werks = '1000'
        OR    a~werks = @it_ach-werks.
    ENDIF.

    LOOP AT it_ach INTO DATA(wa_ach).
      READ TABLE lt_dtchk INTO DATA(ls_dtchk) WITH KEY bukrs = wa_ach-bukrs belnr = wa_ach-db_doc_no.
      IF sy-subrc = 0.
        CLEAR : show.
        IF ls_dtchk-usnam = sy-uname.
          show = 'X'.
        ELSE.
          READ TABLE lt_auth WITH KEY werks = '1000' psno = sy-uname TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            show = 'X'.
          ENDIF.
        ENDIF.
        IF show = 'X'.
          ls_irn-doctype = 'RI'.
          ls_irn-trntyp = 'Regular'.
          ls_irn-rchrg = 'N'.
          ls_irn-taxsch = 'GST'.

          IF wa_ach-zigst EQ '0.00'.
            CLEAR: flg_igst.
            ls_irn-ntr = 'INTRA'.
          ELSE.
            flg_igst = 'X'.
            ls_irn-ntr = 'INTER'.
          ENDIF.

          ls_irn-no = wa_ach-zfi_tax_inv.

          CLEAR : lv_budat,lv_cpudt,lv_m1,lv_m2,date_end.
          SELECT budat
           cpudt UP TO 1 ROWS
           FROM bkpf
           INTO ( lv_budat,lv_cpudt )
           WHERE belnr = ls_dtchk-belnr
           AND bukrs EQ ls_dtchk-bukrs
           AND gjahr EQ ls_dtchk-gjahr ORDER BY budat.
          ENDSELECT.

          IF sy-subrc EQ 0.
            lv_m1 = lv_budat+4(2).
            lv_m2 = lv_cpudt+4(2).

            IF lv_m1 EQ lv_m2.
              date_end = lv_cpudt.
            ELSE.

              CALL FUNCTION 'HR_JP_MONTH_BEGIN_END_DATE'
                EXPORTING
                  iv_date           = lv_budat
                IMPORTING
                  ev_month_end_date = date_end.       " end date.
            ENDIF.
          ENDIF.
          CONCATENATE date_end+6(2) date_end+4(2) date_end+0(4) INTO ls_irn-dt SEPARATED BY '-'.

          READ TABLE it_wk INTO DATA(wa_wk) WITH KEY werks = '1000'.
          IF sy-subrc = 0.
            ls_irn-strdnm = wa_wk-name1.
            ls_irn-sgstin = wa_wk-gstin.
            ls_irn-sloc   = wa_wk-bezei.
            ls_irn-sstcd  = wa_wk-regio.
            ls_irn-spin   = wa_wk-pstlz.
            CONCATENATE wa_wk-street wa_wk-str_suppl1 wa_wk-str_suppl2 INTO ls_irn-sbnm SEPARATED BY space.
            ls_irn-cntcd  = wa_wk-land1.
            IF sy-sysid = 'SED' OR sy-sysid = 'SEQ'.
              SELECT gstin UP TO 1 ROWS
                FROM zeinv_gstin
                INTO ls_irn-sgstin
                WHERE zregio = wa_wk-regio.
              ENDSELECT.
            ENDIF.
            ls_irn-usergstin = ls_irn-sgstin.
          ENDIF.

          READ TABLE it_wk INTO DATA(wa_awk) WITH KEY werks = wa_ach-werks.
          IF sy-subrc = 0.
            ls_irn-bgstin  = wa_awk-gstin.
            ls_irn-btrdnm  = wa_awk-name1.
            ls_irn-bloc    = wa_awk-bezei.
            ls_irn-bstcd   = wa_awk-regio.
            ls_irn-pos     = wa_awk-regio.
            ls_irn-bpin    = wa_awk-pstlz.
            CONCATENATE wa_awk-street wa_awk-str_suppl1 wa_awk-str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
*        ls_irn-togstin = wa_awk-gstin.
            IF ls_irn-bgstin IS INITIAL.
              ls_irn-bgstin = 'URP'.
            ELSE.
              ls_irn-catg = 'B2B'.
            ENDIF.
          ENDIF.

          IF ls_irn-dgstin IS INITIAL.
            ls_irn-dgstin = 'null'.
          ENDIF.
          IF ls_irn-dtrdnm IS INITIAL.
            ls_irn-dtrdnm = 'null'.
          ENDIF.
          IF ls_irn-dloc IS INITIAL.
            ls_irn-dloc = 'null'.
          ENDIF.
          IF ls_irn-dstcd IS INITIAL.
            ls_irn-dstcd = 'null'.
          ENDIF.
          IF ls_irn-dpin IS INITIAL.
            ls_irn-dpin = 'null'.
          ENDIF.
          IF ls_irn-togstin IS INITIAL.
            ls_irn-togstin = 'null'.
          ENDIF.
          IF ls_irn-totrd_nm IS INITIAL.
            ls_irn-totrd_nm = 'null'.
          ENDIF.
          IF ls_irn-toloc IS INITIAL.
            ls_irn-toloc = 'null'.
          ENDIF.
          IF ls_irn-tostcd IS INITIAL.
            ls_irn-tostcd = 'null'.
          ENDIF.
          IF ls_irn-topin IS INITIAL.
            ls_irn-topin = 'null'.
          ENDIF.

          CLEAR: lv_tottxval, lv_totiamt, lv_totcamt, lv_totsamt.
          LOOP AT it_aci INTO DATA(wa_aci) WHERE db_doc_no = wa_ach-db_doc_no
                                             AND db_gjahr  = wa_ach-db_gjahr.

            ls_item-no = wa_aci-zfi_tax_inv.

            SELECT text1
              UP TO 1 ROWS
              FROM t604n
              INTO ls_item-prdnm
              WHERE spras = 'E'
              AND   land1 = 'IN'
              AND   steuc = wa_ach-zhsn_code
              ORDER BY PRIMARY KEY.
            ENDSELECT.
            ls_item-prddesc = ls_item-prdnm.
            REPLACE ALL OCCURRENCES OF ',' IN ls_item-prdnm WITH space.

            ls_item-hsncd = wa_ach-zhsn_code.

            ls_item-num = wa_aci-buzei.
            ls_item-qty = '1.00'.
            SELECT einvuom UP TO 1 ROWS
              FROM zeinv_uom
              INTO ls_item-unit WHERE sapuom = 'ACT'.
            ENDSELECT.
            ls_item-unitprice = wa_aci-dmbtr.
            ls_item-sval = ls_item-qty * ls_item-unitprice.
            ls_item-txval = ls_item-sval.
            lv_tottxval = lv_tottxval + ls_item-txval.

            IF flg_igst = 'X'.
              ls_item-irt = wa_aci-zigst.
              ls_item-iamt = wa_aci-zigst_val.
              lv_totiamt = lv_totiamt + ls_item-iamt.
            ELSE.
              ls_item-crt = wa_aci-zcgst.
              ls_item-srt = wa_aci-zsgst.
              ls_item-camt = wa_aci-zcgst_val.
              ls_item-samt = wa_aci-zsgst_val.
              lv_totcamt = lv_totcamt + ls_item-camt.
              lv_totsamt = lv_totsamt + ls_item-samt.
            ENDIF.

            ls_item-itmval = ls_item-txval + ls_item-iamt + ls_item-camt + ls_item-samt.

            CONDENSE: ls_item-no,
                      ls_item-prdnm,
                      ls_item-prddesc,
                      ls_item-hsncd,
                      ls_item-qty,
                      ls_item-unit,
                      ls_item-unitprice,
                      ls_item-itmval,
                      ls_item-sval,
                      ls_item-txval,
                      ls_item-crt,
                      ls_item-srt,
                      ls_item-irt,
                      ls_item-iamt,
                      ls_item-camt,
                      ls_item-samt.
            IF ls_item-irt IS INITIAL.
              ls_item-irt = '0'.
            ENDIF.
            IF ls_item-crt IS INITIAL.
              ls_item-crt = '0'.
            ENDIF.
            IF ls_item-srt IS INITIAL.
              ls_item-srt = '0'.
            ENDIF.
            IF ls_item-iamt IS INITIAL.
              ls_item-iamt = '0'.
            ENDIF.
            IF ls_item-camt IS INITIAL.
              ls_item-camt = '0'.
            ENDIF.
            IF ls_item-samt IS INITIAL.
              ls_item-samt = '0'.
            ENDIF.
            IF ls_item-othchrg IS INITIAL.
              ls_item-othchrg = '0'.
            ENDIF.
            APPEND ls_item TO lt_item.
            CLEAR : ls_item.
          ENDLOOP.

          ls_irn-itemlist = lt_item[].

          ls_irn-tottxval = lv_tottxval.
          ls_irn-totiamt = lv_totiamt.
          ls_irn-totcamt = lv_totcamt.
          ls_irn-totsamt = lv_totsamt.
          ls_irn-totinvval = ls_irn-tottxval + ls_irn-totiamt + ls_irn-totcamt + ls_irn-totsamt.
          CONDENSE : ls_irn-totinvval.
          lv_totinval = ls_irn-totinvval.
          IF ls_irn-catg IS INITIAL.
            IF lv_totinval GT lv_budget.
              IF ls_irn-ntr = 'INTER'.
                ls_irn-catg = 'B2CL'.
              ELSE.
                ls_irn-catg = 'B2CS'.
              ENDIF.
            ELSE.
              ls_irn-catg = 'B2CS'.
            ENDIF.
          ENDIF.
          CONDENSE : ls_irn-forcur,ls_irn-ntr.

          IF ls_irn-forcur IS INITIAL.
            ls_irn-forcur = 'null'.
          ENDIF.
          IF ls_irn-invforcur IS INITIAL.
            ls_irn-invforcur = '0'.
          ENDIF.
          IF ls_irn-totothchrg IS INITIAL.
            ls_irn-totothchrg = '0'.
          ENDIF.
          IF ls_irn-totiamt IS INITIAL.
            ls_irn-totiamt = '0'.
          ENDIF.
          IF ls_irn-totcamt IS INITIAL.
            ls_irn-totcamt = '0'.
          ENDIF.
          IF ls_irn-totsamt IS INITIAL.
            ls_irn-totsamt = '0'.
          ENDIF.
          ls_irn-gen9 = 'GST:Assestment Tax Invoice'       .                                  "ad by akshay_D-117834
          CONDENSE: ls_irn-doctype, ls_irn-catg, ls_irn-trntyp, ls_irn-no, ls_irn-rchrg, ls_irn-sgstin, ls_irn-strdnm,
                    ls_irn-sloc, ls_irn-sstcd, ls_irn-spin, ls_irn-bgstin, ls_irn-btrdnm, ls_irn-bloc,
                    ls_irn-bstcd, ls_irn-bpin, ls_irn-togstin, ls_irn-totrd_nm,ls_irn-toloc,
                    ls_irn-tostcd, ls_irn-topin, ls_irn-taxsch, ls_irn-totinvval, ls_irn-tottxval,
                    ls_irn-totcamt, ls_irn-totsamt, ls_irn-totiamt,ls_irn-gen9.
          APPEND ls_irn TO lt_irn.

          ls_einv_master-bukrs = ls_dtchk-bukrs.
          ls_einv_master-werks = '1000'.
          ls_einv_master-region = wa_wk-regio.
          ls_einv_master-invoice_no = wa_ach-zfi_tax_inv.
          ls_einv_master-user_gstin = ls_irn-sgstin.
          ls_einv_master-zmodule = 'FI'.
          ls_einv_master-sap_doc = ls_dtchk-belnr.
          ls_einv_master-creation_date = ls_dtchk-bldat.
          ls_einv_master-gjahr = ls_dtchk-gjahr.
          CONDENSE: ls_einv_master-bukrs, ls_einv_master-werks, ls_einv_master-region,
                    ls_einv_master-invoice_no, ls_einv_master-zmodule, ls_einv_master-sap_doc.
          APPEND ls_einv_master TO lt_einv_master.
          CLEAR : ls_einv_master.
          CLEAR : lv_count,ls_irn,lv_totinval.
          REFRESH : lt_item,ls_irn-itemlist.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_GRN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_grn .

  SELECT *
    FROM zfi_grn_ti_gross
    INTO TABLE @DATA(it_gri)
    WHERE bukrs = '1000'
    AND   ti_no IN @s_ti
    AND   werks IN @s_werks.
  IF sy-subrc = 0.
    IF it_gri[] IS NOT INITIAL.
      SELECT bukrs,belnr,gjahr,budat,bldat,usnam
        FROM bkpf INTO TABLE @DATA(lt_dtchk)
        FOR ALL ENTRIES IN @it_gri
        WHERE bukrs = @it_gri-bukrs AND belnr = @it_gri-belnr AND bldat IN @s_budat AND stblg = ' '.
      IF lt_dtchk[] IS NOT INITIAL.
        SELECT bukrs,
               belnr,
               gjahr,
               lifnr,
               kunnr,
               bupla,
               werks,
               koart
          FROM bseg
          INTO TABLE @DATA(it_bg)
          FOR ALL ENTRIES IN @lt_dtchk
          WHERE bukrs = @lt_dtchk-bukrs
          AND   belnr = @lt_dtchk-belnr
          AND   gjahr = @lt_dtchk-gjahr
          AND ( koart = 'D'
          OR    koart = 'K' ).
      ENDIF.

      SELECT *
        FROM mara
        INNER JOIN makt ON mara~matnr = makt~matnr
        INNER JOIN marc ON makt~matnr = marc~matnr
        INTO TABLE @DATA(it_st)
        FOR ALL ENTRIES IN @it_gri
        WHERE makt~matnr = @it_gri-matnr
        AND   marc~werks = @it_gri-werks
        AND   makt~spras = 'E'.
      IF it_st IS NOT INITIAL.
        SELECT *
          FROM zgst_hsn_rate
          INTO TABLE it_hsn
          FOR ALL ENTRIES IN it_st
          WHERE steuc = it_st-marc-steuc.
      ENDIF.

      SELECT a~lifnr,
             a~name1,
             a~regio,
             a~pstlz,
             a~stcd3,
*             b~ven_class,
             a~ven_class, "$LTIM S/4 HANA Code Remediation : Viji : 08.12.2022
             c~bezei,
             p~street,
             p~str_suppl1,
             p~str_suppl2
        FROM lfa1 AS a
*        INNER JOIN j_1imovend AS b ON a~lifnr EQ b~lifnr
        INNER JOIN t005u AS c ON a~regio EQ c~bland AND c~spras EQ 'E' AND c~land1 = 'IN'
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO TABLE @DATA(it_lfa1)
        FOR ALL ENTRIES IN @it_gri
        WHERE a~lifnr = @it_gri-lifnr.
    ENDIF.

    DATA(it_grh) = it_gri[].
    SORT it_grh BY belnr gjahr.
    DELETE ADJACENT DUPLICATES FROM it_grh COMPARING belnr gjahr.

    IF it_grh[] IS NOT INITIAL.
      SELECT a~werks,
             a~name1,
             a~regio,
             a~pstlz,
             a~stras,
             a~land1,
             b~gstin,
             c~bezei,
             p~street,
             p~str_suppl1,
             p~str_suppl2
        FROM t001w AS a
        INNER JOIN j_1bbranch AS b ON a~j_1bbranch = b~branch AND b~bukrs = '1000'
        INNER JOIN t005u AS c ON a~regio = c~bland AND c~land1 = 'IN' AND c~spras = 'E'
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO TABLE @DATA(it_wk)
        FOR ALL ENTRIES IN @it_grh
        WHERE a~werks = @it_grh-werks.
    ENDIF.

    LOOP AT it_grh INTO DATA(wa_grh).
      READ TABLE lt_dtchk INTO DATA(ls_dtchk) WITH KEY bukrs = wa_grh-bukrs belnr = wa_grh-belnr.
      IF sy-subrc = 0.
        CLEAR : show.
        IF ls_dtchk-usnam = sy-uname.
          show = 'X'.
        ELSE.
          READ TABLE lt_auth WITH KEY werks = wa_grh-werks psno = sy-uname TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            show = 'X'.
          ENDIF.
        ENDIF.
        IF show = 'X'.
          READ TABLE it_bg INTO DATA(wa_bg) WITH KEY bukrs = ls_dtchk-bukrs belnr = ls_dtchk-belnr gjahr = ls_dtchk-gjahr.
          READ TABLE it_lfa1 INTO DATA(wa_lfa1) WITH KEY lifnr = wa_bg-lifnr.

          ls_irn-doctype = 'RI'.
          ls_irn-trntyp = 'Regular'.
          ls_irn-rchrg = 'N'.
          ls_irn-taxsch = 'GST'.

          IF wa_grh-igst EQ '0.00'.
            CLEAR: flg_igst.
            ls_irn-ntr = 'INTRA'.
          ELSE.
            flg_igst = 'X'.
            ls_irn-ntr = 'INTER'.
          ENDIF.

          ls_irn-no = wa_grh-ti_no.

          CLEAR : lv_budat,lv_cpudt,lv_m1,lv_m2,date_end.
          SELECT budat
           cpudt UP TO 1 ROWS
           FROM bkpf
           INTO ( lv_budat,lv_cpudt )
           WHERE belnr = ls_dtchk-belnr
           AND bukrs EQ ls_dtchk-bukrs
           AND gjahr EQ ls_dtchk-gjahr ORDER BY budat.
          ENDSELECT.

          IF sy-subrc EQ 0.
            lv_m1 = lv_budat+4(2).
            lv_m2 = lv_cpudt+4(2).

            IF lv_m1 EQ lv_m2.
              date_end = lv_cpudt.
            ELSE.

              CALL FUNCTION 'HR_JP_MONTH_BEGIN_END_DATE'
                EXPORTING
                  iv_date           = lv_budat
                IMPORTING
                  ev_month_end_date = date_end.       " end date.
            ENDIF.
          ENDIF.
          CONCATENATE date_end+6(2) date_end+4(2) date_end+0(4) INTO ls_irn-dt SEPARATED BY '-'.

          READ TABLE it_wk INTO DATA(wa_wk) WITH KEY werks = wa_grh-werks.
          IF sy-subrc = 0.
            ls_irn-strdnm = wa_wk-name1.
            ls_irn-sgstin = wa_wk-gstin.
            ls_irn-sloc   = wa_wk-bezei.
            ls_irn-sstcd  = wa_wk-regio.
            ls_irn-spin   = wa_wk-pstlz.
            CONCATENATE wa_wk-street wa_wk-str_suppl1 wa_wk-str_suppl2 INTO ls_irn-sbnm SEPARATED BY space.
            ls_irn-cntcd  = wa_wk-land1.
            IF sy-sysid = 'SED' OR sy-sysid = 'SEQ'.
              SELECT gstin UP TO 1 ROWS
                FROM zeinv_gstin
                INTO ls_irn-sgstin
                WHERE zregio = wa_wk-regio.
              ENDSELECT.
            ENDIF.
            ls_irn-usergstin = ls_irn-sgstin.
          ENDIF.

          ls_irn-bgstin  = wa_lfa1-stcd3.
          ls_irn-btrdnm  = wa_lfa1-name1.
          ls_irn-bloc    = wa_lfa1-bezei.
          ls_irn-bstcd   = wa_lfa1-regio.
          ls_irn-pos     = wa_lfa1-regio.
          CONCATENATE wa_lfa1-street wa_lfa1-str_suppl1 wa_lfa1-str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
          ls_irn-bpin    = wa_lfa1-pstlz.
          IF ls_irn-bgstin IS INITIAL.
            ls_irn-bgstin = 'URP'.
          ELSE.
            ls_irn-catg = 'B2B'.
          ENDIF.
*      ls_irn-togstin = wa_lfa1-stcd3.

          IF ls_irn-dgstin IS INITIAL.
            ls_irn-dgstin = 'null'.
          ENDIF.
          IF ls_irn-dtrdnm IS INITIAL.
            ls_irn-dtrdnm = 'null'.
          ENDIF.
          IF ls_irn-dloc IS INITIAL.
            ls_irn-dloc = 'null'.
          ENDIF.
          IF ls_irn-dstcd IS INITIAL.
            ls_irn-dstcd = 'null'.
          ENDIF.
          IF ls_irn-dpin IS INITIAL.
            ls_irn-dpin = 'null'.
          ENDIF.
          IF ls_irn-togstin IS INITIAL.
            ls_irn-togstin = 'null'.
          ENDIF.
          IF ls_irn-totrd_nm IS INITIAL.
            ls_irn-totrd_nm = 'null'.
          ENDIF.
          IF ls_irn-toloc IS INITIAL.
            ls_irn-toloc = 'null'.
          ENDIF.
          IF ls_irn-tostcd IS INITIAL.
            ls_irn-tostcd = 'null'.
          ENDIF.
          IF ls_irn-topin IS INITIAL.
            ls_irn-topin = 'null'.
          ENDIF.

          CLEAR: lv_tottxval, lv_totiamt, lv_totcamt, lv_totsamt.
          LOOP AT it_gri INTO DATA(wa_gri) WHERE belnr = wa_grh-belnr.

            ls_item-no = wa_gri-ti_no.

            DATA(wa_st) = it_st[ makt-matnr = wa_gri-matnr
                                 marc-werks = wa_gri-werks ].

            ls_item-prdnm = wa_gri-matnr.
            ls_item-prddesc = wa_st-makt-maktx.
            REPLACE ALL OCCURRENCES OF ',' IN ls_item-prdnm WITH space.

            ls_item-hsncd = wa_st-marc-steuc.

            ls_item-num = wa_gri-zeile.
            ls_item-qty = wa_gri-erfmg - wa_gri-lsmng.

            SELECT einvuom UP TO 1 ROWS
              FROM zeinv_uom
              INTO ls_item-unit WHERE sapuom = wa_st-mara-meins.
            ENDSELECT.

            ls_item-sval = wa_gri-totval + wa_gri-ovhval.
            ls_item-unitprice = ls_item-sval / ls_item-qty.
            ls_item-txval = ls_item-sval.
            lv_tottxval = lv_tottxval + ls_item-txval.

            IF flg_igst = 'X'.
              IF line_exists( it_hsn[ steuc = wa_st-marc-steuc ] ) .
                ls_item-irt = it_hsn[ steuc = wa_st-marc-steuc ]-taxrate.
              ENDIF.
              ls_item-irt = wa_gri-igst.
              ls_item-iamt = wa_gri-igstval.
              lv_totiamt = lv_totiamt + ls_item-iamt.
            ELSE.
              IF line_exists( it_hsn[ steuc = wa_st-marc-steuc ] ) .
                ls_item-crt = it_hsn[ steuc = wa_st-marc-steuc ]-taxrate / 2.
                ls_item-srt = it_hsn[ steuc = wa_st-marc-steuc ]-taxrate / 2.
              ENDIF.
              ls_item-crt = wa_gri-cgst.
              ls_item-srt = wa_gri-sgst.
              ls_item-camt = wa_gri-cgstval.
              ls_item-samt = wa_gri-sgstval.
              lv_totcamt = lv_totcamt + ls_item-camt.
              lv_totsamt = lv_totsamt + ls_item-samt.
            ENDIF.

            ls_item-itmval = ls_item-txval + ls_item-iamt + ls_item-camt + ls_item-samt.

            CONDENSE: ls_item-no,
                      ls_item-prdnm,
                      ls_item-prddesc,
                      ls_item-hsncd,
                      ls_item-qty,
                      ls_item-unit,
                      ls_item-unitprice,
                      ls_item-itmval,
                      ls_item-sval,
                      ls_item-txval,
                      ls_item-crt,
                      ls_item-srt,
                      ls_item-irt,
                      ls_item-iamt,
                      ls_item-camt,
                      ls_item-samt.
            IF ls_item-irt IS INITIAL.
              ls_item-irt = '0'.
            ENDIF.
            IF ls_item-crt IS INITIAL.
              ls_item-crt = '0'.
            ENDIF.
            IF ls_item-srt IS INITIAL.
              ls_item-srt = '0'.
            ENDIF.
            IF ls_item-iamt IS INITIAL.
              ls_item-iamt = '0'.
            ENDIF.
            IF ls_item-camt IS INITIAL.
              ls_item-camt = '0'.
            ENDIF.
            IF ls_item-samt IS INITIAL.
              ls_item-samt = '0'.
            ENDIF.
            IF ls_item-othchrg IS INITIAL.
              ls_item-othchrg = '0'.
            ENDIF.
            APPEND ls_item TO lt_item.
            CLEAR : ls_item.
          ENDLOOP.

          ls_irn-itemlist = lt_item[].

          ls_irn-tottxval = lv_tottxval.
          ls_irn-totiamt = lv_totiamt.
          ls_irn-totcamt = lv_totcamt.
          ls_irn-totsamt = lv_totsamt.
          ls_irn-totinvval = ls_irn-tottxval + ls_irn-totiamt + ls_irn-totcamt + ls_irn-totsamt.
          CONDENSE : ls_irn-totinvval.
          lv_totinval = ls_irn-totinvval.
          IF ls_irn-catg IS INITIAL.
            IF lv_totinval GT lv_budget.
              IF ls_irn-ntr = 'INTER'.
                ls_irn-catg = 'B2CL'.
              ELSE.
                ls_irn-catg = 'B2CS'.
              ENDIF.
            ELSE.
              ls_irn-catg = 'B2CS'.
            ENDIF.
          ENDIF.
          CONDENSE : ls_irn-forcur,ls_irn-ntr.

          IF ls_irn-forcur IS INITIAL.
            ls_irn-forcur = 'null'.
          ENDIF.
          IF ls_irn-invforcur IS INITIAL.
            ls_irn-invforcur = '0'.
          ENDIF.
          IF ls_irn-totothchrg IS INITIAL.
            ls_irn-totothchrg = '0'.
          ENDIF.
          IF ls_irn-totiamt IS INITIAL.
            ls_irn-totiamt = '0'.
          ENDIF.
          IF ls_irn-totcamt IS INITIAL.
            ls_irn-totcamt = '0'.
          ENDIF.
          IF ls_irn-totsamt IS INITIAL.
            ls_irn-totsamt = '0'.
          ENDIF.
          ls_irn-gen9 = 'Tax Invoice for GRN Gross Value'   .                                      "ad by akshay_D-117834
          CONDENSE: ls_irn-doctype, ls_irn-catg, ls_irn-trntyp, ls_irn-no, ls_irn-rchrg, ls_irn-sgstin, ls_irn-strdnm,
                    ls_irn-sloc, ls_irn-sstcd, ls_irn-spin, ls_irn-bgstin, ls_irn-btrdnm, ls_irn-bloc,
                    ls_irn-bstcd, ls_irn-bpin, ls_irn-togstin, ls_irn-totrd_nm,ls_irn-toloc,
                    ls_irn-tostcd, ls_irn-topin, ls_irn-taxsch, ls_irn-totinvval, ls_irn-tottxval,
                    ls_irn-totcamt, ls_irn-totsamt, ls_irn-totiamt,ls_irn-gen9.
          APPEND ls_irn TO lt_irn.

          ls_einv_master-bukrs = ls_dtchk-bukrs.
          ls_einv_master-werks = wa_grh-werks.
          ls_einv_master-region = wa_wk-regio.
          ls_einv_master-invoice_no = wa_grh-ti_no.
          ls_einv_master-user_gstin = ls_irn-sgstin.
          ls_einv_master-zmodule = 'FI'.
          ls_einv_master-sap_doc = ls_dtchk-belnr.
          ls_einv_master-creation_date = ls_dtchk-bldat.
          ls_einv_master-gjahr = ls_dtchk-gjahr.
          CONDENSE: ls_einv_master-bukrs, ls_einv_master-werks, ls_einv_master-region,
                    ls_einv_master-invoice_no, ls_einv_master-zmodule, ls_einv_master-sap_doc.
          APPEND ls_einv_master TO lt_einv_master.
          CLEAR : ls_einv_master.
          CLEAR : lv_count,ls_irn,lv_totinval.
          REFRESH : lt_item,ls_irn-itemlist.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_VEND_CN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_vend_cn .

  SELECT *
    FROM zfi_vend_cred_nt
    INTO TABLE @DATA(it_vci)
    WHERE bukrs = '1000'
    AND   zfi_tax_inv IN @s_ti
    AND   werks IN @s_werks.
  IF sy-subrc = 0.
    IF it_vci[] IS NOT INITIAL.
      SELECT bukrs,belnr,gjahr,budat,bldat,usnam
        FROM bkpf INTO TABLE @DATA(lt_dtchk)
        FOR ALL ENTRIES IN @it_vci
        WHERE bukrs = @it_vci-bukrs AND belnr = @it_vci-belnr AND bldat IN @s_budat AND stblg = ' '.
      IF lt_dtchk[] IS NOT INITIAL.
        SELECT bukrs,
               belnr,
               gjahr,
               lifnr,
               kunnr,
               bupla,
               werks,
               koart
          FROM bseg
          INTO TABLE @DATA(it_bg)
          FOR ALL ENTRIES IN @lt_dtchk
          WHERE bukrs = @lt_dtchk-bukrs
          AND   belnr = @lt_dtchk-belnr
          AND   gjahr = @lt_dtchk-gjahr
          AND ( koart = 'D'
          OR    koart = 'K' ).
      ENDIF.

      SELECT belnr,
             bukrs,
             gjahr,
             hkont
        FROM bseg
        INTO TABLE @DATA(it_hk)
        FOR ALL ENTRIES IN @it_vci
        WHERE bukrs = @it_vci-bukrs
        AND   belnr = @it_vci-belnr
        AND   gjahr = @it_vci-gjahr
        AND   gvtyp = 'X'.
    ENDIF.

    DATA(it_vch) = it_vci[].
    SORT it_vch BY belnr gjahr.
    DELETE ADJACENT DUPLICATES FROM it_vch COMPARING belnr gjahr.

    LOOP AT it_vch INTO DATA(wa_vch).
      READ TABLE lt_dtchk INTO DATA(ls_dtchk) WITH KEY bukrs = wa_vch-bukrs belnr = wa_vch-belnr.
      IF sy-subrc = 0.
        CLEAR : show.
        IF ls_dtchk-usnam = sy-uname.
          show = 'X'.
        ELSE.
          READ TABLE lt_auth WITH KEY werks = wa_vch-werks psno = sy-uname TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            show = 'X'.
          ENDIF.
        ENDIF.
        IF show = 'X'.
          READ TABLE it_bg INTO DATA(wa_bg) WITH KEY belnr = wa_vch-belnr koart = 'D'.  "akshay_D-118871
          IF sy-subrc = 0 AND wa_vch-zfi_tax_inv CS 'DN'.                     "akshay_D-118871
            ls_irn-doctype = 'D'.
          ELSE.                                                             "akshay_D-118871
            ls_irn-doctype = 'C'.
          ENDIF.
*          ls_irn-doctype = 'C'.
          ls_irn-trntyp = 'Regular'.
          ls_irn-rchrg = 'N'.
          ls_irn-taxsch = 'GST'.

          IF wa_vch-zigst EQ '0.00'.
            CLEAR: flg_igst.
            ls_irn-ntr = 'INTRA'.
          ELSE.
            flg_igst = 'X'.
            ls_irn-ntr = 'INTER'.
          ENDIF.

          IF wa_vch-kunnr IS NOT INITIAL.
            SELECT gform
              UP TO 1 ROWS
              FROM kna1
              INTO @DATA(lv_gform)
              WHERE kunnr = @wa_vch-kunnr
              ORDER BY PRIMARY KEY.
            ENDSELECT.
            SELECT vtext UP TO 1 ROWS FROM tvgft INTO ls_irn-catg
              WHERE gform = lv_gform AND spras = 'E'.
            ENDSELECT.
            CLEAR : lv_gform.
          ENDIF.

          ls_irn-no = wa_vch-zfi_tax_inv.

          CLEAR : lv_budat,lv_cpudt,lv_m1,lv_m2,date_end.
          SELECT budat
           cpudt UP TO 1 ROWS
           FROM bkpf
           INTO ( lv_budat,lv_cpudt )
           WHERE belnr = ls_dtchk-belnr
           AND bukrs EQ ls_dtchk-bukrs
           AND gjahr EQ ls_dtchk-gjahr ORDER BY budat.
          ENDSELECT.

          IF sy-subrc EQ 0.
            lv_m1 = lv_budat+4(2).
            lv_m2 = lv_cpudt+4(2).

            IF lv_m1 EQ lv_m2.
              date_end = lv_cpudt.
            ELSE.

              CALL FUNCTION 'HR_JP_MONTH_BEGIN_END_DATE'
                EXPORTING
                  iv_date           = lv_budat
                IMPORTING
                  ev_month_end_date = date_end.       " end date.
            ENDIF.
          ENDIF.
          CONCATENATE date_end+6(2) date_end+4(2) date_end+0(4) INTO ls_irn-dt SEPARATED BY '-'.

          SELECT gstin
            UP TO 1 ROWS
            FROM j_1bbranch
            INTO ls_irn-sgstin
            WHERE bukrs = '1000'
            AND   branch = wa_vch-bupla
            ORDER BY PRIMARY KEY.
          ENDSELECT.

          SELECT name
            UP TO 1 ROWS
            FROM j_1bbranch
            INTO ls_irn-strdnm
            WHERE bukrs = '1000'
            AND   branch = wa_vch-bupla
            ORDER BY PRIMARY KEY.
          ENDSELECT.

          ls_irn-sloc   = wa_vch-plant_regio_desc.
          ls_irn-sstcd  = wa_vch-plant_regio.
          IF sy-sysid = 'SED' OR sy-sysid = 'SEQ'.
            SELECT gstin UP TO 1 ROWS
              FROM zeinv_gstin
              INTO ls_irn-sgstin
              WHERE zregio = wa_vch-plant_regio.
            ENDSELECT.
          ENDIF.
          ls_irn-usergstin = ls_irn-sgstin.

          SELECT b~post_code1 b~house_num1 b~country b~street b~str_suppl1 b~str_suppl2
            UP TO 1 ROWS
            FROM j_1bbranch AS a
            LEFT OUTER JOIN adrc AS b ON a~adrnr = b~addrnumber
            INTO (ls_irn-spin,ls_irn-sbnm,ls_irn-cntcd,lv_street,lv_str_suppl1,lv_str_suppl2)
            WHERE bukrs = '1000'
            AND   branch = wa_vch-bupla.
          ENDSELECT.
          CONCATENATE lv_street lv_str_suppl1 lv_str_suppl2 INTO ls_irn-sbnm SEPARATED BY space.
          CLEAR : lv_street,lv_str_suppl1,lv_str_suppl2.

          IF wa_vch-kunnr IS NOT INITIAL.
            SELECT a~stcd3 a~name1 b~bezei a~regio a~pstlz p~street p~str_suppl1 p~str_suppl2
              UP TO 1 ROWS
              FROM kna1 AS a
              INNER JOIN t005u AS b ON a~regio = b~bland AND b~land1 = 'IN' AND b~spras = 'E'
              LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
              INTO (ls_irn-bgstin,ls_irn-btrdnm,ls_irn-bloc,ls_irn-bstcd,ls_irn-bpin,lv_street,lv_str_suppl1,lv_str_suppl2)
              WHERE kunnr = wa_vch-kunnr.
            ENDSELECT.
            CONCATENATE lv_street lv_str_suppl1 lv_str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
            CLEAR : lv_street,lv_str_suppl1,lv_str_suppl2.
            IF ls_irn-bgstin IS INITIAL.
              ls_irn-bgstin = 'URP'.
            ENDIF.
          ELSEIF wa_vch-lifnr  IS NOT INITIAL.
            SELECT a~stcd3 a~name1 b~bezei a~regio a~pstlz p~street p~str_suppl1 p~str_suppl2
              UP TO 1 ROWS
              FROM lfa1 AS a
              INNER JOIN t005u AS b ON a~regio = b~bland AND b~land1 = 'IN' AND b~spras = 'E'
              LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
              INTO (ls_irn-bgstin,ls_irn-btrdnm,ls_irn-bloc,ls_irn-bstcd,ls_irn-bpin,lv_street,lv_str_suppl1,lv_str_suppl2)
              WHERE lifnr = wa_vch-lifnr.
            ENDSELECT.
            CONCATENATE lv_street lv_str_suppl1 lv_str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
            CLEAR : lv_street,lv_str_suppl1,lv_str_suppl2.
            IF ls_irn-bgstin IS INITIAL.
              ls_irn-bgstin = 'URP'.
            ELSE.
              ls_irn-catg = 'B2B'.
            ENDIF.
          ENDIF.

*         ls_irn-pos = ls_irn-bstcd.
          IF wa_vch-zpos IS NOT INITIAL.                  "akshay_D-118984
            ls_irn-pos = wa_vch-zpos.
          ELSE.
            ls_irn-pos = ls_irn-bstcd.
          ENDIF.                                          "akshay_D-118984
*      113186
          IF ls_irn-pos EQ ls_irn-sstcd.
            CLEAR: flg_igst.
            ls_irn-ntr = 'INTRA'.
          ELSE.
            flg_igst = 'X'.
            ls_irn-ntr = 'INTER'.
          ENDIF.
*      ls_irn-togstin = ls_irn-bgstin.

          IF ls_irn-dgstin IS INITIAL.
            ls_irn-dgstin = 'null'.
          ENDIF.
          IF ls_irn-dtrdnm IS INITIAL.
            ls_irn-dtrdnm = 'null'.
          ENDIF.
          IF ls_irn-dloc IS INITIAL.
            ls_irn-dloc = 'null'.
          ENDIF.
          IF ls_irn-dstcd IS INITIAL.
            ls_irn-dstcd = 'null'.
          ENDIF.
          IF ls_irn-dpin IS INITIAL.
            ls_irn-dpin = 'null'.
          ENDIF.
          IF ls_irn-togstin IS INITIAL.
            ls_irn-togstin = 'null'.
          ENDIF.
          IF ls_irn-totrd_nm IS INITIAL.
            ls_irn-totrd_nm = 'null'.
          ENDIF.
          IF ls_irn-toloc IS INITIAL.
            ls_irn-toloc = 'null'.
          ENDIF.
          IF ls_irn-tostcd IS INITIAL.
            ls_irn-tostcd = 'null'.
          ENDIF.
          IF ls_irn-topin IS INITIAL.
            ls_irn-topin = 'null'.
          ENDIF.

          CLEAR: lv_tottxval, lv_totiamt, lv_totcamt, lv_totsamt.
          LOOP AT it_vci INTO DATA(wa_vci) WHERE belnr = wa_vch-belnr.

            ls_item-no = wa_vch-zfi_tax_inv.

            READ TABLE it_hk INTO DATA(wa_hk) WITH KEY belnr = wa_vch-belnr.
            IF wa_vci-item_desc IS NOT INITIAL.
              ls_item-prdnm = wa_vci-item_desc.
              ls_item-prddesc = wa_vci-item_desc.
            ELSE.
*              IF wa_vci-zhsn_code IS NOT INITIAL.
*                SELECT text1
*                 UP TO 1 ROWS
*                 FROM t604n
*                 INTO ls_item-prdnm
*                 WHERE spras = 'E'
*                 AND   land1 = 'IN'
*                 AND   steuc = wa_vci-zhsn_code
*                 ORDER BY PRIMARY KEY.
*                ENDSELECT.
*              ENDIF.
*              IF ls_item-prdnm IS NOT INITIAL.
*                ls_item-prddesc = ls_item-prdnm.
*              ELSE.
*                ls_item-prddesc = wa_hk-hkont.
*                ls_item-prddesc = wa_hk-hkont.
*              ENDIF.
            ENDIF.

            REPLACE ALL OCCURRENCES OF ',' IN ls_item-prdnm WITH space.

            ls_item-hsncd = wa_vci-zhsn_code.

            ls_item-num = wa_vci-buzei.
            ls_item-qty = wa_vci-menge.

            SELECT einvuom UP TO 1 ROWS
              FROM zeinv_uom
              INTO ls_item-unit WHERE sapuom = wa_vci-meins.
            ENDSELECT.

            ls_item-unitprice = wa_vci-rate.
            ls_item-sval = wa_vci-dmbtr.
            ls_item-txval = ls_item-sval.
            lv_tottxval = lv_tottxval + ls_item-txval.

            IF flg_igst = 'X'.
              ls_item-irt = wa_vci-zigst.
              ls_item-iamt = wa_vci-zigst_val.
              lv_totiamt = lv_totiamt + ls_item-iamt.
            ELSE.
              ls_item-crt = wa_vci-zcgst.
              ls_item-srt = wa_vci-zsgst.
              ls_item-camt = wa_vci-zcgst_val.
              ls_item-samt = wa_vci-zsgst_val.
              lv_totcamt = lv_totcamt + ls_item-camt.
              lv_totsamt = lv_totsamt + ls_item-samt.
            ENDIF.

            ls_item-itmval = ls_item-txval + ls_item-iamt + ls_item-camt + ls_item-samt.

            CONDENSE: ls_item-no,
                      ls_item-prdnm,
                      ls_item-prddesc,
                      ls_item-hsncd,
                      ls_item-qty,
                      ls_item-unit,
                      ls_item-unitprice,
                      ls_item-itmval,
                      ls_item-sval,
                      ls_item-txval,
                      ls_item-crt,
                      ls_item-srt,
                      ls_item-irt,
                      ls_item-iamt,
                      ls_item-camt,
                      ls_item-samt.
            IF ls_item-irt IS INITIAL.
              ls_item-irt = '0'.
            ENDIF.
            IF ls_item-crt IS INITIAL.
              ls_item-crt = '0'.
            ENDIF.
            IF ls_item-srt IS INITIAL.
              ls_item-srt = '0'.
            ENDIF.
            IF ls_item-iamt IS INITIAL.
              ls_item-iamt = '0'.
            ENDIF.
            IF ls_item-camt IS INITIAL.
              ls_item-camt = '0'.
            ENDIF.
            IF ls_item-samt IS INITIAL.
              ls_item-samt = '0'.
            ENDIF.
            IF ls_item-othchrg IS INITIAL.
              ls_item-othchrg = '0'.
            ENDIF.
            APPEND ls_item TO lt_item.
            CLEAR : ls_item.
          ENDLOOP.

          ls_irn-itemlist = lt_item[].

          ls_irn-tottxval = lv_tottxval.
          ls_irn-totiamt = lv_totiamt.
          ls_irn-totcamt = lv_totcamt.
          ls_irn-totsamt = lv_totsamt.
          ls_irn-totinvval = ls_irn-tottxval + ls_irn-totiamt + ls_irn-totcamt + ls_irn-totsamt.
          CONDENSE : ls_irn-totinvval.
          lv_totinval = ls_irn-totinvval.
          IF ls_irn-catg IS INITIAL.
            IF lv_totinval GT lv_budget.
              IF ls_irn-ntr = 'INTER'.
                ls_irn-catg = 'B2CL'.
              ELSE.
                ls_irn-catg = 'B2CS'.
              ENDIF.
            ELSE.
              ls_irn-catg = 'B2CS'.
            ENDIF.
          ENDIF.
          CONDENSE : ls_irn-forcur,ls_irn-ntr.

          IF ls_irn-forcur IS INITIAL.
            ls_irn-forcur = 'null'.
          ENDIF.
          IF ls_irn-invforcur IS INITIAL.
            ls_irn-invforcur = '0'.
          ENDIF.
          IF ls_irn-totothchrg IS INITIAL.
            ls_irn-totothchrg = '0'.
          ENDIF.
          IF ls_irn-totiamt IS INITIAL.
            ls_irn-totiamt = '0'.
          ENDIF.
          IF ls_irn-totcamt IS INITIAL.
            ls_irn-totcamt = '0'.
          ENDIF.
          IF ls_irn-totsamt IS INITIAL.
            ls_irn-totsamt = '0'.
          ENDIF.
          ls_irn-gen9 = wa_vch-ztype      .                                   "ad by akshay_D-117834
          CONDENSE: ls_irn-doctype, ls_irn-catg, ls_irn-trntyp, ls_irn-no, ls_irn-rchrg, ls_irn-sgstin, ls_irn-strdnm,
                    ls_irn-sloc, ls_irn-sstcd, ls_irn-spin, ls_irn-bgstin, ls_irn-btrdnm, ls_irn-bloc,
                    ls_irn-bstcd, ls_irn-bpin, ls_irn-togstin, ls_irn-totrd_nm,ls_irn-toloc,
                    ls_irn-tostcd, ls_irn-topin, ls_irn-taxsch, ls_irn-totinvval, ls_irn-tottxval,
                    ls_irn-totcamt, ls_irn-totsamt, ls_irn-totiamt,ls_irn-gen9.
          APPEND ls_irn TO lt_irn.

          ls_einv_master-bukrs = ls_dtchk-bukrs.
          ls_einv_master-werks = wa_vch-werks.
          ls_einv_master-region = wa_vch-plant_regio.
          ls_einv_master-invoice_no = wa_vch-zfi_tax_inv.
          ls_einv_master-user_gstin = ls_irn-sgstin.
          ls_einv_master-zmodule = 'FI'.
          ls_einv_master-sap_doc = ls_dtchk-belnr.
          ls_einv_master-creation_date = ls_dtchk-bldat.
          ls_einv_master-gjahr = ls_dtchk-gjahr.
          CONDENSE: ls_einv_master-bukrs, ls_einv_master-werks, ls_einv_master-region,
                    ls_einv_master-invoice_no, ls_einv_master-zmodule, ls_einv_master-sap_doc.
          APPEND ls_einv_master TO lt_einv_master.
          CLEAR : ls_einv_master.
          CLEAR : lv_count,ls_irn,lv_totinval.
          REFRESH : lt_item,ls_irn-itemlist.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_ASSET
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_asset .

  SELECT *
    FROM zfi_asset_trnsf
    INTO TABLE @DATA(it_asi)
    WHERE bukrs = '1000'
    AND   rcpt_no IN @s_ti
    AND   owerks IN @s_werks.
  IF sy-subrc = 0.
    IF it_asi[] IS NOT INITIAL.
      SELECT bukrs,belnr,gjahr,budat,bldat,usnam
        FROM bkpf INTO TABLE @DATA(lt_dtchk)
        FOR ALL ENTRIES IN @it_asi
        WHERE bukrs = @it_asi-bukrs AND belnr = @it_asi-belnr AND bldat IN @s_budat AND stblg = ' '.
      IF lt_dtchk[] IS NOT INITIAL.
        SELECT bukrs,
               belnr,
               gjahr,
               lifnr,
               kunnr,
               bupla,
               werks,
               koart
          FROM bseg
          INTO TABLE @DATA(it_bg)
          FOR ALL ENTRIES IN @lt_dtchk
          WHERE bukrs = @lt_dtchk-bukrs
          AND   belnr = @lt_dtchk-belnr
          AND   gjahr = @lt_dtchk-gjahr
          AND ( koart = 'D'
          OR    koart = 'K' ).
      ENDIF.

      SELECT bukrs,
             anln1,
             anln2,
             invzu,
             meins,
             menge,
             txt50
      FROM anla
      INTO TABLE @DATA(it_anla)
      FOR ALL ENTRIES IN @it_asi
      WHERE bukrs = @it_asi-bukrs
      AND   anln1 = @it_asi-anln1
      AND   anln2 = @it_asi-anln2.

    ENDIF.

    DATA(it_ash) = it_asi[].
    SORT it_ash BY belnr gjahr.
    DELETE ADJACENT DUPLICATES FROM it_ash COMPARING belnr gjahr.

    IF it_ash[] IS NOT INITIAL.
      SELECT a~werks,
             a~name1,
             a~regio,
             a~pstlz,
             a~stras,
             a~land1,
             b~gstin,
             c~bezei,
             p~street,
             p~str_suppl1,
             p~str_suppl2
        FROM t001w AS a
        INNER JOIN j_1bbranch AS b ON a~j_1bbranch = b~branch AND b~bukrs = '1000'
        INNER JOIN t005u AS c ON a~regio = c~bland AND c~land1 = 'IN' AND c~spras = 'E'
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO TABLE @DATA(it_wk)
        FOR ALL ENTRIES IN @it_ash
        WHERE a~werks = @it_ash-owerks
        OR    a~werks = @it_ash-nwerks.
    ENDIF.

    LOOP AT it_ash INTO DATA(wa_ash).
      READ TABLE lt_dtchk INTO DATA(ls_dtchk) WITH KEY bukrs = wa_ash-bukrs belnr = wa_ash-belnr.
      IF sy-subrc = 0.
        CLEAR : show.
        IF ls_dtchk-usnam = sy-uname.
          show = 'X'.
        ELSE.
          READ TABLE lt_auth WITH KEY werks = wa_ash-owerks psno = sy-uname TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            show = 'X'.
          ENDIF.
        ENDIF.
        IF show = 'X'.
          CLEAR : gv_dat.
          SELECT SINGLE budat
            INTO @DATA(gv_budat)
            FROM bkpf
            WHERE belnr = @ls_dtchk-belnr
            AND   bukrs = @ls_dtchk-bukrs
            AND   gjahr = @ls_dtchk-gjahr.
          SELECT SINGLE cpudt
            INTO @DATA(gv_cpudt)
            FROM bkpf
            WHERE belnr = @ls_dtchk-belnr
            AND   bukrs = @ls_dtchk-bukrs
            AND   gjahr = @ls_dtchk-gjahr.
          BREAK roletest-tec.
          IF  gv_budat+4(2) = gv_cpudt+4(2).
            gv_dat = gv_cpudt.
          ELSE.
            CALL FUNCTION 'RP_LAST_DAY_OF_MONTHS'
              EXPORTING
                day_in            = gv_budat
              IMPORTING
                last_day_of_month = gv_dat
              EXCEPTIONS
                day_in_no_date    = 1
                OTHERS            = 2.
            IF sy-subrc <> 0.
            ENDIF.
          ENDIF.
          CLEAR : gv_budat,gv_cpudt.

          READ TABLE it_bg INTO DATA(ls_bg) WITH KEY bukrs = ls_dtchk-bukrs belnr = ls_dtchk-belnr.
          ls_irn-doctype = 'RI'.
          ls_irn-rchrg = 'N'.
          ls_irn-taxsch = 'GST'.

*          IF wa_ash-igstval EQ '0.00'.
*            CLEAR: flg_igst.
*            ls_irn-ntr = 'INTRA'.
*          ELSE.
*            flg_igst = 'X'.
*            ls_irn-ntr = 'INTER'.
*          ENDIF.

          ls_irn-no = wa_ash-rcpt_no.
          CONCATENATE gv_dat+6(2) gv_dat+4(2) gv_dat+0(4) INTO ls_irn-dt SEPARATED BY '-'.

          READ TABLE it_wk INTO DATA(wa_owk) WITH KEY werks = wa_ash-owerks.
          IF sy-subrc = 0.
            ls_irn-strdnm = wa_owk-name1.
            ls_irn-sgstin = wa_owk-gstin.
            ls_irn-sloc   = wa_owk-bezei.
            ls_irn-sstcd  = wa_owk-regio.
            ls_irn-spin   = wa_owk-pstlz.
            CONCATENATE wa_owk-street wa_owk-str_suppl1 wa_owk-str_suppl2 INTO ls_irn-sbnm SEPARATED BY space.
            ls_irn-cntcd  = wa_owk-land1.
            IF sy-sysid = 'SED' OR sy-sysid = 'SEQ'.
              SELECT gstin UP TO 1 ROWS
                FROM zeinv_gstin
                INTO ls_irn-sgstin
                WHERE zregio = wa_owk-regio.
              ENDSELECT.
            ENDIF.
            ls_irn-usergstin = ls_irn-sgstin.
          ENDIF.

          IF wa_ash-ztcode = space.
            READ TABLE it_wk INTO DATA(wa_nwk) WITH KEY werks = wa_ash-nwerks.
            IF sy-subrc = 0.
              ls_irn-trntyp  = 'Regular'.
              ls_irn-bgstin  = wa_nwk-gstin.
              ls_irn-btrdnm  = wa_nwk-name1.
              ls_irn-bloc    = wa_nwk-bezei.
              ls_irn-bstcd   = wa_nwk-regio.
              ls_irn-pos     = wa_nwk-regio.
              ls_irn-bpin    = wa_nwk-pstlz.
              CONCATENATE wa_nwk-street wa_nwk-str_suppl1 wa_nwk-str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
*          ls_irn-togstin = wa_nwk-gstin.
              IF ls_irn-bgstin IS INITIAL.
                ls_irn-bgstin = 'URP'.
              ELSE.
                ls_irn-catg = 'B2B'.
              ENDIF.
            ENDIF.
          ELSE.
            IF wa_ash-gstin3 IS NOT INITIAL.
              ls_irn-catg   = 'B2B'.
              ls_irn-trntyp = 'SHP'.
              ls_irn-bgstin = wa_ash-gstin2.
              ls_irn-btrdnm = wa_ash-man_adrc.
              CONCATENATE wa_ash-address wa_ash-address2 INTO ls_irn-bbnm SEPARATED BY space.
              SELECT bezei UP TO 1 ROWS
                FROM t005u INTO ls_irn-bloc
                WHERE bland = wa_ash-state AND
                land1 = 'IN' AND spras = 'E'.
              ENDSELECT.
              ls_irn-bstcd  = wa_ash-state.
              ls_irn-bpin   = wa_ash-pincode.

              ls_irn-togstin = wa_ash-gstin3.
              ls_irn-totrd_nm = wa_ash-name3.
              CONCATENATE wa_ash-adrs1_3 wa_ash-adrs2_3 INTO ls_irn-tobnm SEPARATED BY space.
              SELECT bezei UP TO 1 ROWS
                FROM t005u INTO ls_irn-toloc
                WHERE bland = wa_ash-state3 AND
                land1 = 'IN' AND spras = 'E'.
              ENDSELECT.
              ls_irn-tostcd  = wa_ash-state3.
              ls_irn-pos     = wa_ash-state3.
              ls_irn-topin   = wa_ash-pincode1.
            ELSE.
              IF wa_ash-gstin2 IS NOT INITIAL.
                ls_irn-catg = 'B2B'.
                ls_irn-trntyp = 'Regular'.
                ls_irn-bgstin = wa_ash-gstin2.
                ls_irn-btrdnm = wa_ash-man_adrc.
                CONCATENATE wa_ash-address wa_ash-address2 INTO ls_irn-bbnm SEPARATED BY space.
                SELECT bezei UP TO 1 ROWS
                  FROM t005u INTO ls_irn-bloc
                  WHERE bland = wa_ash-state AND
                  land1 = 'IN' AND spras = 'E'.
                ENDSELECT.
                ls_irn-bstcd  = wa_ash-state.
                ls_irn-pos    = wa_ash-state.
                ls_irn-bpin   = wa_ash-pincode.
              ELSE.
                ls_irn-trntyp = 'Regular'.
                IF ls_bg-lifnr IS NOT INITIAL.
                  SELECT a~stcd3 a~name1 b~bezei a~regio a~pstlz p~street p~str_suppl1 p~str_suppl2
                    UP TO 1 ROWS
                    FROM lfa1 AS a
                    INNER JOIN t005u AS b ON a~regio = b~bland AND b~land1 = 'IN' AND b~spras = 'E'
                    LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
                    INTO (ls_irn-bgstin,ls_irn-btrdnm,ls_irn-bloc,ls_irn-bstcd,ls_irn-bpin,lv_street,lv_str_suppl1,lv_str_suppl2)
                    WHERE a~lifnr = ls_bg-lifnr.
                  ENDSELECT.
                  IF ls_irn-bgstin IS INITIAL.
                    ls_irn-bgstin = 'URP'.
                  ELSE.
                    ls_irn-catg = 'B2B'.
                  ENDIF.
                  CONCATENATE lv_street lv_str_suppl1 lv_str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
                  CLEAR : lv_street,lv_str_suppl1,lv_str_suppl2.
                ELSEIF ls_bg-kunnr IS NOT INITIAL.
                  SELECT a~stcd3 a~name1 b~bezei a~regio a~pstlz p~street p~str_suppl1 p~str_suppl2
                    UP TO 1 ROWS
                    FROM kna1 AS a
                    INNER JOIN t005u AS b ON a~regio = b~bland AND b~land1 = 'IN' AND b~spras = 'E'
                    LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
                    INTO ( ls_irn-bgstin,ls_irn-btrdnm,ls_irn-bloc,ls_irn-bstcd,ls_irn-bpin,lv_street,lv_str_suppl1,lv_str_suppl2 )
                    WHERE a~kunnr = ls_bg-kunnr.
                  ENDSELECT.
                  IF ls_irn-bgstin IS INITIAL.
                    ls_irn-bgstin = 'URP'.
                  ELSE.
                    ls_irn-catg = 'B2B'.
                  ENDIF.
                  CONCATENATE lv_street lv_str_suppl1 lv_str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
                  CLEAR : lv_street,lv_str_suppl1,lv_str_suppl2.
                ENDIF.
                ls_irn-pos   = ls_irn-bstcd.
              ENDIF.
            ENDIF.
*          ls_irn-togstin = ls_irn-bgstin.
          ENDIF.

          CONDENSE : ls_irn-pos,ls_irn-sstcd.
          IF ls_irn-pos = ls_irn-sstcd.
            CLEAR : flg_igst.
            ls_irn-ntr = 'INTRA'.
          ELSE.
            flg_igst = 'X'.
            ls_irn-ntr = 'INTER'.
          ENDIF.

          IF ls_irn-dgstin IS INITIAL.
            ls_irn-dgstin = 'null'.
          ENDIF.
          IF ls_irn-dtrdnm IS INITIAL.
            ls_irn-dtrdnm = 'null'.
          ENDIF.
          IF ls_irn-dloc IS INITIAL.
            ls_irn-dloc = 'null'.
          ENDIF.
          IF ls_irn-dstcd IS INITIAL.
            ls_irn-dstcd = 'null'.
          ENDIF.
          IF ls_irn-dpin IS INITIAL.
            ls_irn-dpin = 'null'.
          ENDIF.
          IF ls_irn-togstin IS INITIAL.
            ls_irn-togstin = 'null'.
          ENDIF.
          IF ls_irn-totrd_nm IS INITIAL.
            ls_irn-totrd_nm = 'null'.
          ENDIF.
          IF ls_irn-toloc IS INITIAL.
            ls_irn-toloc = 'null'.
          ENDIF.
          IF ls_irn-tostcd IS INITIAL.
            ls_irn-tostcd = 'null'.
          ENDIF.
          IF ls_irn-topin IS INITIAL.
            ls_irn-topin = 'null'.
          ENDIF.

          CLEAR: lv_tottxval, lv_totiamt, lv_totcamt, lv_totsamt,lv_tottcsv.
          LOOP AT it_asi INTO DATA(wa_asi) WHERE belnr = wa_ash-belnr.
            lv_count1 = lv_count1 + 1.
            ls_item-no = wa_ash-rcpt_no.

            IF line_exists( it_anla[ anln1 = wa_asi-anln1 ] ) .
              ls_item-prddesc = it_anla[ anln1 = wa_asi-anln1 ]-txt50.
            ENDIF.
            REPLACE ALL OCCURRENCES OF ',' IN ls_item-prdnm WITH space.

            ls_item-hsncd = wa_asi-invzu.
            ls_item-prdnm = wa_asi-anln1.
            ls_item-num = lv_count1.
            ls_item-qty  = wa_asi-menge.

            SELECT einvuom UP TO 1 ROWS
              FROM zeinv_uom
              INTO ls_item-unit WHERE sapuom = wa_asi-meins.
            ENDSELECT.

            IF wa_asi-menge IS NOT INITIAL.
              ls_item-unitprice = wa_asi-assetval / wa_asi-menge.
            ENDIF.
            ls_item-sval = wa_asi-assetval.
            ls_item-txval = ls_item-sval.
            lv_tottxval = lv_tottxval + ls_item-txval.
            lv_tottcsv = lv_tottcsv + wa_asi-tcsval.

            IF flg_igst = 'X'.
              ls_item-irt = wa_asi-igstper.
              ls_item-iamt = wa_asi-igstval.
              lv_totiamt = lv_totiamt + ls_item-iamt.
            ELSE.
              ls_item-crt = wa_asi-igstper / 2.
              ls_item-srt = wa_asi-igstper / 2.
              ls_item-camt = wa_asi-cgstval.
              ls_item-samt = wa_asi-sgstval.
              lv_totcamt = lv_totcamt + ls_item-camt.
              lv_totsamt = lv_totsamt + ls_item-samt.
            ENDIF.

            ls_item-itmval = ls_item-sval + ls_item-iamt + ls_item-camt + ls_item-samt + wa_asi-tcsval.
            IF ( wa_asi-man IS INITIAL OR wa_asi-man = '0' OR wa_asi-man = '0.00' ) AND wa_asi-ztcode = 'F-92'
            AND wa_asi-igstval IS INITIAL AND wa_asi-cgstval IS INITIAL AND wa_asi-sgstval IS INITIAL.
              DATA(taxval) = 'X'.
            ENDIF.
            IF taxval = 'X'.
              ls_item-disc = wa_asi-assetval.
              ls_item-txval = ls_item-txval - wa_asi-assetval.
              ls_item-othchrg = wa_asi-assetval + wa_asi-tcsval.
*              ls_item-itmval = ls_item-itmval - wa_asi-assetval.
*              lv_tottxval = lv_tottxval - wa_asi-assetval.
            ELSE.
              ls_item-othchrg = wa_asi-tcsval.
            ENDIF.


            CONDENSE: ls_item-no,
                      ls_item-prdnm,
                      ls_item-prddesc,
                      ls_item-hsncd,
                      ls_item-qty,
                      ls_item-unit,
                      ls_item-unitprice,
                      ls_item-itmval,
                      ls_item-sval,
                      ls_item-txval,
                      ls_item-crt,
                      ls_item-srt,
                      ls_item-irt,
                      ls_item-iamt,
                      ls_item-camt,
                      ls_item-samt,
                      ls_item-othchrg,
                      ls_item-disc.
            IF ls_item-irt IS INITIAL.
              ls_item-irt = '0'.
            ENDIF.
            IF ls_item-crt IS INITIAL.
              ls_item-crt = '0'.
            ENDIF.
            IF ls_item-srt IS INITIAL.
              ls_item-srt = '0'.
            ENDIF.
            IF ls_item-iamt IS INITIAL.
              ls_item-iamt = '0'.
            ENDIF.
            IF ls_item-camt IS INITIAL.
              ls_item-camt = '0'.
            ENDIF.
            IF ls_item-samt IS INITIAL.
              ls_item-samt = '0'.
            ENDIF.
            IF ls_item-othchrg IS INITIAL.
              ls_item-othchrg = '0'.
            ENDIF.
            IF ls_item-disc IS INITIAL.
              ls_item-disc = '0'.
            ENDIF.
            APPEND ls_item TO lt_item.
            CLEAR : ls_item.
          ENDLOOP.
          CLEAR : lv_count1,lv_totinval.
          lv_totinval = lv_tottxval + lv_totcamt + lv_totsamt + lv_totiamt + lv_tottcsv.
          IF taxval = 'X'.
            CLEAR : lv_tottxval.
          ENDIF.
          IF ls_irn-catg IS INITIAL.
            IF lv_totinval GT lv_budget.
              IF ls_irn-ntr = 'INTER'.
                ls_irn-catg = 'B2CL'.
              ELSE.
                ls_irn-catg = 'B2CS'.
              ENDIF.
            ELSE.
              ls_irn-catg = 'B2CS'.
            ENDIF.
          ENDIF.
          ls_irn-itemlist = lt_item[].

          ls_irn-tottxval = lv_tottxval.
          ls_irn-totiamt = lv_totiamt.
          ls_irn-totcamt = lv_totcamt.
          ls_irn-totsamt = lv_totsamt.
          IF taxval = 'X'.
            CLEAR : taxval.
            ls_irn-totinvval = lv_totinval.
          ELSE.
            ls_irn-totinvval = ls_irn-tottxval + ls_irn-totiamt + ls_irn-totcamt + ls_irn-totsamt + lv_tottcsv.
          ENDIF.

          CONDENSE : ls_irn-forcur,ls_irn-ntr.

          IF ls_irn-forcur IS INITIAL.
            ls_irn-forcur = 'null'.
          ENDIF.
          IF ls_irn-invforcur IS INITIAL.
            ls_irn-invforcur = '0'.
          ENDIF.
          IF ls_irn-totothchrg IS INITIAL.
            ls_irn-totothchrg = '0'.
          ENDIF.
          IF ls_irn-totiamt IS INITIAL.
            ls_irn-totiamt = '0'.
          ENDIF.
          IF ls_irn-totcamt IS INITIAL.
            ls_irn-totcamt = '0'.
          ENDIF.
          IF ls_irn-totsamt IS INITIAL.
            ls_irn-totsamt = '0'.
          ENDIF.
          ls_irn-gen9 = 'Asset Transfer Process' .                                        "ad by akshay_D-117834
          CONDENSE: ls_irn-doctype, ls_irn-catg, ls_irn-trntyp, ls_irn-no, ls_irn-rchrg, ls_irn-sgstin, ls_irn-strdnm,
                    ls_irn-sloc, ls_irn-sstcd, ls_irn-spin, ls_irn-bgstin, ls_irn-btrdnm, ls_irn-bloc,
                    ls_irn-bstcd, ls_irn-bpin, ls_irn-togstin, ls_irn-totrd_nm,ls_irn-toloc,
                    ls_irn-tostcd, ls_irn-topin, ls_irn-taxsch, ls_irn-totinvval, ls_irn-tottxval,
                    ls_irn-totcamt, ls_irn-totsamt, ls_irn-totiamt,ls_irn-gen9.
          APPEND ls_irn TO lt_irn.

          ls_einv_master-bukrs = ls_dtchk-bukrs.
          ls_einv_master-werks = wa_ash-owerks.
          IF line_exists( it_wk[ werks = wa_ash-owerks ] ).
            ls_einv_master-region = it_wk[ werks = wa_ash-owerks ]-regio.
          ENDIF.
          ls_einv_master-invoice_no = wa_ash-rcpt_no.
          ls_einv_master-user_gstin = ls_irn-sgstin.
          ls_einv_master-zmodule = 'FI'.
          ls_einv_master-sap_doc = ls_dtchk-belnr.
          ls_einv_master-creation_date = ls_dtchk-bldat.
          ls_einv_master-gjahr = ls_dtchk-gjahr.
          CONDENSE: ls_einv_master-bukrs, ls_einv_master-werks, ls_einv_master-region,
                    ls_einv_master-invoice_no, ls_einv_master-zmodule, ls_einv_master-sap_doc.
          APPEND ls_einv_master TO lt_einv_master.
          CLEAR : ls_einv_master.
          CLEAR : lv_count,ls_irn.
          REFRESH : lt_item,ls_irn-itemlist.
        ENDIF.
        CLEAR : ls_bg.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_MAT_RETURN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_mat_return .

  SELECT *
    FROM zfi_return_mat
    INTO TABLE @DATA(it_rti)
    WHERE bukrs = '1000'
    AND   zfi_taxinv IN @s_ti
    AND   werks IN @s_werks.
  IF sy-subrc = 0.

    DATA(it_rth) = it_rti[].
    SORT it_rth BY belnr gjahr.
    DELETE ADJACENT DUPLICATES FROM it_rth COMPARING belnr gjahr.

    IF it_rth[] IS NOT INITIAL.
      SELECT bukrs,belnr,gjahr,budat,bldat,usnam
        FROM bkpf INTO TABLE @DATA(lt_dtchk)
        FOR ALL ENTRIES IN @it_rti
        WHERE bukrs = @it_rti-bukrs AND belnr = @it_rti-belnr AND bldat IN @s_budat AND stblg = ' '.
      IF lt_dtchk[] IS NOT INITIAL.
        SELECT bukrs,
               belnr,
               gjahr,
               lifnr,
               kunnr,
               bupla,
               werks,
               koart
          FROM bseg
          INTO TABLE @DATA(it_bg)
          FOR ALL ENTRIES IN @lt_dtchk
          WHERE bukrs = @lt_dtchk-bukrs
          AND   belnr = @lt_dtchk-belnr
          AND   gjahr = @lt_dtchk-gjahr
          AND ( koart = 'D'
          OR    koart = 'K' ).
      ENDIF.

      SELECT a~werks,
             a~name1,
             a~regio,
             a~pstlz,
             a~stras,
             a~land1,
             b~gstin,
             c~bezei,
             p~street,
             p~str_suppl1,
             p~str_suppl2
        FROM t001w AS a
        INNER JOIN j_1bbranch AS b ON a~j_1bbranch = b~branch AND b~bukrs = '1000'
        INNER JOIN t005u AS c ON a~regio = c~bland AND c~land1 = 'IN' AND c~spras = 'E'
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO TABLE @DATA(it_wk)
        FOR ALL ENTRIES IN @it_rth
        WHERE a~werks = @it_rth-werks.
    ENDIF.

    LOOP AT it_rth INTO DATA(wa_rth).
      READ TABLE lt_dtchk INTO DATA(ls_dtchk) WITH KEY bukrs = wa_rth-bukrs belnr = wa_rth-belnr.
      IF sy-subrc = 0.
        CLEAR : show.
        IF ls_dtchk-usnam = sy-uname.
          show = 'X'.
        ELSE.
          READ TABLE lt_auth WITH KEY werks = wa_rth-werks psno = sy-uname TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            show = 'X'.
          ENDIF.
        ENDIF.
        IF show = 'X'.
          ls_irn-doctype = 'RI'.
          ls_irn-trntyp = 'Regular'.
          ls_irn-rchrg = 'N'.
          ls_irn-taxsch = 'GST'.

          IF wa_rth-igst_rate EQ '0.00'.
            CLEAR: flg_igst.
            ls_irn-ntr = 'INTRA'.
          ELSE.
            flg_igst = 'X'.
            ls_irn-ntr = 'INTER'.
          ENDIF.

          ls_irn-no = wa_rth-zfi_taxinv.
          CLEAR : lv_budat,lv_cpudt,lv_m1,lv_m2,date_end.
          SELECT budat
           cpudt UP TO 1 ROWS
           FROM bkpf
           INTO ( lv_budat,lv_cpudt )
           WHERE belnr = ls_dtchk-belnr
           AND bukrs EQ ls_dtchk-bukrs
           AND gjahr EQ ls_dtchk-gjahr ORDER BY budat.
          ENDSELECT.

          IF sy-subrc EQ 0.
            lv_m1 = lv_budat+4(2).
            lv_m2 = lv_cpudt+4(2).

            IF lv_m1 EQ lv_m2.
              date_end = lv_cpudt.
            ELSE.

              CALL FUNCTION 'HR_JP_MONTH_BEGIN_END_DATE'
                EXPORTING
                  iv_date           = lv_budat
                IMPORTING
                  ev_month_end_date = date_end.       " end date.
            ENDIF.
          ENDIF.
          CONCATENATE date_end+6(2) date_end+4(2) date_end+0(4) INTO ls_irn-dt SEPARATED BY '-'.


          READ TABLE it_wk INTO DATA(wa_wk) WITH KEY werks = wa_rth-werks.
          IF sy-subrc = 0.
            ls_irn-strdnm = wa_wk-name1.
            ls_irn-sgstin = wa_wk-gstin.
            ls_irn-sloc   = wa_wk-bezei.
            ls_irn-sstcd  = wa_wk-regio.
            ls_irn-spin   = wa_wk-pstlz.
            CONCATENATE wa_wk-street wa_wk-str_suppl1 wa_wk-str_suppl2 INTO ls_irn-sbnm SEPARATED BY space.
            ls_irn-cntcd  = wa_wk-land1.
            IF sy-sysid = 'SED' OR sy-sysid = 'SEQ'.
              SELECT gstin UP TO 1 ROWS
                FROM zeinv_gstin
                INTO ls_irn-sgstin
                WHERE zregio = wa_wk-regio.
              ENDSELECT.
            ENDIF.
            ls_irn-usergstin = ls_irn-sgstin.
          ENDIF.

          SELECT a~stcd3 a~name1 b~bezei a~regio a~pstlz p~street p~str_suppl1 p~str_suppl2
            UP TO 1 ROWS
            FROM lfa1 AS a
            INNER JOIN t005u AS b ON a~regio = b~bland AND b~land1 = 'IN' AND b~spras = 'E'
            LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
            INTO (ls_irn-bgstin,ls_irn-btrdnm,ls_irn-bloc,ls_irn-bstcd,ls_irn-bpin,lv_street,lv_str_suppl1,lv_str_suppl2)
            WHERE lifnr = wa_rth-lifnr.
          ENDSELECT.
          CONCATENATE lv_street lv_str_suppl1 lv_str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
          CLEAR : lv_street,lv_str_suppl1,lv_str_suppl2.
          IF ls_irn-bgstin IS INITIAL.
            ls_irn-bgstin = 'URP'.
          ELSE.
            ls_irn-catg = 'B2B'.
          ENDIF.
          ls_irn-pos = ls_irn-bstcd.
*      ls_irn-togstin = ls_irn-bgstin.

          IF ls_irn-dgstin IS INITIAL.
            ls_irn-dgstin = 'null'.
          ENDIF.
          IF ls_irn-dtrdnm IS INITIAL.
            ls_irn-dtrdnm = 'null'.
          ENDIF.
          IF ls_irn-dloc IS INITIAL.
            ls_irn-dloc = 'null'.
          ENDIF.
          IF ls_irn-dstcd IS INITIAL.
            ls_irn-dstcd = 'null'.
          ENDIF.
          IF ls_irn-dpin IS INITIAL.
            ls_irn-dpin = 'null'.
          ENDIF.
          IF ls_irn-togstin IS INITIAL.
            ls_irn-togstin = 'null'.
          ENDIF.
          IF ls_irn-totrd_nm IS INITIAL.
            ls_irn-totrd_nm = 'null'.
          ENDIF.
          IF ls_irn-toloc IS INITIAL.
            ls_irn-toloc = 'null'.
          ENDIF.
          IF ls_irn-tostcd IS INITIAL.
            ls_irn-tostcd = 'null'.
          ENDIF.
          IF ls_irn-topin IS INITIAL.
            ls_irn-topin = 'null'.
          ENDIF.

          CLEAR: lv_tottxval, lv_totiamt, lv_totcamt, lv_totsamt.
          LOOP AT it_rti INTO DATA(wa_rti) WHERE belnr = wa_rth-belnr.
            lv_count1 = lv_count1 + 1.
            ls_item-no = wa_rti-zfi_taxinv.

            ls_item-prdnm = wa_rti-matnr.
            ls_item-prddesc = wa_rti-maktx.
            REPLACE ALL OCCURRENCES OF ',' IN ls_item-prdnm WITH space.

            ls_item-hsncd = wa_rti-steuc.

            ls_item-num = lv_count1.
            ls_item-qty  = wa_rti-zavail_qty.

            SELECT einvuom UP TO 1 ROWS
              FROM zeinv_uom
              INTO ls_item-unit WHERE sapuom = wa_rti-uom.
            ENDSELECT.

            ls_item-unitprice = wa_rth-netpr.
            ls_item-sval = ls_item-qty * ls_item-unitprice.
            ls_item-txval = wa_rti-tax_val.
            lv_tottxval = lv_tottxval + ls_item-txval.

            IF flg_igst = 'X'.
              ls_item-irt = wa_rti-igst_rate.
              ls_item-iamt = wa_rti-igst_val.
              lv_totiamt = lv_totiamt + ls_item-iamt.
            ELSE.
              ls_item-crt = wa_rti-cgst_rate.
              ls_item-srt = wa_rti-sgst_rate.
              ls_item-camt = wa_rti-cgst_val.
              ls_item-samt = wa_rti-sgst_val.
              lv_totcamt = lv_totcamt + ls_item-camt.
              lv_totsamt = lv_totsamt + ls_item-samt.
            ENDIF.

            ls_item-itmval = ls_item-sval + ls_item-iamt + ls_item-camt + ls_item-samt.

            CONDENSE: ls_item-no,
                      ls_item-prdnm,
                      ls_item-prddesc,
                      ls_item-hsncd,
                      ls_item-qty,
                      ls_item-unit,
                      ls_item-unitprice,
                      ls_item-itmval,
                      ls_item-sval,
                      ls_item-txval,
                      ls_item-crt,
                      ls_item-srt,
                      ls_item-irt,
                      ls_item-iamt,
                      ls_item-camt,
                      ls_item-samt.
            IF ls_item-irt IS INITIAL.
              ls_item-irt = '0'.
            ENDIF.
            IF ls_item-crt IS INITIAL.
              ls_item-crt = '0'.
            ENDIF.
            IF ls_item-srt IS INITIAL.
              ls_item-srt = '0'.
            ENDIF.
            IF ls_item-iamt IS INITIAL.
              ls_item-iamt = '0'.
            ENDIF.
            IF ls_item-camt IS INITIAL.
              ls_item-camt = '0'.
            ENDIF.
            IF ls_item-samt IS INITIAL.
              ls_item-samt = '0'.
            ENDIF.
            IF ls_item-othchrg IS INITIAL.
              ls_item-othchrg = '0'.
            ENDIF.
            APPEND ls_item TO lt_item.
            CLEAR : ls_item.
          ENDLOOP.
          CLEAR : lv_count1.

          ls_irn-itemlist = lt_item[].

          ls_irn-tottxval = lv_tottxval.
          ls_irn-totiamt = lv_totiamt.
          ls_irn-totcamt = lv_totcamt.
          ls_irn-totsamt = lv_totsamt.
          ls_irn-totinvval = ls_irn-tottxval + ls_irn-totiamt + ls_irn-totcamt + ls_irn-totsamt.
          CONDENSE : ls_irn-totinvval.
          lv_totinval = ls_irn-totinvval.
          IF ls_irn-catg IS INITIAL.
            IF lv_totinval GT lv_budget.
              IF ls_irn-ntr = 'INTER'.
                ls_irn-catg = 'B2CL'.
              ELSE.
                ls_irn-catg = 'B2CS'.
              ENDIF.
            ELSE.
              ls_irn-catg = 'B2CS'.
            ENDIF.
          ENDIF.
          CONDENSE : ls_irn-forcur,ls_irn-ntr.

          IF ls_irn-forcur IS INITIAL.
            ls_irn-forcur = 'null'.
          ENDIF.
          IF ls_irn-invforcur IS INITIAL.
            ls_irn-invforcur = '0'.
          ENDIF.
          IF ls_irn-totothchrg IS INITIAL.
            ls_irn-totothchrg = '0'.
          ENDIF.
          IF ls_irn-totiamt IS INITIAL.
            ls_irn-totiamt = '0'.
          ENDIF.
          IF ls_irn-totcamt IS INITIAL.
            ls_irn-totcamt = '0'.
          ENDIF.
          IF ls_irn-totsamt IS INITIAL.
            ls_irn-totsamt = '0'.
          ENDIF.
          ls_irn-gen9 = 'Returnable Material Tax Invoices' .                                        "ad by akshay_D-117834
          CONDENSE: ls_irn-doctype, ls_irn-catg, ls_irn-trntyp, ls_irn-no, ls_irn-rchrg, ls_irn-sgstin, ls_irn-strdnm,
                    ls_irn-sloc, ls_irn-sstcd, ls_irn-spin, ls_irn-bgstin, ls_irn-btrdnm, ls_irn-bloc,
                    ls_irn-bstcd, ls_irn-bpin, ls_irn-togstin, ls_irn-totrd_nm,ls_irn-toloc,
                    ls_irn-tostcd, ls_irn-topin, ls_irn-taxsch, ls_irn-totinvval, ls_irn-tottxval,
                    ls_irn-totcamt, ls_irn-totsamt, ls_irn-totiamt,ls_irn-gen9.
          APPEND ls_irn TO lt_irn.

          ls_einv_master-bukrs = ls_dtchk-bukrs.
          ls_einv_master-werks = wa_rth-werks.
          ls_einv_master-region = wa_rth-plant_regio.
          ls_einv_master-invoice_no = wa_rth-zfi_taxinv.
          ls_einv_master-user_gstin = ls_irn-sgstin.
          ls_einv_master-zmodule = 'FI'.
          ls_einv_master-sap_doc = ls_dtchk-belnr.
          ls_einv_master-creation_date = ls_dtchk-bldat.
          ls_einv_master-gjahr = ls_dtchk-gjahr.
          CONDENSE: ls_einv_master-bukrs, ls_einv_master-werks, ls_einv_master-region,
                    ls_einv_master-invoice_no, ls_einv_master-zmodule, ls_einv_master-sap_doc.
          APPEND ls_einv_master TO lt_einv_master.
          CLEAR : ls_einv_master.
          CLEAR : lv_count,ls_irn,lv_totinval.
          REFRESH : lt_item,ls_irn-itemlist.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_BIBIYANA_SOUTH
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_bibiyana_south .

  SELECT *
    FROM zfi_exportiv_hdr AS hd
    INNER JOIN zfi_export_itm_s AS it ON hd~zzinvoice = it~zzinvoice AND it~header_desc = @space
    LEFT OUTER JOIN ekpo ON ekpo~ebeln = it~ebeln AND ekpo~ebelp = it~ebelp
    INTO TABLE @DATA(it_bsi)
    WHERE hd~zinv_no IN @s_ti
    AND   hd~zzproj = 'BIBIYANA SOUTH'.
*    AND   ekpo~werks IN @s_werks.
  IF sy-subrc = 0.

    DATA(it_bsh) = it_bsi[].
    SORT it_bsh BY hd-zzinvoice.
    DELETE ADJACENT DUPLICATES FROM it_bsh COMPARING hd-zzinvoice.
    SELECT bukrs,belnr,gjahr,budat,bldat,usnam
      FROM bkpf INTO TABLE @DATA(lt_dtchk)
      FOR ALL ENTRIES IN @it_bsh
      WHERE bukrs = '1000' AND belnr = @it_bsh-hd-fobbelnr AND bldat IN @s_budat AND stblg = ' '.

    LOOP AT it_bsh INTO DATA(wa_bsh).
      READ TABLE lt_dtchk INTO DATA(ls_dtchk) WITH KEY bukrs = '1000' belnr = wa_bsh-hd-fobbelnr.
      IF sy-subrc = 0.
        ls_irn-doctype = 'RI'.
        ls_irn-trntyp = 'Regular'.
        ls_irn-rchrg = 'N'.
        ls_irn-taxsch = 'GST'.

*        ls_irn-catg = 'DEP'.
        ls_irn-no = wa_bsh-hd-zinv_no.
        CONCATENATE ls_dtchk-bldat+6(2) ls_dtchk-bldat+4(2) ls_dtchk-bldat+0(4) INTO ls_irn-dt SEPARATED BY '-'.

        SELECT a~name1
               b~gstin
               a~building
               c~bezei
               a~region
               a~post_code1
               a~country
               a~street
               a~str_suppl1
               a~str_suppl2
          FROM j_1bbranch AS b
          LEFT OUTER JOIN adrc AS a ON b~adrnr = a~addrnumber
          INNER JOIN t005u AS c ON a~region = c~bland AND c~land1 = 'IN' AND c~spras = 'E'
          INTO (ls_irn-strdnm,ls_irn-sgstin,ls_irn-sbnm,ls_irn-sloc,ls_irn-sstcd,ls_irn-spin,ls_irn-cntcd,lv_street,lv_str_suppl2,lv_str_suppl2)
          WHERE bukrs = '1000'
          AND   branch = '1000'.
        ENDSELECT.
        CONCATENATE lv_street lv_str_suppl2 lv_str_suppl2 INTO ls_irn-sbnm SEPARATED BY space.
        CLEAR : lv_street,lv_str_suppl2,lv_str_suppl2.
        IF sy-sysid = 'SED' OR sy-sysid = 'SEQ'.
          CONDENSE : ls_irn-sstcd.
          SELECT gstin UP TO 1 ROWS
            FROM zeinv_gstin
            INTO ls_irn-sgstin
            WHERE zregio = ls_irn-sstcd.
          ENDSELECT.
        ENDIF.
        ls_irn-usergstin = ls_irn-sgstin.

        ls_irn-btrdnm = 'Directorate of Finance'.
        ls_irn-bbnm   = 'BANGLADESH POWER DEVELOPMENT BOARD, BIDDUT BHABAN (6TH FLOOR), 1,ABDUL GANI ROAD, DHAKA, BANGLADESH,BIN NO. 19011037513'.
        ls_irn-bstcd  = '96'.
        ls_irn-bloc   = 'BANGLADESH'.
        ls_irn-pos    = '96'.
        ls_irn-bpin   = '999999'.
        ls_irn-bgstin = 'URP'.

*        SELECT a~stcd3 a~name1 b~bezei a~regio a~pstlz
*          UP TO 1 ROWS
*          FROM lfa1 AS a
*          INNER JOIN t005u AS b ON a~regio = b~bland AND b~land1 = 'IN' AND b~spras = 'E'
*          INTO (ls_irn-bgstin,ls_irn-btrdnm,ls_irn-bloc,ls_irn-bstcd,ls_irn-bpin)
*          WHERE lifnr = wa_bsh-it-zzvendor.
*        ENDSELECT.

        ls_irn-pos = ls_irn-bstcd.

        IF ls_irn-dgstin IS INITIAL.
          ls_irn-dgstin = 'null'.
        ENDIF.
        IF ls_irn-dtrdnm IS INITIAL.
          ls_irn-dtrdnm = 'null'.
        ENDIF.
        IF ls_irn-dloc IS INITIAL.
          ls_irn-dloc = 'null'.
        ENDIF.
        IF ls_irn-dstcd IS INITIAL.
          ls_irn-dstcd = 'null'.
        ENDIF.
        IF ls_irn-dpin IS INITIAL.
          ls_irn-dpin = 'null'.
        ENDIF.
        IF ls_irn-togstin IS INITIAL.
          ls_irn-togstin = 'null'.
        ENDIF.
        IF ls_irn-totrd_nm IS INITIAL.
          ls_irn-totrd_nm = 'null'.
        ENDIF.
        IF ls_irn-toloc IS INITIAL.
          ls_irn-toloc = 'null'.
        ENDIF.
        IF ls_irn-tostcd IS INITIAL.
          ls_irn-tostcd = 'null'.
        ENDIF.
        IF ls_irn-topin IS INITIAL.
          ls_irn-topin = 'null'.
        ENDIF.

        CLEAR: lv_tottxval, lv_totiamt, lv_totcamt, lv_totsamt,lv_srno.
        LOOP AT it_bsi INTO DATA(wa_bsi) WHERE it-zzinvoice = wa_bsh-hd-zzinvoice.
          IF sy-tabix = 1.
            SELECT MAX( serial_no ) FROM zfi_export_itm_s
              INTO lv_srno WHERE zzinvoice = wa_bsh-hd-zzinvoice.
            IF wa_bsi-hd-zfreight IS NOT INITIAL.
              lv_srno = lv_srno + 1.
              ls_item-no = wa_bsi-hd-zinv_no.
              ls_item-prdnm = 'Freight'.
              ls_item-prddesc = 'Freight'.
              ls_item-num = lv_srno.
              ls_item-qty  = '1'.
              SELECT einvuom UP TO 1 ROWS
                FROM zeinv_uom
                INTO ls_item-unit WHERE sapuom = wa_bsi-it-uom.
              ENDSELECT.
              ls_item-hsncd = wa_bsi-it-hscode.
              IF wa_bsi-hd-waers = 'USD'.
                ls_item-sval = wa_bsi-hd-zfreight * wa_bsi-hd-fobtoinr.
                ls_item-unitprice = wa_bsi-hd-zfreight * wa_bsi-hd-fobtoinr.
                ls_item-txval = wa_bsi-hd-zfreight * wa_bsi-hd-fobtoinr.
              ELSE.
                ls_item-sval = wa_bsi-hd-zfreight * wa_bsi-hd-nonfobtoinr.
                ls_item-unitprice = wa_bsi-hd-zfreight * wa_bsi-hd-nonfobtoinr.
                ls_item-txval = wa_bsi-hd-zfreight * wa_bsi-hd-nonfobtoinr.
              ENDIF.


              lv_tottxval = lv_tottxval + ls_item-txval.

              ls_irn-ntr = 'INTER'.

              IF wa_bsi-it-igstv IS NOT INITIAL.
                ls_irn-catg = 'EXWP'.
                ls_item-irt = wa_bsi-it-igstp.
                ls_item-iamt = ( ls_item-txval * wa_bsi-it-igstp ) / 100.
                lv_totiamt = lv_totiamt + ls_item-iamt.
              ELSE.
                ls_irn-catg = 'EXWOP'.
              ENDIF.

              ls_item-itmval = ls_item-sval + ls_item-iamt + ls_item-camt + ls_item-samt.

              CONDENSE: ls_item-no,
                        ls_item-prdnm,
                        ls_item-hsncd,
                        ls_item-qty,
                        ls_item-unit,
                        ls_item-unitprice,
                        ls_item-itmval,
                        ls_item-sval,
                        ls_item-txval,
                        ls_item-crt,
                        ls_item-srt,
                        ls_item-irt,
                        ls_item-iamt,
                        ls_item-camt,
                        ls_item-samt.
              IF ls_item-irt IS INITIAL.
                ls_item-irt = '0'.
              ENDIF.
              IF ls_item-crt IS INITIAL.
                ls_item-crt = '0'.
              ENDIF.
              IF ls_item-srt IS INITIAL.
                ls_item-srt = '0'.
              ENDIF.
              IF ls_item-iamt IS INITIAL.
                ls_item-iamt = '0'.
              ENDIF.
              IF ls_item-camt IS INITIAL.
                ls_item-camt = '0'.
              ENDIF.
              IF ls_item-samt IS INITIAL.
                ls_item-samt = '0'.
              ENDIF.
              IF ls_item-othchrg IS INITIAL.
                ls_item-othchrg = '0'.
              ENDIF.
              APPEND ls_item TO lt_item.
              CLEAR : ls_item.
            ENDIF.

            IF wa_bsi-hd-zins IS NOT INITIAL.
              lv_srno = lv_srno + 1.
              ls_item-no = wa_bsi-hd-zinv_no.
              ls_item-prdnm = 'Insurance'.
              ls_item-prddesc = 'Insurance'.
              ls_item-num = lv_srno.
              ls_item-qty  = '1'.
              SELECT einvuom UP TO 1 ROWS
                FROM zeinv_uom
                INTO ls_item-unit WHERE sapuom = wa_bsi-it-uom.
              ENDSELECT.
              ls_item-hsncd = wa_bsi-it-hscode.
              IF wa_bsi-hd-waers = 'USD'.
                ls_item-sval = wa_bsi-hd-zins * wa_bsi-hd-nonfobtoinr.
                ls_item-unitprice = wa_bsi-hd-zins * wa_bsi-hd-nonfobtoinr.
                ls_item-txval = wa_bsi-hd-zins * wa_bsi-hd-nonfobtoinr.
              ELSE.
                ls_item-sval = wa_bsi-hd-zins * wa_bsi-hd-fobtoinr.
                ls_item-unitprice = wa_bsi-hd-zins * wa_bsi-hd-fobtoinr.
                ls_item-txval = wa_bsi-hd-zins * wa_bsi-hd-fobtoinr.
              ENDIF.


              lv_tottxval = lv_tottxval + ls_item-txval.

              ls_irn-ntr = 'INTER'.

              IF wa_bsi-it-igstv IS NOT INITIAL.
                ls_irn-catg = 'EXWP'.
                ls_item-irt = wa_bsi-it-igstp.
                ls_item-iamt = ( ls_item-txval * wa_bsi-it-igstp ) / 100.
                lv_totiamt = lv_totiamt + ls_item-iamt.
              ELSE.
                ls_irn-catg = 'EXWOP'.
              ENDIF.

              ls_item-itmval = ls_item-sval + ls_item-iamt + ls_item-camt + ls_item-samt.

              CONDENSE: ls_item-no,
                        ls_item-prdnm,
                        ls_item-hsncd,
                        ls_item-qty,
                        ls_item-unit,
                        ls_item-unitprice,
                        ls_item-itmval,
                        ls_item-sval,
                        ls_item-txval,
                        ls_item-crt,
                        ls_item-srt,
                        ls_item-irt,
                        ls_item-iamt,
                        ls_item-camt,
                        ls_item-samt.
              IF ls_item-irt IS INITIAL.
                ls_item-irt = '0'.
              ENDIF.
              IF ls_item-crt IS INITIAL.
                ls_item-crt = '0'.
              ENDIF.
              IF ls_item-srt IS INITIAL.
                ls_item-srt = '0'.
              ENDIF.
              IF ls_item-iamt IS INITIAL.
                ls_item-iamt = '0'.
              ENDIF.
              IF ls_item-camt IS INITIAL.
                ls_item-camt = '0'.
              ENDIF.
              IF ls_item-samt IS INITIAL.
                ls_item-samt = '0'.
              ENDIF.
              IF ls_item-othchrg IS INITIAL.
                ls_item-othchrg = '0'.
              ENDIF.
              APPEND ls_item TO lt_item.
              CLEAR : ls_item.
            ENDIF.
          ENDIF.

          ls_item-no = wa_bsi-hd-zinv_no.

          ls_item-prdnm = wa_bsi-it-zzmatdesc.
          ls_item-prddesc = wa_bsi-it-zzmatdesc.
          REPLACE ALL OCCURRENCES OF ',' IN ls_item-prdnm WITH space.

          ls_item-hsncd = wa_bsi-it-hscode.

          ls_item-num = wa_bsi-it-serial_no.
          ls_item-qty  = wa_bsi-it-qty.

          SELECT einvuom UP TO 1 ROWS
            FROM zeinv_uom
            INTO ls_item-unit WHERE sapuom = wa_bsi-it-uom.
          ENDSELECT.

          ls_item-sval = wa_bsi-it-amount * wa_bsi-hd-fobtoinr.
          ls_item-unitprice = wa_bsi-it-rate * wa_bsi-hd-fobtoinr.
          ls_item-txval = wa_bsi-it-amount * wa_bsi-hd-fobtoinr.
          lv_tottxval = lv_tottxval + ls_item-txval.

          ls_irn-ntr = 'INTER'.

          IF wa_bsi-it-igstv IS NOT INITIAL.
            ls_irn-catg = 'EXWP'.
            ls_item-irt = wa_bsi-it-igstp.
            ls_item-iamt = ( ls_item-txval * wa_bsi-it-igstp ) / 100.
            lv_totiamt = lv_totiamt + ls_item-iamt.
          ELSE.
            ls_irn-catg = 'EXWOP'.
          ENDIF.


          ls_item-itmval = ls_item-sval + ls_item-iamt + ls_item-camt + ls_item-samt.

          CONDENSE: ls_item-no,
                    ls_item-prdnm,
                    ls_item-prddesc,
                    ls_item-hsncd,
                    ls_item-qty,
                    ls_item-unit,
                    ls_item-unitprice,
                    ls_item-itmval,
                    ls_item-sval,
                    ls_item-txval,
                    ls_item-crt,
                    ls_item-srt,
                    ls_item-irt,
                    ls_item-iamt,
                    ls_item-camt,
                    ls_item-samt.
          IF ls_item-irt IS INITIAL.
            ls_item-irt = '0'.
          ENDIF.
          IF ls_item-crt IS INITIAL.
            ls_item-crt = '0'.
          ENDIF.
          IF ls_item-srt IS INITIAL.
            ls_item-srt = '0'.
          ENDIF.
          IF ls_item-iamt IS INITIAL.
            ls_item-iamt = '0'.
          ENDIF.
          IF ls_item-camt IS INITIAL.
            ls_item-camt = '0'.
          ENDIF.
          IF ls_item-samt IS INITIAL.
            ls_item-samt = '0'.
          ENDIF.
          IF ls_item-othchrg IS INITIAL.
            ls_item-othchrg = '0'.
          ENDIF.
          APPEND ls_item TO lt_item.
          CLEAR : ls_item.
        ENDLOOP.

        ls_irn-itemlist = lt_item[].

        ls_irn-tottxval = lv_tottxval.
        ls_irn-totiamt = lv_totiamt.
        ls_irn-totcamt = lv_totcamt.
        ls_irn-totsamt = lv_totsamt.
        ls_irn-totinvval = ls_irn-tottxval + ls_irn-totiamt + ls_irn-totcamt + ls_irn-totsamt.

        CONDENSE : ls_irn-forcur,ls_irn-ntr.

        IF ls_irn-forcur IS INITIAL.
          ls_irn-forcur = 'null'.
        ENDIF.
        IF ls_irn-invforcur IS INITIAL.
          ls_irn-invforcur = '0'.
        ENDIF.
        IF ls_irn-totothchrg IS INITIAL.
          ls_irn-totothchrg = '0'.
        ENDIF.
        IF ls_irn-totiamt IS INITIAL.
          ls_irn-totiamt = '0'.
        ENDIF.
        IF ls_irn-totcamt IS INITIAL.
          ls_irn-totcamt = '0'.
        ENDIF.
        IF ls_irn-totsamt IS INITIAL.
          ls_irn-totsamt = '0'.
        ENDIF.
        ls_irn-gen9 = 'Export Invoice' .                        "ad by akshay_D-117834
        CONDENSE: ls_irn-doctype, ls_irn-catg, ls_irn-trntyp, ls_irn-no, ls_irn-rchrg, ls_irn-sgstin, ls_irn-strdnm,
                  ls_irn-sloc, ls_irn-sstcd, ls_irn-spin, ls_irn-bgstin, ls_irn-btrdnm, ls_irn-bloc,
                  ls_irn-bstcd, ls_irn-bpin, ls_irn-togstin, ls_irn-totrd_nm,ls_irn-toloc,
                  ls_irn-tostcd, ls_irn-topin, ls_irn-taxsch, ls_irn-totinvval, ls_irn-tottxval,
                  ls_irn-totcamt, ls_irn-totsamt, ls_irn-totiamt,ls_irn-gen9.
        APPEND ls_irn TO lt_irn.

        ls_einv_master-bukrs = ls_dtchk-bukrs.
        IF wa_bsh-ekpo-werks IS NOT INITIAL.
          ls_einv_master-werks = wa_bsh-ekpo-werks.
        ELSE.
          ls_einv_master-werks = '1061'.
        ENDIF.
        ls_einv_master-region = ls_irn-bstcd.
        ls_einv_master-invoice_no = wa_bsh-hd-zinv_no.
        ls_einv_master-user_gstin = ls_irn-sgstin.
        ls_einv_master-zmodule = 'FI'.
        ls_einv_master-sap_doc = ls_dtchk-belnr.
        ls_einv_master-creation_date = ls_dtchk-bldat.
        ls_einv_master-gjahr = ls_dtchk-gjahr.
        CONDENSE: ls_einv_master-bukrs, ls_einv_master-werks, ls_einv_master-region,
                  ls_einv_master-invoice_no, ls_einv_master-zmodule, ls_einv_master-sap_doc.
        APPEND ls_einv_master TO lt_einv_master.
        CLEAR : ls_einv_master.
        CLEAR : lv_count,ls_irn.
        REFRESH : lt_item,ls_irn-itemlist.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_OMAN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_oman .
  SELECT *
    FROM zexim_oman_hdr AS hd
    INNER JOIN zexim_oman_itm AS it ON hd~zzinvoice = it~zzinvoice AND it~header_desc = @space
    INNER JOIN ekpo ON ekpo~ebeln = it~ebeln AND ekpo~ebelp = it~ebelp
    INTO TABLE @DATA(it_bsi)
    WHERE hd~zinv_no IN @s_ti
    AND   ekpo~werks IN @s_werks.

  IF sy-subrc = 0.
    DATA(it_bsh) = it_bsi[].
    SORT it_bsh BY hd-zzinvoice.
    DELETE ADJACENT DUPLICATES FROM it_bsh COMPARING hd-zzinvoice.
    SELECT bukrs,belnr,gjahr,budat,bldat,usnam
      FROM bkpf INTO TABLE @DATA(lt_dtchk)
      FOR ALL ENTRIES IN @it_bsh
      WHERE bukrs = '1000' AND belnr = @it_bsh-hd-fobbelnr AND bldat IN @s_budat AND stblg = ' '.

    LOOP AT it_bsh INTO DATA(wa_bsh).
      READ TABLE lt_dtchk INTO DATA(ls_dtchk) WITH KEY bukrs = '1000' belnr = wa_bsh-hd-fobbelnr.
      IF sy-subrc = 0.
        ls_irn-doctype = 'RI'.
        ls_irn-trntyp = 'Regular'.
        ls_irn-rchrg = 'N'.
        ls_irn-strdnm = 'Larsen & Toubro Limited - Power IC'.
        ls_irn-taxsch = 'GST'.

        ls_irn-no = wa_bsh-hd-zinv_no.
        CONCATENATE ls_dtchk-bldat+6(2) ls_dtchk-bldat+4(2) ls_dtchk-bldat+0(4) INTO ls_irn-dt SEPARATED BY '-'.

        SELECT b~gstin
               a~building
               c~bezei
               a~region
               a~post_code1
               a~country
               a~street
               a~str_suppl1
               a~str_suppl2
          FROM j_1bbranch AS b
          LEFT OUTER JOIN adrc AS a ON b~adrnr = a~addrnumber
          INNER JOIN t005u AS c ON a~region = c~bland AND c~land1 = 'IN' AND c~spras = 'E'
          INTO (ls_irn-sgstin,ls_irn-sbnm,ls_irn-sloc,ls_irn-sstcd,ls_irn-spin,ls_irn-cntcd,lv_street,lv_str_suppl2,lv_str_suppl2)
          WHERE bukrs = '1000'
          AND   branch = '1000'.
        ENDSELECT.
        CONCATENATE lv_street lv_str_suppl2 lv_str_suppl2 INTO ls_irn-sbnm SEPARATED BY space.
        CLEAR : lv_street,lv_str_suppl2,lv_str_suppl2.
        IF sy-sysid = 'SED' OR sy-sysid = 'SEQ'.
          CONDENSE : ls_irn-sstcd.
          SELECT gstin UP TO 1 ROWS
            FROM zeinv_gstin
            INTO ls_irn-sgstin
            WHERE zregio = ls_irn-sstcd.
          ENDSELECT.
        ENDIF.
        ls_irn-usergstin = ls_irn-sgstin.

        ls_irn-btrdnm = 'PETROFAC E&C OMAN LLC'.
        ls_irn-bbnm   = 'FOR AND ON BEHALF OF PETROLEUM DEVELOPMENT OMAN,P.O BOX: 110, P.C: 136, GHALA, MUSCAT,SULTANATE OF OMAN'.
        ls_irn-bstcd  = '96'.
        ls_irn-bloc   = 'OMAN'.
        ls_irn-pos    = '96'.
        ls_irn-bpin   = '999999'.
        ls_irn-bgstin = 'URP'.

*        SELECT a~stcd3 a~name1 b~bezei a~regio a~pstlz
*          UP TO 1 ROWS
*          FROM lfa1 AS a
*          INNER JOIN t005u AS b ON a~regio = b~bland AND b~land1 = 'IN' AND b~spras = 'E'
*          INTO (ls_irn-bgstin,ls_irn-btrdnm,ls_irn-bloc,ls_irn-bstcd,ls_irn-bpin)
*          WHERE lifnr = wa_bsh-it-zzvendor.
*        ENDSELECT.

        ls_irn-pos = ls_irn-bstcd.

        IF ls_irn-dgstin IS INITIAL.
          ls_irn-dgstin = 'null'.
        ENDIF.
        IF ls_irn-dtrdnm IS INITIAL.
          ls_irn-dtrdnm = 'null'.
        ENDIF.
        IF ls_irn-dloc IS INITIAL.
          ls_irn-dloc = 'null'.
        ENDIF.
        IF ls_irn-dstcd IS INITIAL.
          ls_irn-dstcd = 'null'.
        ENDIF.
        IF ls_irn-dpin IS INITIAL.
          ls_irn-dpin = 'null'.
        ENDIF.
        IF ls_irn-togstin IS INITIAL.
          ls_irn-togstin = 'null'.
        ENDIF.
        IF ls_irn-totrd_nm IS INITIAL.
          ls_irn-totrd_nm = 'null'.
        ENDIF.
        IF ls_irn-toloc IS INITIAL.
          ls_irn-toloc = 'null'.
        ENDIF.
        IF ls_irn-tostcd IS INITIAL.
          ls_irn-tostcd = 'null'.
        ENDIF.
        IF ls_irn-topin IS INITIAL.
          ls_irn-topin = 'null'.
        ENDIF.

        CLEAR: lv_tottxval, lv_totiamt, lv_totcamt, lv_totsamt,lv_srno.
        LOOP AT it_bsi INTO DATA(wa_bsi) WHERE it-zzinvoice = wa_bsh-hd-zzinvoice.
          IF sy-tabix = 1.
            SELECT MAX( serial_no ) FROM zfi_export_itm_s
              INTO lv_srno WHERE zzinvoice = wa_bsh-hd-zzinvoice.
            IF wa_bsi-hd-zfreight IS NOT INITIAL.
              lv_srno = lv_srno + 1.
              ls_item-no = wa_bsi-hd-zinv_no.
              ls_item-prdnm = 'Freight'.
              ls_item-prddesc = 'Freight'.
              ls_item-num = lv_srno.
              ls_item-qty  = '1'.
              SELECT einvuom UP TO 1 ROWS
                FROM zeinv_uom
                INTO ls_item-unit WHERE sapuom = wa_bsi-it-uom.
              ENDSELECT.
              ls_item-hsncd = wa_bsi-it-hscode.
              IF wa_bsi-hd-waers = 'USD'.
                ls_item-sval = wa_bsi-hd-zfreight * wa_bsi-hd-fobtoinr.
                ls_item-unitprice = wa_bsi-hd-zfreight * wa_bsi-hd-fobtoinr.
                ls_item-txval = wa_bsi-hd-zfreight * wa_bsi-hd-fobtoinr.
              ELSE.
                ls_item-sval = wa_bsi-hd-zfreight * wa_bsi-hd-fobtoinr.
                ls_item-unitprice = wa_bsi-hd-zfreight * wa_bsi-hd-fobtoinr.
                ls_item-txval = wa_bsi-hd-zfreight * wa_bsi-hd-fobtoinr.
              ENDIF.


              lv_tottxval = lv_tottxval + ls_item-txval.

              ls_irn-ntr = 'INTER'.

              IF wa_bsi-it-igstv IS NOT INITIAL.
                ls_irn-catg = 'EXWP'.
                ls_item-irt = wa_bsi-it-igstp.
                ls_item-iamt = ( ls_item-txval * wa_bsi-it-igstp ) / 100.
                lv_totiamt = lv_totiamt + ls_item-iamt.
              ELSE.
                ls_irn-catg = 'EXWOP'.
              ENDIF.

              ls_item-itmval = ls_item-sval + ls_item-iamt + ls_item-camt + ls_item-samt.

              CONDENSE: ls_item-no,
                        ls_item-prdnm,
                        ls_item-hsncd,
                        ls_item-qty,
                        ls_item-unit,
                        ls_item-unitprice,
                        ls_item-itmval,
                        ls_item-sval,
                        ls_item-txval,
                        ls_item-crt,
                        ls_item-srt,
                        ls_item-irt,
                        ls_item-iamt,
                        ls_item-camt,
                        ls_item-samt.
              IF ls_item-irt IS INITIAL.
                ls_item-irt = '0'.
              ENDIF.
              IF ls_item-crt IS INITIAL.
                ls_item-crt = '0'.
              ENDIF.
              IF ls_item-srt IS INITIAL.
                ls_item-srt = '0'.
              ENDIF.
              IF ls_item-iamt IS INITIAL.
                ls_item-iamt = '0'.
              ENDIF.
              IF ls_item-camt IS INITIAL.
                ls_item-camt = '0'.
              ENDIF.
              IF ls_item-samt IS INITIAL.
                ls_item-samt = '0'.
              ENDIF.
              IF ls_item-othchrg IS INITIAL.
                ls_item-othchrg = '0'.
              ENDIF.
              APPEND ls_item TO lt_item.
              CLEAR : ls_item.
            ENDIF.

            IF wa_bsi-hd-zins IS NOT INITIAL.
              lv_srno = lv_srno + 1.
              ls_item-no = wa_bsi-hd-zinv_no.
              ls_item-prdnm = 'Insurance'.
              ls_item-prddesc = 'Insurance'.
              ls_item-num = lv_srno.
              ls_item-qty  = '1'.
              SELECT einvuom UP TO 1 ROWS
                FROM zeinv_uom
                INTO ls_item-unit WHERE sapuom = wa_bsi-it-uom.
              ENDSELECT.
              ls_item-hsncd = wa_bsi-it-hscode.
              IF wa_bsi-hd-waers = 'USD'.
                ls_item-sval = wa_bsi-hd-zins * wa_bsi-hd-fobtoinr.
                ls_item-unitprice = wa_bsi-hd-zins * wa_bsi-hd-fobtoinr.
                ls_item-txval = wa_bsi-hd-zins * wa_bsi-hd-fobtoinr.
              ELSE.
                ls_item-sval = wa_bsi-hd-zins * wa_bsi-hd-fobtoinr.
                ls_item-unitprice = wa_bsi-hd-zins * wa_bsi-hd-fobtoinr.
                ls_item-txval = wa_bsi-hd-zins * wa_bsi-hd-fobtoinr.
              ENDIF.


              lv_tottxval = lv_tottxval + ls_item-txval.

              ls_irn-ntr = 'INTER'.

              IF wa_bsi-it-igstv IS NOT INITIAL.
                ls_irn-catg = 'EXWP'.
                ls_item-irt = wa_bsi-it-igstp.
                ls_item-iamt = ( ls_item-txval * wa_bsi-it-igstp ) / 100.
                lv_totiamt = lv_totiamt + ls_item-iamt.
              ELSE.
                ls_irn-catg = 'EXWOP'.
              ENDIF.

              ls_item-itmval = ls_item-sval + ls_item-iamt + ls_item-camt + ls_item-samt.

              CONDENSE: ls_item-no,
                        ls_item-prdnm,
                        ls_item-hsncd,
                        ls_item-qty,
                        ls_item-unit,
                        ls_item-unitprice,
                        ls_item-itmval,
                        ls_item-sval,
                        ls_item-txval,
                        ls_item-crt,
                        ls_item-srt,
                        ls_item-irt,
                        ls_item-iamt,
                        ls_item-camt,
                        ls_item-samt.
              IF ls_item-irt IS INITIAL.
                ls_item-irt = '0'.
              ENDIF.
              IF ls_item-crt IS INITIAL.
                ls_item-crt = '0'.
              ENDIF.
              IF ls_item-srt IS INITIAL.
                ls_item-srt = '0'.
              ENDIF.
              IF ls_item-iamt IS INITIAL.
                ls_item-iamt = '0'.
              ENDIF.
              IF ls_item-camt IS INITIAL.
                ls_item-camt = '0'.
              ENDIF.
              IF ls_item-samt IS INITIAL.
                ls_item-samt = '0'.
              ENDIF.
              IF ls_item-othchrg IS INITIAL.
                ls_item-othchrg = '0'.
              ENDIF.
              APPEND ls_item TO lt_item.
              CLEAR : ls_item.
            ENDIF.
          ENDIF.

          ls_item-no = wa_bsi-hd-zinv_no.

          ls_item-prdnm = wa_bsi-it-zzmatdesc.
          ls_item-prddesc = wa_bsi-it-zzmatdesc.
          REPLACE ALL OCCURRENCES OF ',' IN ls_item-prdnm WITH space.

          ls_item-hsncd = wa_bsi-it-hscode.

          ls_item-num = wa_bsi-it-serial_no.
          ls_item-qty  = wa_bsi-it-qty.

          SELECT einvuom UP TO 1 ROWS
            FROM zeinv_uom
            INTO ls_item-unit WHERE sapuom = wa_bsi-it-uom.
          ENDSELECT.

          ls_item-sval = wa_bsi-it-amount * wa_bsi-hd-fobtoinr.
          ls_item-unitprice = wa_bsi-it-rate * wa_bsi-hd-fobtoinr.
          ls_item-txval = wa_bsi-it-amount * wa_bsi-hd-fobtoinr.
          lv_tottxval = lv_tottxval + ls_item-txval.

          ls_irn-ntr = 'INTER'.

          IF wa_bsi-it-igstv IS NOT INITIAL.
            ls_irn-catg = 'EXWP'.
            ls_item-irt = wa_bsi-it-igstp.
            ls_item-iamt = ( ls_item-txval * wa_bsi-it-igstp ) / 100.
            lv_totiamt = lv_totiamt + ls_item-iamt.
          ELSE.
            ls_irn-catg = 'EXWOP'.
          ENDIF.


          ls_item-itmval = ls_item-sval + ls_item-iamt + ls_item-camt + ls_item-samt.

          CONDENSE: ls_item-no,
                    ls_item-prdnm,
                    ls_item-prddesc,
                    ls_item-hsncd,
                    ls_item-qty,
                    ls_item-unit,
                    ls_item-unitprice,
                    ls_item-itmval,
                    ls_item-sval,
                    ls_item-txval,
                    ls_item-crt,
                    ls_item-srt,
                    ls_item-irt,
                    ls_item-iamt,
                    ls_item-camt,
                    ls_item-samt.
          IF ls_item-irt IS INITIAL.
            ls_item-irt = '0'.
          ENDIF.
          IF ls_item-crt IS INITIAL.
            ls_item-crt = '0'.
          ENDIF.
          IF ls_item-srt IS INITIAL.
            ls_item-srt = '0'.
          ENDIF.
          IF ls_item-iamt IS INITIAL.
            ls_item-iamt = '0'.
          ENDIF.
          IF ls_item-camt IS INITIAL.
            ls_item-camt = '0'.
          ENDIF.
          IF ls_item-samt IS INITIAL.
            ls_item-samt = '0'.
          ENDIF.
          IF ls_item-othchrg IS INITIAL.
            ls_item-othchrg = '0'.
          ENDIF.
          APPEND ls_item TO lt_item.
          CLEAR : ls_item.
        ENDLOOP.

        ls_irn-itemlist = lt_item[].

        ls_irn-tottxval = lv_tottxval.
        ls_irn-totiamt = lv_totiamt.
        ls_irn-totcamt = lv_totcamt.
        ls_irn-totsamt = lv_totsamt.
        ls_irn-totinvval = ls_irn-tottxval + ls_irn-totiamt + ls_irn-totcamt + ls_irn-totsamt.

        CONDENSE : ls_irn-forcur,ls_irn-ntr.

        IF ls_irn-forcur IS INITIAL.
          ls_irn-forcur = 'null'.
        ENDIF.
        IF ls_irn-invforcur IS INITIAL.
          ls_irn-invforcur = '0'.
        ENDIF.
        IF ls_irn-totothchrg IS INITIAL.
          ls_irn-totothchrg = '0'.
        ENDIF.
        IF ls_irn-totiamt IS INITIAL.
          ls_irn-totiamt = '0'.
        ENDIF.
        IF ls_irn-totcamt IS INITIAL.
          ls_irn-totcamt = '0'.
        ENDIF.
        IF ls_irn-totsamt IS INITIAL.
          ls_irn-totsamt = '0'.
        ENDIF.
        ls_irn-gen9 = 'Export Invoice' .                                        "ad by akshay_D-117834
        CONDENSE: ls_irn-doctype, ls_irn-catg, ls_irn-trntyp, ls_irn-no, ls_irn-rchrg, ls_irn-sgstin, ls_irn-strdnm,
                  ls_irn-sloc, ls_irn-sstcd, ls_irn-spin, ls_irn-bgstin, ls_irn-btrdnm, ls_irn-bloc,
                  ls_irn-bstcd, ls_irn-bpin, ls_irn-togstin, ls_irn-totrd_nm,ls_irn-toloc,
                  ls_irn-tostcd, ls_irn-topin, ls_irn-taxsch, ls_irn-totinvval, ls_irn-tottxval,
                  ls_irn-totcamt, ls_irn-totsamt, ls_irn-totiamt,ls_irn-gen9.
        APPEND ls_irn TO lt_irn.

        ls_einv_master-bukrs = ls_dtchk-bukrs.
        ls_einv_master-werks = wa_bsh-ekpo-werks.
        ls_einv_master-region = ls_irn-bstcd.
        ls_einv_master-invoice_no = wa_bsh-hd-zinv_no.
        ls_einv_master-user_gstin = ls_irn-sgstin.
        ls_einv_master-zmodule = 'FI'.
        ls_einv_master-sap_doc = ls_dtchk-belnr.
        ls_einv_master-creation_date = ls_dtchk-bldat.
        ls_einv_master-gjahr = ls_dtchk-gjahr.
        CONDENSE: ls_einv_master-bukrs, ls_einv_master-werks, ls_einv_master-region,
                  ls_einv_master-invoice_no, ls_einv_master-zmodule, ls_einv_master-sap_doc.
        APPEND ls_einv_master TO lt_einv_master.
        CLEAR : ls_einv_master.
        CLEAR : lv_count,ls_irn.
        REFRESH : lt_item,ls_irn-itemlist.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_INV_WOCUST
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_inv_wocust .


  SELECT *
    FROM zfi_wo_custco_ti
    INTO TABLE @DATA(it_wci)
    WHERE bukrs = '1000'
    AND   zfi_tax_inv IN @s_ti
    AND   werks IN @s_werks.
  IF sy-subrc = 0.

    DATA(it_wch) = it_wci[].
    SORT it_wch BY belnr gjahr.
    DELETE ADJACENT DUPLICATES FROM it_wch COMPARING belnr gjahr.

    IF it_wch[] IS NOT INITIAL.
      SELECT bukrs,belnr,gjahr,budat,bldat,usnam
        FROM bkpf INTO TABLE @DATA(lt_dtchk)
        FOR ALL ENTRIES IN @it_wci
        WHERE bukrs = @it_wci-bukrs AND belnr = @it_wci-belnr AND bldat IN @s_budat AND stblg = ' '.
      IF lt_dtchk[] IS NOT INITIAL.
        SELECT bukrs,
               belnr,
               gjahr,
               lifnr,
               kunnr,
               bupla,
               werks,
               koart
          FROM bseg
          INTO TABLE @DATA(it_bg)
          FOR ALL ENTRIES IN @lt_dtchk
          WHERE bukrs = @lt_dtchk-bukrs
          AND   belnr = @lt_dtchk-belnr
          AND   gjahr = @lt_dtchk-gjahr
          AND ( koart = 'D'
          OR    koart = 'K' ).
      ENDIF.

      SELECT a~werks,
             a~name1,
             a~regio,
             a~pstlz,
             a~stras,
             a~land1,
             b~gstin,
             c~bezei,
             p~street,
             p~str_suppl1,
             p~str_suppl2
        FROM t001w AS a
        INNER JOIN j_1bbranch AS b ON a~j_1bbranch = b~branch AND b~bukrs = '1000'
        INNER JOIN t005u AS c ON a~regio = c~bland AND c~land1 = 'IN' AND c~spras = 'E'
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO TABLE @DATA(it_wk)
        FOR ALL ENTRIES IN @it_wch
        WHERE a~werks = @it_wch-werks.
    ENDIF.

    LOOP AT it_wch INTO DATA(wa_wch).
      READ TABLE lt_dtchk INTO DATA(ls_dtchk) WITH KEY bukrs = wa_wch-bukrs belnr = wa_wch-belnr.
      IF sy-subrc = 0.
        READ TABLE it_bg INTO DATA(wa_bg) WITH KEY bukrs = ls_dtchk-bukrs belnr = ls_dtchk-belnr gjahr = ls_dtchk-gjahr koart = 'K'.
        CLEAR : show.
        IF ls_dtchk-usnam = sy-uname.
          show = 'X'.
        ELSE.
          READ TABLE lt_auth WITH KEY werks = wa_wch-werks psno = sy-uname TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            show = 'X'.
          ENDIF.
        ENDIF.
        IF show = 'X'.
          ls_irn-doctype = 'RI'.
          ls_irn-trntyp = 'Regular'.
          ls_irn-rchrg = 'N'.
          ls_irn-taxsch = 'GST'.

          IF wa_wch-zigst EQ '0.00'.
            CLEAR: flg_igst.
            ls_irn-ntr = 'INTRA'.
          ELSE.
            flg_igst = 'X'.
            ls_irn-ntr = 'INTER'.
          ENDIF.

          IF wa_bg-kunnr IS NOT INITIAL.
            SELECT gform
              UP TO 1 ROWS
              FROM kna1
              INTO @DATA(lv_gform)
              WHERE kunnr = @wa_bg-kunnr
              ORDER BY PRIMARY KEY.
            ENDSELECT.
            SELECT vtext UP TO 1 ROWS FROM tvgft INTO ls_irn-catg
              WHERE gform = lv_gform AND spras = 'E'.
            ENDSELECT.
            CLEAR : lv_gform.
          ELSE.
            ls_irn-catg = 'B2B'.
          ENDIF.

          ls_irn-no = wa_wch-zfi_tax_inv.
          CLEAR : lv_budat,lv_cpudt,lv_m1,lv_m2,date_end.
          SELECT budat
           cpudt UP TO 1 ROWS
           FROM bkpf
           INTO ( lv_budat,lv_cpudt )
           WHERE belnr = ls_dtchk-belnr
           AND bukrs EQ ls_dtchk-bukrs
           AND gjahr EQ ls_dtchk-gjahr ORDER BY budat.
          ENDSELECT.

          IF sy-subrc EQ 0.
            lv_m1 = lv_budat+4(2).
            lv_m2 = lv_cpudt+4(2).

            IF lv_m1 EQ lv_m2.
              date_end = lv_cpudt.
            ELSE.

              CALL FUNCTION 'HR_JP_MONTH_BEGIN_END_DATE'
                EXPORTING
                  iv_date           = lv_budat
                IMPORTING
                  ev_month_end_date = date_end.       " end date.
            ENDIF.
          ENDIF.
          CONCATENATE date_end+6(2) date_end+4(2) date_end+0(4) INTO ls_irn-dt SEPARATED BY '-'.

          READ TABLE it_wk INTO DATA(wa_wk) WITH KEY werks = wa_wch-werks.
          IF sy-subrc = 0.
            ls_irn-strdnm = wa_wk-name1.
            ls_irn-sgstin = wa_wk-gstin.
            ls_irn-sloc   = wa_wk-bezei.
            ls_irn-sstcd  = wa_wk-regio.
            ls_irn-spin   = wa_wk-pstlz.
            CONCATENATE wa_wk-street wa_wk-str_suppl1 wa_wk-str_suppl2 INTO ls_irn-sbnm SEPARATED BY space.
            ls_irn-cntcd  = wa_wk-land1.
            IF sy-sysid = 'SED' OR sy-sysid = 'SEQ'.
              SELECT gstin UP TO 1 ROWS
                FROM zeinv_gstin
                INTO ls_irn-sgstin
                WHERE zregio = wa_wk-regio.
              ENDSELECT.
            ENDIF.
            ls_irn-usergstin = ls_irn-sgstin.
          ENDIF.

          SELECT bezei
            UP TO 1 ROWS
            FROM t005u
            INTO ls_irn-bloc
            WHERE spras = 'E'
            AND   land1 = 'IN'
            AND   bland = wa_wch-cust_regio.
          ENDSELECT.

          ls_irn-bgstin = wa_wch-cust_gstin.
          ls_irn-btrdnm = wa_wch-cust_name.
          ls_irn-bstcd = wa_wch-cust_regio.
          ls_irn-pos = wa_wch-cust_regio.
          ls_irn-bpin = wa_wch-post_code1.
          CONCATENATE wa_wch-street wa_wch-str_suppl1 wa_wch-str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
          IF ls_irn-bbnm IS INITIAL.
            ls_irn-bbnm = ls_irn-btrdnm.
          ENDIF.
*      ls_irn-togstin = wa_wch-cust_gstin.

          IF ls_irn-dgstin IS INITIAL.
            ls_irn-dgstin = 'null'.
          ENDIF.
          IF ls_irn-dtrdnm IS INITIAL.
            ls_irn-dtrdnm = 'null'.
          ENDIF.
          IF ls_irn-dloc IS INITIAL.
            ls_irn-dloc = 'null'.
          ENDIF.
          IF ls_irn-dstcd IS INITIAL.
            ls_irn-dstcd = 'null'.
          ENDIF.
          IF ls_irn-dpin IS INITIAL.
            ls_irn-dpin = 'null'.
          ENDIF.
          IF ls_irn-togstin IS INITIAL.
            ls_irn-togstin = 'null'.
          ENDIF.
          IF ls_irn-totrd_nm IS INITIAL.
            ls_irn-totrd_nm = 'null'.
          ENDIF.
          IF ls_irn-toloc IS INITIAL.
            ls_irn-toloc = 'null'.
          ENDIF.
          IF ls_irn-tostcd IS INITIAL.
            ls_irn-tostcd = 'null'.
          ENDIF.
          IF ls_irn-topin IS INITIAL.
            ls_irn-topin = 'null'.
          ENDIF.

          CLEAR: lv_tottxval, lv_totiamt, lv_totcamt, lv_totsamt.
          LOOP AT it_wci INTO DATA(wa_wci) WHERE belnr = wa_wch-belnr.

            ls_item-no = wa_wci-zfi_tax_inv.

            ls_item-prdnm = wa_wci-item_desc.
            ls_item-prddesc = wa_wci-item_desc.
            REPLACE ALL OCCURRENCES OF ',' IN ls_item-prdnm WITH space.

            ls_item-hsncd = wa_wci-zhsn_code.

            ls_item-num = wa_wci-buzei.
            ls_item-qty  = wa_wci-menge.
            ls_item-unit = wa_wci-meins.
            ls_item-unitprice = wa_wci-rate.
            ls_item-sval = wa_wci-dmbtr.
            ls_item-txval = ls_item-sval.
            lv_tottxval = lv_tottxval + ls_item-txval.

            IF flg_igst = 'X'.
              ls_item-irt = wa_wci-zigst.
              ls_item-iamt = wa_wci-zigst_val.
              lv_totiamt = lv_totiamt + ls_item-iamt.
            ELSE.
              ls_item-crt = wa_wci-zcgst.
              ls_item-srt = wa_wci-zsgst.
              ls_item-camt = wa_wci-zcgst_val.
              ls_item-samt = wa_wci-zsgst_val.
              lv_totcamt = lv_totcamt + ls_item-camt.
              lv_totsamt = lv_totsamt + ls_item-samt.
            ENDIF.

            ls_item-itmval = ls_item-sval + ls_item-iamt + ls_item-camt + ls_item-samt.

            CONDENSE: ls_item-no,
                      ls_item-prdnm,
                      ls_item-prddesc,
                      ls_item-hsncd,
                      ls_item-qty,
                      ls_item-unit,
                      ls_item-unitprice,
                      ls_item-itmval,
                      ls_item-sval,
                      ls_item-txval,
                      ls_item-crt,
                      ls_item-srt,
                      ls_item-irt,
                      ls_item-iamt,
                      ls_item-camt,
                      ls_item-samt.
            IF ls_item-irt IS INITIAL.
              ls_item-irt = '0'.
            ENDIF.
            IF ls_item-crt IS INITIAL.
              ls_item-crt = '0'.
            ENDIF.
            IF ls_item-srt IS INITIAL.
              ls_item-srt = '0'.
            ENDIF.
            IF ls_item-iamt IS INITIAL.
              ls_item-iamt = '0'.
            ENDIF.
            IF ls_item-camt IS INITIAL.
              ls_item-camt = '0'.
            ENDIF.
            IF ls_item-samt IS INITIAL.
              ls_item-samt = '0'.
            ENDIF.
            IF ls_item-othchrg IS INITIAL.
              ls_item-othchrg = '0'.
            ENDIF.
            APPEND ls_item TO lt_item.
            CLEAR : ls_item.
          ENDLOOP.

          ls_irn-itemlist = lt_item[].

          ls_irn-tottxval = lv_tottxval.
          ls_irn-totiamt = lv_totiamt.
          ls_irn-totcamt = lv_totcamt.
          ls_irn-totsamt = lv_totsamt.
          ls_irn-totinvval = ls_irn-tottxval + ls_irn-totiamt + ls_irn-totcamt + ls_irn-totsamt.

          CONDENSE : ls_irn-forcur,ls_irn-ntr.

          IF ls_irn-forcur IS INITIAL.
            ls_irn-forcur = 'null'.
          ENDIF.
          IF ls_irn-invforcur IS INITIAL.
            ls_irn-invforcur = '0'.
          ENDIF.
          IF ls_irn-totothchrg IS INITIAL.
            ls_irn-totothchrg = '0'.
          ENDIF.
          IF ls_irn-totiamt IS INITIAL.
            ls_irn-totiamt = '0'.
          ENDIF.
          IF ls_irn-totcamt IS INITIAL.
            ls_irn-totcamt = '0'.
          ENDIF.
          IF ls_irn-totsamt IS INITIAL.
            ls_irn-totsamt = '0'.
          ENDIF.
          ls_irn-gen9 = wa_wch-ztype .                                        "ad by akshay_D-117834
          CONDENSE: ls_irn-doctype, ls_irn-catg, ls_irn-trntyp, ls_irn-no, ls_irn-rchrg, ls_irn-sgstin, ls_irn-strdnm,
                    ls_irn-sloc, ls_irn-sstcd, ls_irn-spin, ls_irn-bgstin, ls_irn-btrdnm, ls_irn-bloc,
                    ls_irn-bstcd, ls_irn-bpin, ls_irn-togstin, ls_irn-totrd_nm,ls_irn-toloc,
                    ls_irn-tostcd, ls_irn-topin, ls_irn-taxsch, ls_irn-totinvval, ls_irn-tottxval,
                    ls_irn-totcamt, ls_irn-totsamt, ls_irn-totiamt,ls_irn-gen9.
          APPEND ls_irn TO lt_irn.

          ls_einv_master-bukrs = ls_dtchk-bukrs.
          ls_einv_master-werks = wa_wch-werks.
          ls_einv_master-region = wa_wk-regio.
          ls_einv_master-invoice_no = wa_wch-zfi_tax_inv.
          ls_einv_master-user_gstin = ls_irn-sgstin.
          ls_einv_master-zmodule = 'FI'.
          ls_einv_master-sap_doc = ls_dtchk-belnr.
          ls_einv_master-creation_date = ls_dtchk-bldat.
          ls_einv_master-gjahr = ls_dtchk-gjahr.
          CONDENSE: ls_einv_master-bukrs, ls_einv_master-werks, ls_einv_master-region,
                    ls_einv_master-invoice_no, ls_einv_master-zmodule, ls_einv_master-sap_doc.
          APPEND ls_einv_master TO lt_einv_master.
          CLEAR : ls_einv_master.
          CLEAR : lv_count,ls_irn.
          REFRESH : lt_item,ls_irn-itemlist.
        ENDIF.
      ENDIF.
      CLEAR : wa_bg.
    ENDLOOP.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  GET_REPT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_rept_data .
  DATA : lv_tino TYPE zeinv_item_data-tino.

  SELECT * FROM zeinv_item_data
    INNER JOIN zeinv_head_data ON zeinv_item_data~bukrs = zeinv_head_data~bukrs AND zeinv_item_data~vbeln = zeinv_head_data~vbeln
    AND zeinv_item_data~tino = zeinv_head_data~tino
    INNER JOIN zeinv_master ON zeinv_item_data~bukrs = zeinv_master~bukrs AND zeinv_item_data~vbeln = zeinv_master~sap_doc
    AND zeinv_item_data~tino = zeinv_master~invoice_no AND zeinv_master~zmodule = 'FI'
    INTO TABLE @DATA(lt_data)
    WHERE zeinv_item_data~bukrs = '1000' AND zeinv_item_data~tino IN @s_ti AND zeinv_master~werks IN @s_werks
    AND zeinv_master~process_date IN @s_budat1 AND zeinv_master~creation_date IN @s_budat1 AND zeinv_item_data~tino <> ' '.
  IF lt_data[] IS NOT INITIAL.
    SORT lt_data BY zeinv_item_data-tino zeinv_item_data-item.
    LOOP AT lt_data ASSIGNING FIELD-SYMBOL(<ls_data>).
      IF sy-tabix = 1.
        lv_tino = <ls_data>-zeinv_item_data-tino.
      ELSE.
        IF <ls_data>-zeinv_item_data-tino = lv_tino.
          CLEAR : <ls_data>-zeinv_head_data-totiamt,<ls_data>-zeinv_head_data-totcamt,<ls_data>-zeinv_head_data-totsamt,
                  <ls_data>-zeinv_head_data-tottxval,<ls_data>-zeinv_head_data-totothchrg,<ls_data>-zeinv_head_data-totinvval.
        ELSE.
          lv_tino = <ls_data>-zeinv_item_data-tino.
        ENDIF.
      ENDIF.
    ENDLOOP.

    CLEAR xfc.
    xfc-reptext_ddic = 'CCode'.
    xfc-fieldname    = 'ZEINV_MASTER-BUKRS'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '5'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Plant'.
    xfc-fieldname    = 'ZEINV_MASTER-WERKS'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '5'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Invoice No'.
    xfc-fieldname    = 'ZEINV_MASTER-INVOICE_NO'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '20'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'SAP Doc.'.
    xfc-fieldname    = 'ZEINV_MASTER-SAP_DOC'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '10'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'IRN No.'.
    xfc-fieldname    = 'ZEINV_MASTER-IRN'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '65'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'IRN Cancelled.'.
    xfc-fieldname    = 'ZEINV_MASTER-IRN_CANC'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '15'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Ack No.'.
    xfc-fieldname    = 'ZEINV_MASTER-ACKNO'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '24'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Ack. Date'.
    xfc-fieldname    = 'ZEINV_MASTER-ACKDT'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '10'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Invoice Date'.
    xfc-fieldname    = 'ZEINV_MASTER-CREATION_DATE'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '10'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Category'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-CATG'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '10'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Transaction Typ.'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-TRNTYP'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '18'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Rev. Charge.'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-RCHRG'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '9'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Orig Ref No '.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-REFINUM'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '10'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Orig Ref Dt'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-REFIDT'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '10'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'User GSTIN'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-USERGSTIN'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '12'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Supplier Trade Name'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-STRDNM'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '30'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Supplier Legal Name'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-SLGLNM'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '30'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Supplier GSTIN'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-SGSTIN'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '12'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Supplier Address'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-SBNM'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '80'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Supplier State Code'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-SSTCD'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '15'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Supplier Location'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-SLOC'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '25'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Supplier Pin'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-SPIN'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '12'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Dispatch Trade Name'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-DTRDNM'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '30'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Dispatch Legal Name'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-DLGLNM'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '30'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Dispatch GSTIN'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-DGSTIN'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '12'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Dispatch State Code'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-DSTCD'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '15'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Dispatch Location'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-SLOC'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '25'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Dispatch Pin'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-SPIN'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '12'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Buyer Trade Name'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-BTRDNM'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '30'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Buyer Legal Name'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-BLGLNM'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '30'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Buyer GSTIN'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-BGSTIN'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '12'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Buyer Address'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-BBNM'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '80'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Buyer State Code'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-BSTCD'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '15'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Buyer Location'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-BLOC'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '25'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Buyer Pin'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-BPIN'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '12'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Shipto Trade Name'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-TOTRD_NM'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '30'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Shipto Legal Name'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-TOLGLNM'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '30'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Shipto GSTIN'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-TOGSTIN'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '12'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Shipto State Code'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-TOSTCD'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '15'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Shipto Location'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-TOLOC'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '25'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Shipto Pin'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-TOPIN'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '12'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Country Code'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-CNTCD'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '12'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Place of Supply'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-POS'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '18'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Nature of Transac.'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-NTR'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '18'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Total Other Charges'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-TOTOTHCHRG'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '15'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Total Taxable Value'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-TOTTXVAL'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '15'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Total IGST Amount'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-TOTIAMT'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '15'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Total CGST Amount'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-TOTCAMT'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '18'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Total SGST Amount'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-TOTSAMT'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '18'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Total Invoice Amount'.
    xfc-fieldname    = 'ZEINV_HEAD_DATA-TOTINVVAL'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '18'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Item'.
    xfc-fieldname    = 'ZEINV_ITEM_DATA-ITEM'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '5'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Product Desc.'.
    xfc-fieldname    = 'ZEINV_ITEM_DATA-PRDDESC'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '30'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Product Name'.
    xfc-fieldname    = 'ZEINV_ITEM_DATA-PRDNM'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '30'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'HSN/SAC.'.
    xfc-fieldname    = 'ZEINV_ITEM_DATA-HSNCD'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '15'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'UOM'.
    xfc-fieldname    = 'ZEINV_ITEM_DATA-UNIT'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '4'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Qty'.
    xfc-fieldname    = 'ZEINV_ITEM_DATA-QTY'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '12'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Unit Price.'.
    xfc-fieldname    = 'ZEINV_ITEM_DATA-UNITPRICE'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '15'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Assessable Val.'.
    xfc-fieldname    = 'ZEINV_ITEM_DATA-SVAL'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '15'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Discount'.
    xfc-fieldname    = 'ZEINV_ITEM_DATA-DISC'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '15'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Other Charges'.
    xfc-fieldname    = 'ZEINV_ITEM_DATA-OTHCHRG'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '15'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Taxable Value'.
    xfc-fieldname    = 'ZEINV_ITEM_DATA-TXVAL'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '15'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'IGST(%)'.
    xfc-fieldname    = 'ZEINV_ITEM_DATA-IRT'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '6'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'IGST Amount'.
    xfc-fieldname    = 'ZEINV_ITEM_DATA-IAMT'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '12'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'CGST(%)'.
    xfc-fieldname    = 'ZEINV_ITEM_DATA-CRT'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '6'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'CGST Amount'.
    xfc-fieldname    = 'ZEINV_ITEM_DATA-CAMT'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '12'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'SGST(%)'.
    xfc-fieldname    = 'ZEINV_ITEM_DATA-SRT'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '6'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'SGST Amount'.
    xfc-fieldname    = 'ZEINV_ITEM_DATA-SAMT'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '12'.
    APPEND xfc TO ifc.

    CLEAR xfc.
    xfc-reptext_ddic = 'Item Amount'.
    xfc-fieldname    = 'ZEINV_ITEM_DATA-ITMVAL'.
    xfc-tabname      = 'LT_DATA'.
    xfc-outputlen    = '12'.
    APPEND xfc TO ifc.

    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
      EXPORTING
        i_callback_program = sy-repid
        it_fieldcat        = ifc[]
      TABLES
        t_outtab           = lt_data[]
      EXCEPTIONS
        program_error      = 1
        OTHERS             = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ELSE.
    MESSAGE : 'No data found.' TYPE 'E'.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  EQUIPMENT_IHC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM equipment_ihc .
  SELECT *
      FROM zfi_equiihctax
      INTO TABLE @DATA(it_asi)
      WHERE bukrs = '1000'
      AND   tax_inv IN @s_ti
      AND   send_plant IN @s_werks.
  IF sy-subrc = 0.
    IF it_asi[] IS NOT INITIAL.
      SELECT bukrs,belnr,gjahr,budat,bldat,usnam
        FROM bkpf INTO TABLE @DATA(lt_dtchk)
        FOR ALL ENTRIES IN @it_asi
        WHERE bukrs = @it_asi-bukrs AND belnr = @it_asi-belnr AND bldat IN @s_budat AND stblg = ' '.
    ENDIF.

    DATA(it_ash) = it_asi[].
    SORT it_ash BY belnr gjahr.
    DELETE ADJACENT DUPLICATES FROM it_ash COMPARING belnr gjahr.

    IF it_ash[] IS NOT INITIAL.
      SELECT a~werks,
             a~name1,
             a~regio,
             a~pstlz,
             a~stras,
             a~land1,
             b~gstin,
             c~bezei,
             p~street,
             p~str_suppl1,
             p~str_suppl2
        FROM t001w AS a
        INNER JOIN j_1bbranch AS b ON a~j_1bbranch = b~branch AND b~bukrs = '1000'
        INNER JOIN t005u AS c ON a~regio = c~bland AND c~land1 = 'IN' AND c~spras = 'E'
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO TABLE @DATA(it_wk)
        FOR ALL ENTRIES IN @it_ash
        WHERE a~werks = @it_ash-send_plant
        OR    a~werks = @it_ash-rec_plant.
    ENDIF.

    LOOP AT it_ash INTO DATA(wa_ash).
      READ TABLE lt_dtchk INTO DATA(ls_dtchk) WITH KEY bukrs = wa_ash-bukrs belnr = wa_ash-belnr.
      IF sy-subrc = 0.
        CLEAR : show.
        IF ls_dtchk-usnam = sy-uname.
          show = 'X'.
        ELSE.
          READ TABLE lt_auth WITH KEY werks = wa_ash-send_plant psno = sy-uname TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            show = 'X'.
          ENDIF.
        ENDIF.
        IF show = 'X'.
          ls_irn-trntyp  = 'Regular'.
          ls_irn-doctype = 'RI'.
          ls_irn-rchrg = 'N'.
          ls_irn-taxsch = 'GST'.

          IF wa_ash-igstv IS INITIAL.
            CLEAR: flg_igst.
            ls_irn-ntr = 'INTRA'.
          ELSE.
            flg_igst = 'X'.
            ls_irn-ntr = 'INTER'.
          ENDIF.

          ls_irn-no = wa_ash-tax_inv.
          CONCATENATE ls_dtchk-budat+6(2) ls_dtchk-budat+4(2) ls_dtchk-budat+0(4) INTO ls_irn-dt SEPARATED BY '-'.

          READ TABLE it_wk INTO DATA(wa_owk) WITH KEY werks = wa_ash-send_plant.
          IF sy-subrc = 0.
            ls_irn-strdnm = wa_owk-name1.
            ls_irn-sgstin = wa_owk-gstin.
            ls_irn-sloc   = wa_owk-bezei.
            ls_irn-sstcd  = wa_owk-regio.
            ls_irn-spin   = wa_owk-pstlz.
            CONCATENATE wa_owk-street wa_owk-str_suppl1 wa_owk-str_suppl2 INTO ls_irn-sbnm SEPARATED BY space.
            ls_irn-cntcd  = wa_owk-land1.
            IF sy-sysid = 'SED' OR sy-sysid = 'SEQ'.
              SELECT gstin UP TO 1 ROWS
                FROM zeinv_gstin
                INTO ls_irn-sgstin
                WHERE zregio = wa_owk-regio.
              ENDSELECT.
            ENDIF.
            ls_irn-usergstin = ls_irn-sgstin.
          ENDIF.

          READ TABLE it_wk INTO DATA(wa_nwk) WITH KEY werks = wa_ash-rec_plant.
          IF sy-subrc = 0.
            ls_irn-bgstin  = wa_nwk-gstin.
            ls_irn-btrdnm  = wa_nwk-name1.
            ls_irn-bloc    = wa_nwk-bezei.
            ls_irn-bstcd   = wa_nwk-regio.
            ls_irn-pos     = wa_nwk-regio.
            ls_irn-bpin    = wa_nwk-pstlz.
            CONCATENATE wa_nwk-street wa_nwk-str_suppl1 wa_nwk-str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
            IF ls_irn-bgstin IS INITIAL.
              ls_irn-bgstin = 'URP'.
            ELSE.
              ls_irn-catg = 'B2B'.
            ENDIF.
          ENDIF.

          CONDENSE : ls_irn-pos,ls_irn-sstcd.

          IF ls_irn-dgstin IS INITIAL.
            ls_irn-dgstin = 'null'.
          ENDIF.
          IF ls_irn-dtrdnm IS INITIAL.
            ls_irn-dtrdnm = 'null'.
          ENDIF.
          IF ls_irn-dloc IS INITIAL.
            ls_irn-dloc = 'null'.
          ENDIF.
          IF ls_irn-dstcd IS INITIAL.
            ls_irn-dstcd = 'null'.
          ENDIF.
          IF ls_irn-dpin IS INITIAL.
            ls_irn-dpin = 'null'.
          ENDIF.
          IF ls_irn-togstin IS INITIAL.
            ls_irn-togstin = 'null'.
          ENDIF.
          IF ls_irn-totrd_nm IS INITIAL.
            ls_irn-totrd_nm = 'null'.
          ENDIF.
          IF ls_irn-toloc IS INITIAL.
            ls_irn-toloc = 'null'.
          ENDIF.
          IF ls_irn-tostcd IS INITIAL.
            ls_irn-tostcd = 'null'.
          ENDIF.
          IF ls_irn-topin IS INITIAL.
            ls_irn-topin = 'null'.
          ENDIF.

          CLEAR: lv_tottxval, lv_totiamt, lv_totcamt, lv_totsamt.
          LOOP AT it_asi INTO DATA(wa_asi) WHERE bukrs = wa_ash-bukrs AND belnr = wa_ash-belnr.
            lv_count1       = lv_count1 + 1.
            ls_item-no      = wa_ash-tax_inv.
            ls_item-prddesc = wa_asi-eqktx.
            ls_item-prdnm   = wa_asi-equnr.
            ls_item-hsncd   = wa_asi-hsn.
            ls_item-num     = lv_count1.
            ls_item-qty     = wa_asi-menge.

            SELECT einvuom UP TO 1 ROWS
              FROM zeinv_uom
              INTO ls_item-unit WHERE sapuom = wa_asi-meins.
            ENDSELECT.

            ls_item-unitprice = wa_asi-tax_value.
            ls_item-sval = wa_asi-tax_value.
            ls_item-txval = wa_asi-tax_value.
            lv_tottxval = lv_tottxval + ls_item-txval.

            IF flg_igst = 'X'.
              ls_item-irt = wa_asi-igstp.
              ls_item-iamt = wa_asi-igstv.
              lv_totiamt = lv_totiamt + ls_item-iamt.
            ELSE.
              ls_item-crt = wa_asi-cgstp.
              ls_item-srt = wa_asi-sgstp.
              ls_item-camt = wa_asi-cgstv.
              ls_item-samt = wa_asi-sgstv.
              lv_totcamt = lv_totcamt + ls_item-camt.
              lv_totsamt = lv_totsamt + ls_item-samt.
            ENDIF.

            ls_item-itmval = ls_item-sval + ls_item-iamt + ls_item-camt + ls_item-samt.

            CONDENSE: ls_item-no,
                      ls_item-prdnm,
                      ls_item-hsncd,
                      ls_item-qty,
                      ls_item-unit,
                      ls_item-unitprice,
                      ls_item-itmval,
                      ls_item-sval,
                      ls_item-txval,
                      ls_item-crt,
                      ls_item-srt,
                      ls_item-irt,
                      ls_item-iamt,
                      ls_item-camt,
                      ls_item-samt,
                      ls_item-othchrg,
                      ls_item-disc.
            IF ls_item-irt IS INITIAL.
              ls_item-irt = '0'.
            ENDIF.
            IF ls_item-crt IS INITIAL.
              ls_item-crt = '0'.
            ENDIF.
            IF ls_item-srt IS INITIAL.
              ls_item-srt = '0'.
            ENDIF.
            IF ls_item-iamt IS INITIAL.
              ls_item-iamt = '0'.
            ENDIF.
            IF ls_item-camt IS INITIAL.
              ls_item-camt = '0'.
            ENDIF.
            IF ls_item-samt IS INITIAL.
              ls_item-samt = '0'.
            ENDIF.
            IF ls_item-othchrg IS INITIAL.
              ls_item-othchrg = '0'.
            ENDIF.
            IF ls_item-disc IS INITIAL.
              ls_item-disc = '0'.
            ENDIF.
            APPEND ls_item TO lt_item.
            CLEAR : ls_item.
          ENDLOOP.

          CLEAR : lv_count1,lv_totinval.
          lv_totinval = lv_tottxval + lv_totcamt + lv_totsamt + lv_totiamt.

          ls_irn-itemlist = lt_item[].

          ls_irn-tottxval = lv_tottxval.
          ls_irn-totiamt = lv_totiamt.
          ls_irn-totcamt = lv_totcamt.
          ls_irn-totsamt = lv_totsamt.
          ls_irn-totinvval = lv_totinval.
          CONDENSE : ls_irn-totinvval.
          lv_totinval = ls_irn-totinvval.
          IF ls_irn-catg IS INITIAL.
            IF lv_totinval GT lv_budget.
              IF ls_irn-ntr = 'INTER'.
                ls_irn-catg = 'B2CL'.
              ELSE.
                ls_irn-catg = 'B2CS'.
              ENDIF.
            ELSE.
              ls_irn-catg = 'B2CS'.
            ENDIF.
          ENDIF.
          CONDENSE : ls_irn-forcur,ls_irn-ntr.

          IF ls_irn-forcur IS INITIAL.
            ls_irn-forcur = 'null'.
          ENDIF.
          IF ls_irn-invforcur IS INITIAL.
            ls_irn-invforcur = '0'.
          ENDIF.
          IF ls_irn-totothchrg IS INITIAL.
            ls_irn-totothchrg = '0'.
          ENDIF.
          IF ls_irn-totiamt IS INITIAL.
            ls_irn-totiamt = '0'.
          ENDIF.
          IF ls_irn-totcamt IS INITIAL.
            ls_irn-totcamt = '0'.
          ENDIF.
          IF ls_irn-totsamt IS INITIAL.
            ls_irn-totsamt = '0'.
          ENDIF.
          ls_irn-gen9 = 'Equipment IHC Data' .                                        "ad by akshay_D-117834
          CONDENSE: ls_irn-doctype, ls_irn-catg, ls_irn-trntyp, ls_irn-no, ls_irn-rchrg, ls_irn-sgstin, ls_irn-strdnm,
                    ls_irn-sloc, ls_irn-sstcd, ls_irn-spin, ls_irn-bgstin, ls_irn-btrdnm, ls_irn-bloc,
                    ls_irn-bstcd, ls_irn-bpin, ls_irn-togstin, ls_irn-totrd_nm,ls_irn-toloc,
                    ls_irn-tostcd, ls_irn-topin, ls_irn-taxsch, ls_irn-totinvval, ls_irn-tottxval,
                    ls_irn-totcamt, ls_irn-totsamt, ls_irn-totiamt,ls_irn-gen9.
          APPEND ls_irn TO lt_irn.

          ls_einv_master-bukrs = ls_dtchk-bukrs.
          ls_einv_master-werks = wa_ash-send_plant.
          IF line_exists( it_wk[ werks = wa_ash-send_plant ] ).
            ls_einv_master-region = it_wk[ werks = wa_ash-send_plant ]-regio.
          ENDIF.
          ls_einv_master-invoice_no = wa_ash-tax_inv.
          ls_einv_master-user_gstin = ls_irn-sgstin.
          ls_einv_master-zmodule = 'FI'.
          ls_einv_master-sap_doc = ls_dtchk-belnr.
          ls_einv_master-creation_date = ls_dtchk-bldat.
          ls_einv_master-gjahr = ls_dtchk-gjahr.
          CONDENSE: ls_einv_master-bukrs, ls_einv_master-werks, ls_einv_master-region,
                    ls_einv_master-invoice_no, ls_einv_master-zmodule, ls_einv_master-sap_doc.
          APPEND ls_einv_master TO lt_einv_master.
          CLEAR : ls_einv_master.
          CLEAR : lv_count,ls_irn,lv_totinval.
          REFRESH : lt_item,ls_irn-itemlist.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_ASSESSMENT_CR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_assessment_cr .
  SELECT *
     FROM zfi_assessmnt_cr
     INTO TABLE @DATA(it_aci)
     WHERE zfi_tax_inv IN @s_ti
     AND   bukrs       = '1000'.
*    AND   werks       IN @s_werks.
  IF sy-subrc = 0.

    DATA(it_ach) = it_aci[].
    SORT it_ach BY db_doc_no db_gjahr.
    DELETE ADJACENT DUPLICATES FROM it_ach COMPARING db_doc_no db_gjahr.

    IF it_ach[] IS NOT INITIAL.
      SELECT bukrs,belnr,gjahr,budat,bldat,usnam
        FROM bkpf INTO TABLE @DATA(lt_dtchk)
        FOR ALL ENTRIES IN @it_aci
        WHERE bukrs = @it_aci-bukrs AND belnr = @it_aci-db_doc_no AND bldat IN @s_budat AND stblg = ' '.
      IF lt_dtchk IS NOT INITIAL.
        SELECT bukrs,
               belnr,
               gjahr,
               lifnr,
               kunnr,
               bupla,
               werks,
               koart
          FROM bseg
          INTO TABLE @DATA(it_bg)
          FOR ALL ENTRIES IN @lt_dtchk
          WHERE bukrs = @lt_dtchk-bukrs
          AND   belnr = @lt_dtchk-belnr
          AND   gjahr = @lt_dtchk-gjahr
          AND ( koart = 'D'
          OR    koart = 'K' ).
      ENDIF.
      SELECT a~werks,
             a~name1,
             a~regio,
             a~pstlz,
             a~stras,
             a~land1,
             b~gstin,
             c~bezei,
             p~street,
             p~str_suppl1,
             p~str_suppl2
        FROM t001w AS a
        INNER JOIN j_1bbranch AS b ON a~j_1bbranch = b~branch AND b~bukrs = '1000'
        INNER JOIN t005u AS c ON a~regio = c~bland AND c~land1 = 'IN' AND c~spras = 'E'
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO TABLE @DATA(it_wk)
        FOR ALL ENTRIES IN @it_ach
        WHERE a~werks = '1000'
        OR    a~werks = @it_ach-werks.
    ENDIF.

    LOOP AT it_ach INTO DATA(wa_ach).
      READ TABLE lt_dtchk INTO DATA(ls_dtchk) WITH KEY bukrs = wa_ach-bukrs belnr = wa_ach-db_doc_no.
      IF sy-subrc = 0.
        CLEAR : show.
        IF ls_dtchk-usnam = sy-uname.
          show = 'X'.
        ELSE.
          READ TABLE lt_auth WITH KEY werks = '1000' psno = sy-uname TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            show = 'X'.
          ENDIF.
        ENDIF.
        IF show = 'X'.
          ls_irn-doctype = 'C'.
          ls_irn-trntyp = 'Regular'.
          ls_irn-rchrg = 'N'.
          ls_irn-taxsch = 'GST'.

          IF wa_ach-zigst EQ '0.00'.
            CLEAR: flg_igst.
            ls_irn-ntr = 'INTRA'.
          ELSE.
            flg_igst = 'X'.
            ls_irn-ntr = 'INTER'.
          ENDIF.

          ls_irn-no = wa_ach-zfi_tax_inv.

          CLEAR : lv_budat,lv_cpudt,lv_m1,lv_m2,date_end.
          SELECT budat
           cpudt UP TO 1 ROWS
           FROM bkpf
           INTO ( lv_budat,lv_cpudt )
           WHERE belnr = ls_dtchk-belnr
           AND bukrs EQ ls_dtchk-bukrs
           AND gjahr EQ ls_dtchk-gjahr ORDER BY budat.
          ENDSELECT.

          IF sy-subrc EQ 0.
            lv_m1 = lv_budat+4(2).
            lv_m2 = lv_cpudt+4(2).

            IF lv_m1 EQ lv_m2.
              date_end = lv_cpudt.
            ELSE.

              CALL FUNCTION 'HR_JP_MONTH_BEGIN_END_DATE'
                EXPORTING
                  iv_date           = lv_budat
                IMPORTING
                  ev_month_end_date = date_end.       " end date.
            ENDIF.
          ENDIF.
          CONCATENATE date_end+6(2) date_end+4(2) date_end+0(4) INTO ls_irn-dt SEPARATED BY '-'.

          READ TABLE it_wk INTO DATA(wa_wk) WITH KEY werks = '1000'.
          IF sy-subrc = 0.
            ls_irn-strdnm = wa_wk-name1.
            ls_irn-sgstin = wa_wk-gstin.
            ls_irn-sloc   = wa_wk-bezei.
            ls_irn-sstcd  = wa_wk-regio.
            ls_irn-spin   = wa_wk-pstlz.
            CONCATENATE wa_wk-street wa_wk-str_suppl1 wa_wk-str_suppl2 INTO ls_irn-sbnm SEPARATED BY space.
            ls_irn-cntcd  = wa_wk-land1.
            IF sy-sysid = 'SED' OR sy-sysid = 'SEQ'.
              SELECT gstin UP TO 1 ROWS
                FROM zeinv_gstin
                INTO ls_irn-sgstin
                WHERE zregio = wa_wk-regio.
              ENDSELECT.
            ENDIF.
            ls_irn-usergstin = ls_irn-sgstin.
          ENDIF.

          READ TABLE it_wk INTO DATA(wa_awk) WITH KEY werks = wa_ach-werks.
          IF sy-subrc = 0.
            ls_irn-bgstin  = wa_awk-gstin.
            ls_irn-btrdnm  = wa_awk-name1.
            ls_irn-bloc    = wa_awk-bezei.
            ls_irn-bstcd   = wa_awk-regio.
            ls_irn-pos     = wa_awk-regio.
            ls_irn-bpin    = wa_awk-pstlz.
            CONCATENATE wa_awk-street wa_awk-str_suppl1 wa_awk-str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
*        ls_irn-togstin = wa_awk-gstin.
            IF ls_irn-bgstin IS INITIAL.
              ls_irn-bgstin = 'URP'.
            ELSE.
              ls_irn-catg = 'B2B'.
            ENDIF.
          ENDIF.

          IF ls_irn-dgstin IS INITIAL.
            ls_irn-dgstin = 'null'.
          ENDIF.
          IF ls_irn-dtrdnm IS INITIAL.
            ls_irn-dtrdnm = 'null'.
          ENDIF.
          IF ls_irn-dloc IS INITIAL.
            ls_irn-dloc = 'null'.
          ENDIF.
          IF ls_irn-dstcd IS INITIAL.
            ls_irn-dstcd = 'null'.
          ENDIF.
          IF ls_irn-dpin IS INITIAL.
            ls_irn-dpin = 'null'.
          ENDIF.
          IF ls_irn-togstin IS INITIAL.
            ls_irn-togstin = 'null'.
          ENDIF.
          IF ls_irn-totrd_nm IS INITIAL.
            ls_irn-totrd_nm = 'null'.
          ENDIF.
          IF ls_irn-toloc IS INITIAL.
            ls_irn-toloc = 'null'.
          ENDIF.
          IF ls_irn-tostcd IS INITIAL.
            ls_irn-tostcd = 'null'.
          ENDIF.
          IF ls_irn-topin IS INITIAL.
            ls_irn-topin = 'null'.
          ENDIF.

          CLEAR: lv_tottxval, lv_totiamt, lv_totcamt, lv_totsamt.
          LOOP AT it_aci INTO DATA(wa_aci) WHERE db_doc_no = wa_ach-db_doc_no
                                             AND db_gjahr  = wa_ach-db_gjahr.

            ls_item-no = wa_aci-zfi_tax_inv.

            SELECT text1
              UP TO 1 ROWS
              FROM t604n
              INTO ls_item-prdnm
              WHERE spras = 'E'
              AND   land1 = 'IN'
              AND   steuc = wa_ach-zhsn_code
              ORDER BY PRIMARY KEY.
            ENDSELECT.
            ls_item-prddesc = ls_item-prdnm.
            REPLACE ALL OCCURRENCES OF ',' IN ls_item-prdnm WITH space.

            ls_item-hsncd = wa_ach-zhsn_code.

            ls_item-num = wa_aci-buzei.
            ls_item-qty = '1.00'.
            SELECT einvuom UP TO 1 ROWS
              FROM zeinv_uom
              INTO ls_item-unit WHERE sapuom = 'ACT'.
            ENDSELECT.
            ls_item-unitprice = wa_aci-dmbtr.
            ls_item-sval = ls_item-qty * ls_item-unitprice.
            ls_item-txval = ls_item-sval.
            lv_tottxval = lv_tottxval + ls_item-txval.

            IF flg_igst = 'X'.
              ls_item-irt = wa_aci-zigst.
              ls_item-iamt = wa_aci-zigst_val.
              lv_totiamt = lv_totiamt + ls_item-iamt.
            ELSE.
              ls_item-crt = wa_aci-zcgst.
              ls_item-srt = wa_aci-zsgst.
              ls_item-camt = wa_aci-zcgst_val.
              ls_item-samt = wa_aci-zsgst_val.
              lv_totcamt = lv_totcamt + ls_item-camt.
              lv_totsamt = lv_totsamt + ls_item-samt.
            ENDIF.

            ls_item-itmval = ls_item-txval + ls_item-iamt + ls_item-camt + ls_item-samt.

            CONDENSE: ls_item-no,
                      ls_item-prdnm,
                      ls_item-prddesc,
                      ls_item-hsncd,
                      ls_item-qty,
                      ls_item-unit,
                      ls_item-unitprice,
                      ls_item-itmval,
                      ls_item-sval,
                      ls_item-txval,
                      ls_item-crt,
                      ls_item-srt,
                      ls_item-irt,
                      ls_item-iamt,
                      ls_item-camt,
                      ls_item-samt.
            IF ls_item-irt IS INITIAL.
              ls_item-irt = '0'.
            ENDIF.
            IF ls_item-crt IS INITIAL.
              ls_item-crt = '0'.
            ENDIF.
            IF ls_item-srt IS INITIAL.
              ls_item-srt = '0'.
            ENDIF.
            IF ls_item-iamt IS INITIAL.
              ls_item-iamt = '0'.
            ENDIF.
            IF ls_item-camt IS INITIAL.
              ls_item-camt = '0'.
            ENDIF.
            IF ls_item-samt IS INITIAL.
              ls_item-samt = '0'.
            ENDIF.
            IF ls_item-othchrg IS INITIAL.
              ls_item-othchrg = '0'.
            ENDIF.
            APPEND ls_item TO lt_item.
            CLEAR : ls_item.
          ENDLOOP.

          ls_irn-itemlist = lt_item[].

          ls_irn-tottxval = lv_tottxval.
          ls_irn-totiamt = lv_totiamt.
          ls_irn-totcamt = lv_totcamt.
          ls_irn-totsamt = lv_totsamt.
          ls_irn-totinvval = ls_irn-tottxval + ls_irn-totiamt + ls_irn-totcamt + ls_irn-totsamt.
          CONDENSE : ls_irn-totinvval.
          lv_totinval = ls_irn-totinvval.
          IF ls_irn-catg IS INITIAL.
            IF lv_totinval GT lv_budget.
              IF ls_irn-ntr = 'INTER'.
                ls_irn-catg = 'B2CL'.
              ELSE.
                ls_irn-catg = 'B2CS'.
              ENDIF.
            ELSE.
              ls_irn-catg = 'B2CS'.
            ENDIF.
          ENDIF.
          CONDENSE : ls_irn-forcur,ls_irn-ntr.

          IF ls_irn-forcur IS INITIAL.
            ls_irn-forcur = 'null'.
          ENDIF.
          IF ls_irn-invforcur IS INITIAL.
            ls_irn-invforcur = '0'.
          ENDIF.
          IF ls_irn-totothchrg IS INITIAL.
            ls_irn-totothchrg = '0'.
          ENDIF.
          IF ls_irn-totiamt IS INITIAL.
            ls_irn-totiamt = '0'.
          ENDIF.
          IF ls_irn-totcamt IS INITIAL.
            ls_irn-totcamt = '0'.
          ENDIF.
          IF ls_irn-totsamt IS INITIAL.
            ls_irn-totsamt = '0'.
          ENDIF.
          ls_irn-gen9 = 'GST:Assestment Tax Invoice'          .                               "ad by akshay_D-117834
          CONDENSE: ls_irn-doctype, ls_irn-catg, ls_irn-trntyp, ls_irn-no, ls_irn-rchrg, ls_irn-sgstin, ls_irn-strdnm,
                    ls_irn-sloc, ls_irn-sstcd, ls_irn-spin, ls_irn-bgstin, ls_irn-btrdnm, ls_irn-bloc,
                    ls_irn-bstcd, ls_irn-bpin, ls_irn-togstin, ls_irn-totrd_nm,ls_irn-toloc,
                    ls_irn-tostcd, ls_irn-topin, ls_irn-taxsch, ls_irn-totinvval, ls_irn-tottxval,
                    ls_irn-totcamt, ls_irn-totsamt, ls_irn-totiamt,ls_irn-gen9.
          APPEND ls_irn TO lt_irn.

          ls_einv_master-bukrs = ls_dtchk-bukrs.
          ls_einv_master-werks = '1000'.
          ls_einv_master-region = wa_wk-regio.
          ls_einv_master-invoice_no = wa_ach-zfi_tax_inv.
          ls_einv_master-user_gstin = ls_irn-sgstin.
          ls_einv_master-zmodule = 'FI'.
          ls_einv_master-sap_doc = ls_dtchk-belnr.
          ls_einv_master-creation_date = ls_dtchk-bldat.
          ls_einv_master-gjahr = ls_dtchk-gjahr.
          CONDENSE: ls_einv_master-bukrs, ls_einv_master-werks, ls_einv_master-region,
                    ls_einv_master-invoice_no, ls_einv_master-zmodule, ls_einv_master-sap_doc.
          APPEND ls_einv_master TO lt_einv_master.
          CLEAR : ls_einv_master.
          CLEAR : lv_count,ls_irn,lv_totinval.
          REFRESH : lt_item,ls_irn-itemlist.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_ASSET_CR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_asset_cr .

  SELECT *
     FROM zfi_asset_trnsf
     INTO TABLE @DATA(it_asi)
     WHERE bukrs = '1000'
     AND   cr_rcpt_no IN @s_ti
     AND   owerks IN @s_werks.
  IF sy-subrc = 0.
    IF it_asi[] IS NOT INITIAL.
      SELECT bukrs,belnr,gjahr,budat,bldat,usnam
        FROM bkpf INTO TABLE @DATA(lt_dtchk)
        FOR ALL ENTRIES IN @it_asi
        WHERE bukrs = @it_asi-bukrs AND belnr = @it_asi-crdnt_no AND bldat IN @s_budat AND stblg = ' '.
      IF lt_dtchk[] IS NOT INITIAL.
        SELECT bukrs,
               belnr,
               gjahr,
               lifnr,
               kunnr,
               bupla,
               werks,
               koart
          FROM bseg
          INTO TABLE @DATA(it_bg)
          FOR ALL ENTRIES IN @lt_dtchk
          WHERE bukrs = @lt_dtchk-bukrs
          AND   belnr = @lt_dtchk-belnr
          AND   gjahr = @lt_dtchk-gjahr
          AND ( koart = 'D'
          OR    koart = 'K' ).
      ENDIF.

      SELECT bukrs,
             anln1,
             anln2,
             invzu,
             meins,
             menge,
             txt50
      FROM anla
      INTO TABLE @DATA(it_anla)
      FOR ALL ENTRIES IN @it_asi
      WHERE bukrs = @it_asi-bukrs
      AND   anln1 = @it_asi-anln1
      AND   anln2 = @it_asi-anln2.

    ENDIF.

    DATA(it_ash) = it_asi[].
    SORT it_ash BY crdnt_no crdnt_yr.
    DELETE ADJACENT DUPLICATES FROM it_ash COMPARING crdnt_no crdnt_yr.

    IF it_ash[] IS NOT INITIAL.
      SELECT a~werks,
             a~name1,
             a~regio,
             a~pstlz,
             a~stras,
             a~land1,
             b~gstin,
             c~bezei,
             p~street,
             p~str_suppl1,
             p~str_suppl2
        FROM t001w AS a
        INNER JOIN j_1bbranch AS b ON a~j_1bbranch = b~branch AND b~bukrs = '1000'
        INNER JOIN t005u AS c ON a~regio = c~bland AND c~land1 = 'IN' AND c~spras = 'E'
        LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
        INTO TABLE @DATA(it_wk)
        FOR ALL ENTRIES IN @it_ash
        WHERE a~werks = @it_ash-owerks
        OR    a~werks = @it_ash-nwerks.
    ENDIF.

    LOOP AT it_ash INTO DATA(wa_ash).
      READ TABLE lt_dtchk INTO DATA(ls_dtchk) WITH KEY bukrs = wa_ash-bukrs belnr = wa_ash-crdnt_no.
      IF sy-subrc = 0.
        CLEAR : show.
        IF ls_dtchk-usnam = sy-uname.
          show = 'X'.
        ELSE.
          READ TABLE lt_auth WITH KEY werks = wa_ash-owerks psno = sy-uname TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            show = 'X'.
          ENDIF.
        ENDIF.
        IF show = 'X'.
          READ TABLE it_bg INTO DATA(ls_bg) WITH KEY bukrs = ls_dtchk-bukrs belnr = ls_dtchk-belnr.
          ls_irn-doctype = 'C'.
          ls_irn-rchrg = 'N'.
          ls_irn-taxsch = 'GST'.

          ls_irn-no = wa_ash-cr_rcpt_no."sneha-122943
          CONCATENATE ls_dtchk-budat+6(2) ls_dtchk-budat+4(2) ls_dtchk-budat+0(4) INTO ls_irn-dt SEPARATED BY '-'.

*          READ TABLE it_wk INTO DATA(wa_owk) WITH KEY werks = wa_ash-owerks.
          READ TABLE it_wk INTO DATA(wa_owk) WITH KEY werks = wa_ash-nwerks."sneha-122943
          IF sy-subrc = 0.
            ls_irn-strdnm = wa_owk-name1.
            ls_irn-sgstin = wa_owk-gstin.
            ls_irn-sloc   = wa_owk-bezei.
            ls_irn-sstcd  = wa_owk-regio.
            ls_irn-spin   = wa_owk-pstlz.
            CONCATENATE wa_owk-street wa_owk-str_suppl1 wa_owk-str_suppl2 INTO ls_irn-sbnm SEPARATED BY space.
            ls_irn-cntcd  = wa_owk-land1.
            IF sy-sysid = 'SED' OR sy-sysid = 'SEQ'.
              SELECT gstin UP TO 1 ROWS
                FROM zeinv_gstin
                INTO ls_irn-sgstin
                WHERE zregio = wa_owk-regio.
              ENDSELECT.
            ENDIF.
            ls_irn-usergstin = ls_irn-sgstin.
          ENDIF.

          IF wa_ash-ztcode = space.
*            READ TABLE it_wk INTO DATA(wa_nwk) WITH KEY werks = wa_ash-nwerks.
            READ TABLE it_wk INTO DATA(wa_nwk) WITH KEY werks = wa_ash-owerks."sneha-122943
            IF sy-subrc = 0.
              ls_irn-trntyp  = 'Regular'.
              ls_irn-bgstin  = wa_nwk-gstin.
              ls_irn-btrdnm  = wa_nwk-name1.
              ls_irn-bloc    = wa_nwk-bezei.
              ls_irn-bstcd   = wa_nwk-regio.
              ls_irn-pos     = wa_nwk-regio.
              ls_irn-bpin    = wa_nwk-pstlz.
              CONCATENATE wa_nwk-street wa_nwk-str_suppl1 wa_nwk-str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
*          ls_irn-togstin = wa_nwk-gstin.
              IF ls_irn-bgstin IS INITIAL.
                ls_irn-bgstin = 'URP'.
              ELSE.
                ls_irn-catg = 'B2B'.
              ENDIF.
            ENDIF.
          ELSE.
            IF wa_ash-gstin3 IS NOT INITIAL.
              ls_irn-catg   = 'B2B'.
              ls_irn-trntyp = 'SHP'.
              ls_irn-bgstin = wa_ash-gstin2.
              ls_irn-btrdnm = wa_ash-man_adrc.
              CONCATENATE wa_ash-address wa_ash-address2 INTO ls_irn-bbnm SEPARATED BY space.
              SELECT bezei UP TO 1 ROWS
                FROM t005u INTO ls_irn-bloc
                WHERE bland = wa_ash-state AND
                land1 = 'IN' AND spras = 'E'.
              ENDSELECT.
              ls_irn-bstcd  = wa_ash-state.
              ls_irn-bpin   = wa_ash-pincode.

              ls_irn-togstin = wa_ash-gstin3.
              ls_irn-totrd_nm = wa_ash-name3.
              CONCATENATE wa_ash-adrs1_3 wa_ash-adrs2_3 INTO ls_irn-tobnm SEPARATED BY space.
              SELECT bezei UP TO 1 ROWS
                FROM t005u INTO ls_irn-toloc
                WHERE bland = wa_ash-state3 AND
                land1 = 'IN' AND spras = 'E'.
              ENDSELECT.
              ls_irn-tostcd  = wa_ash-state3.
              ls_irn-pos     = wa_ash-state3.
              ls_irn-topin   = wa_ash-pincode1.
            ELSE.
              IF wa_ash-gstin2 IS NOT INITIAL.
                ls_irn-catg = 'B2B'.
                ls_irn-trntyp = 'Regular'.
                ls_irn-bgstin = wa_ash-gstin2.
                ls_irn-btrdnm = wa_ash-man_adrc.
                CONCATENATE wa_ash-address wa_ash-address2 INTO ls_irn-bbnm SEPARATED BY space.
                SELECT bezei UP TO 1 ROWS
                  FROM t005u INTO ls_irn-bloc
                  WHERE bland = wa_ash-state AND
                  land1 = 'IN' AND spras = 'E'.
                ENDSELECT.
                ls_irn-bstcd  = wa_ash-state.
                ls_irn-pos    = wa_ash-state.
                ls_irn-bpin   = wa_ash-pincode.
              ELSE.
                ls_irn-trntyp = 'Regular'.
                IF ls_bg-lifnr IS NOT INITIAL.
                  SELECT a~stcd3 a~name1 b~bezei a~regio a~pstlz p~street p~str_suppl1 p~str_suppl2
                    UP TO 1 ROWS
                    FROM lfa1 AS a
                    INNER JOIN t005u AS b ON a~regio = b~bland AND b~land1 = 'IN' AND b~spras = 'E'
                    LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
                    INTO (ls_irn-bgstin,ls_irn-btrdnm,ls_irn-bloc,ls_irn-bstcd,ls_irn-bpin,lv_street,lv_str_suppl1,lv_str_suppl2)
                    WHERE a~lifnr = ls_bg-lifnr.
                  ENDSELECT.
                  IF ls_irn-bgstin IS INITIAL.
                    ls_irn-bgstin = 'URP'.
                  ELSE.
                    ls_irn-catg = 'B2B'.
                  ENDIF.
                  CONCATENATE lv_street lv_str_suppl1 lv_str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
                  CLEAR : lv_street,lv_str_suppl1,lv_str_suppl2.
                ELSEIF ls_bg-kunnr IS NOT INITIAL.
                  SELECT a~stcd3 a~name1 b~bezei a~regio a~pstlz p~street p~str_suppl1 p~str_suppl2
                    UP TO 1 ROWS
                    FROM kna1 AS a
                    INNER JOIN t005u AS b ON a~regio = b~bland AND b~land1 = 'IN' AND b~spras = 'E'
                    LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
                    INTO ( ls_irn-bgstin,ls_irn-btrdnm,ls_irn-bloc,ls_irn-bstcd,ls_irn-bpin,lv_street,lv_str_suppl1,lv_str_suppl2 )
                    WHERE a~kunnr = ls_bg-kunnr.
                  ENDSELECT.
                  IF ls_irn-bgstin IS INITIAL.
                    ls_irn-bgstin = 'URP'.
                  ELSE.
                    ls_irn-catg = 'B2B'.
                  ENDIF.
                  CONCATENATE lv_street lv_str_suppl1 lv_str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
                  CLEAR : lv_street,lv_str_suppl1,lv_str_suppl2.
                ENDIF.
                ls_irn-pos   = ls_irn-bstcd.
              ENDIF.
            ENDIF.
*          ls_irn-togstin = ls_irn-bgstin.
          ENDIF.

          CONDENSE : ls_irn-pos,ls_irn-sstcd.
          IF ls_irn-pos = ls_irn-sstcd.
            CLEAR : flg_igst.
            ls_irn-ntr = 'INTRA'.
          ELSE.
            flg_igst = 'X'.
            ls_irn-ntr = 'INTER'.
          ENDIF.

          IF ls_irn-dgstin IS INITIAL.
            ls_irn-dgstin = 'null'.
          ENDIF.
          IF ls_irn-dtrdnm IS INITIAL.
            ls_irn-dtrdnm = 'null'.
          ENDIF.
          IF ls_irn-dloc IS INITIAL.
            ls_irn-dloc = 'null'.
          ENDIF.
          IF ls_irn-dstcd IS INITIAL.
            ls_irn-dstcd = 'null'.
          ENDIF.
          IF ls_irn-dpin IS INITIAL.
            ls_irn-dpin = 'null'.
          ENDIF.
          IF ls_irn-togstin IS INITIAL.
            ls_irn-togstin = 'null'.
          ENDIF.
          IF ls_irn-totrd_nm IS INITIAL.
            ls_irn-totrd_nm = 'null'.
          ENDIF.
          IF ls_irn-toloc IS INITIAL.
            ls_irn-toloc = 'null'.
          ENDIF.
          IF ls_irn-tostcd IS INITIAL.
            ls_irn-tostcd = 'null'.
          ENDIF.
          IF ls_irn-topin IS INITIAL.
            ls_irn-topin = 'null'.
          ENDIF.

          CLEAR: lv_tottxval, lv_totiamt, lv_totcamt, lv_totsamt,lv_tottcsv.
          LOOP AT it_asi INTO DATA(wa_asi) WHERE crdnt_no = wa_ash-crdnt_no.
            lv_count1 = lv_count1 + 1.
            ls_item-no = wa_ash-rcpt_no.

            IF line_exists( it_anla[ anln1 = wa_asi-anln1 ] ) .
              ls_item-prddesc = it_anla[ anln1 = wa_asi-anln1 ]-txt50.
            ENDIF.
            REPLACE ALL OCCURRENCES OF ',' IN ls_item-prdnm WITH space.

            ls_item-hsncd = wa_asi-invzu.
            ls_item-prdnm = wa_asi-anln1.
            ls_item-num = lv_count1.
            ls_item-qty  = wa_asi-menge.

            SELECT einvuom UP TO 1 ROWS
              FROM zeinv_uom
              INTO ls_item-unit WHERE sapuom = wa_asi-meins.
            ENDSELECT.

            IF wa_asi-menge IS NOT INITIAL.
              ls_item-unitprice = wa_asi-assetval / wa_asi-menge.
            ENDIF.
            ls_item-sval = wa_asi-assetval.
            ls_item-txval = ls_item-sval.
            lv_tottxval = lv_tottxval + ls_item-txval.
            lv_tottcsv = lv_tottcsv + wa_asi-tcsval.

            IF flg_igst = 'X'.
              ls_item-irt = wa_asi-igstper.
              ls_item-iamt = wa_asi-igstval.
              lv_totiamt = lv_totiamt + ls_item-iamt.
            ELSE.
              ls_item-crt = wa_asi-igstper / 2.
              ls_item-srt = wa_asi-igstper / 2.
              ls_item-camt = wa_asi-cgstval.
              ls_item-samt = wa_asi-sgstval.
              lv_totcamt = lv_totcamt + ls_item-camt.
              lv_totsamt = lv_totsamt + ls_item-samt.
            ENDIF.

            ls_item-itmval = ls_item-sval + ls_item-iamt + ls_item-camt + ls_item-samt + wa_asi-tcsval.
            IF ( wa_asi-man IS INITIAL OR wa_asi-man = '0' OR wa_asi-man = '0.00' ) AND wa_asi-ztcode = 'F-92'
            AND wa_asi-igstval IS INITIAL AND wa_asi-cgstval IS INITIAL AND wa_asi-sgstval IS INITIAL.
              DATA(taxval) = 'X'.
            ENDIF.
            IF taxval = 'X'.
              ls_item-disc = wa_asi-assetval.
              ls_item-txval = ls_item-txval - wa_asi-assetval.
              ls_item-othchrg = wa_asi-assetval + wa_asi-tcsval.
*              ls_item-itmval = ls_item-itmval - wa_asi-assetval.
*              lv_tottxval = lv_tottxval - wa_asi-assetval.
            ELSE.
              ls_item-othchrg = wa_asi-tcsval.
            ENDIF.


            CONDENSE: ls_item-no,
                      ls_item-prdnm,
                      ls_item-prddesc,
                      ls_item-hsncd,
                      ls_item-qty,
                      ls_item-unit,
                      ls_item-unitprice,
                      ls_item-itmval,
                      ls_item-sval,
                      ls_item-txval,
                      ls_item-crt,
                      ls_item-srt,
                      ls_item-irt,
                      ls_item-iamt,
                      ls_item-camt,
                      ls_item-samt,
                      ls_item-othchrg,
                      ls_item-disc.
            IF ls_item-irt IS INITIAL.
              ls_item-irt = '0'.
            ENDIF.
            IF ls_item-crt IS INITIAL.
              ls_item-crt = '0'.
            ENDIF.
            IF ls_item-srt IS INITIAL.
              ls_item-srt = '0'.
            ENDIF.
            IF ls_item-iamt IS INITIAL.
              ls_item-iamt = '0'.
            ENDIF.
            IF ls_item-camt IS INITIAL.
              ls_item-camt = '0'.
            ENDIF.
            IF ls_item-samt IS INITIAL.
              ls_item-samt = '0'.
            ENDIF.
            IF ls_item-othchrg IS INITIAL.
              ls_item-othchrg = '0'.
            ENDIF.
            IF ls_item-disc IS INITIAL.
              ls_item-disc = '0'.
            ENDIF.
            APPEND ls_item TO lt_item.
            CLEAR : ls_item.
          ENDLOOP.
          CLEAR : lv_count1,lv_totinval.
          lv_totinval = lv_tottxval + lv_totcamt + lv_totsamt + lv_totiamt + lv_tottcsv.
          IF taxval = 'X'.
            CLEAR : lv_tottxval.
          ENDIF.
          IF ls_irn-catg IS INITIAL.
            IF lv_totinval GT lv_budget.
              IF ls_irn-ntr = 'INTER'.
                ls_irn-catg = 'B2CL'.
              ELSE.
                ls_irn-catg = 'B2CS'.
              ENDIF.
            ELSE.
              ls_irn-catg = 'B2CS'.
            ENDIF.
          ENDIF.
          ls_irn-itemlist = lt_item[].

          ls_irn-tottxval = lv_tottxval.
          ls_irn-totiamt = lv_totiamt.
          ls_irn-totcamt = lv_totcamt.
          ls_irn-totsamt = lv_totsamt.
          IF taxval = 'X'.
            CLEAR : taxval.
            ls_irn-totinvval = lv_totinval.
          ELSE.
            ls_irn-totinvval = ls_irn-tottxval + ls_irn-totiamt + ls_irn-totcamt + ls_irn-totsamt + lv_tottcsv.
          ENDIF.

          CONDENSE : ls_irn-forcur,ls_irn-ntr.

          IF ls_irn-forcur IS INITIAL.
            ls_irn-forcur = 'null'.
          ENDIF.
          IF ls_irn-invforcur IS INITIAL.
            ls_irn-invforcur = '0'.
          ENDIF.
          IF ls_irn-totothchrg IS INITIAL.
            ls_irn-totothchrg = '0'.
          ENDIF.
          IF ls_irn-totiamt IS INITIAL.
            ls_irn-totiamt = '0'.
          ENDIF.
          IF ls_irn-totcamt IS INITIAL.
            ls_irn-totcamt = '0'.
          ENDIF.
          IF ls_irn-totsamt IS INITIAL.
            ls_irn-totsamt = '0'.
          ENDIF.
          ls_irn-gen9 = 'Asset Transfer Process' .                                        "ad by akshay_D-117834
          CONDENSE: ls_irn-doctype, ls_irn-catg, ls_irn-trntyp, ls_irn-no, ls_irn-rchrg, ls_irn-sgstin, ls_irn-strdnm,
                    ls_irn-sloc, ls_irn-sstcd, ls_irn-spin, ls_irn-bgstin, ls_irn-btrdnm, ls_irn-bloc,
                    ls_irn-bstcd, ls_irn-bpin, ls_irn-togstin, ls_irn-totrd_nm,ls_irn-toloc,
                    ls_irn-tostcd, ls_irn-topin, ls_irn-taxsch, ls_irn-totinvval, ls_irn-tottxval,
                    ls_irn-totcamt, ls_irn-totsamt, ls_irn-totiamt,ls_irn-gen9.
          APPEND ls_irn TO lt_irn.

          ls_einv_master-bukrs = ls_dtchk-bukrs.
          ls_einv_master-werks = wa_ash-owerks.
          IF line_exists( it_wk[ werks = wa_ash-owerks ] ).
            ls_einv_master-region = it_wk[ werks = wa_ash-owerks ]-regio.
          ENDIF.
          ls_einv_master-invoice_no = wa_ash-cr_rcpt_no. "sneha-122943
          ls_einv_master-user_gstin = ls_irn-sgstin.
          ls_einv_master-zmodule = 'FI'.
          ls_einv_master-sap_doc = ls_dtchk-belnr.
          ls_einv_master-creation_date = ls_dtchk-bldat.
          ls_einv_master-gjahr = ls_dtchk-gjahr.
          CONDENSE: ls_einv_master-bukrs, ls_einv_master-werks, ls_einv_master-region,
                    ls_einv_master-invoice_no, ls_einv_master-zmodule, ls_einv_master-sap_doc.
          APPEND ls_einv_master TO lt_einv_master.
          CLEAR : ls_einv_master.
          CLEAR : lv_count,ls_irn.
          REFRESH : lt_item,ls_irn-itemlist.
        ENDIF.
        CLEAR : ls_bg.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  EXCEL_INV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM excel_inv .
  DATA : lv_street TYPE adrc-street.
  DATA : lv_str_suppl1 TYPE adrc-str_suppl1.
  DATA : lv_str_suppl2 TYPE adrc-str_suppl2.
  DATA : lv_country TYPE kna1-land1.

  SELECT *
     FROM zsd_cust_inv_man
     INTO TABLE @DATA(it_manu)
     WHERE h_ti IN @s_ti
     AND   werks IN @s_werks
     AND   h_bukrs = '1000'.
  IF sy-subrc = 0.

    LOOP AT it_manu INTO DATA(wa_manu).

      IF wa_manu-h_ti CP '*CN*'.
        ls_irn-doctype = 'C'.
        ls_irn-refinum = wa_manu-h_invno.
        ls_irn-refidt = wa_manu-h_invdate.
        IF ls_irn-refidt IS NOT INITIAL.
          REPLACE ALL  OCCURRENCES OF '.' IN ls_irn-refidt WITH '-'.
        ENDIF.
*      ELSE.
*        ls_irn-doctype = 'RI'.
      ENDIF.

* SOC 117165
      IF wa_manu-h_ti CP '*TI*'.
        ls_irn-doctype = 'RI'.
        ls_irn-refinum = wa_manu-h_invno.
        ls_irn-refidt = wa_manu-h_invdate.
        IF ls_irn-refidt IS NOT INITIAL.
          REPLACE ALL  OCCURRENCES OF '.' IN ls_irn-refidt WITH '-'.
        ENDIF.
      ENDIF.
* EOC 117165

      IF wa_manu-h_ti CP '*DN*'.
        ls_irn-doctype = 'D'.
        ls_irn-refinum = wa_manu-h_invno.
        ls_irn-refidt = wa_manu-h_invdate.
        IF ls_irn-refidt IS NOT INITIAL.
          REPLACE ALL  OCCURRENCES OF '.' IN ls_irn-refidt WITH '-'.
        ENDIF.
*      ELSE.
*        ls_irn-doctype = 'RI'.
      ENDIF.

*****soc by akshay_d- 116031     "CH-116031
      IF wa_manu-waerk NE 'INR' AND ( wa_manu-zinv_flag = 'E' OR wa_manu-zinv_flag EQ 'C' ).
        IF wa_manu-waerk EQ 'JPY'.
          wa_manu-exch_rate = wa_manu-exch_rate / 100.
        ENDIF.
        wa_manu-taxable    = wa_manu-taxable * wa_manu-exch_rate.
        wa_manu-igst_value = wa_manu-igst_value * wa_manu-exch_rate.
        wa_manu-cgst_value = wa_manu-cgst_value * wa_manu-exch_rate.
        wa_manu-sgst_value = wa_manu-sgst_value * wa_manu-exch_rate.
      ENDIF.
*****eoc by akshay_d- 116031     "CH-116031

      ls_irn-trntyp = 'Regular'.
      ls_irn-rchrg = 'N'.
      ls_irn-strdnm = 'Larsen & Toubro Limited - Power IC'.
      ls_irn-taxsch = 'GST'.

      ls_irn-no = wa_manu-h_ti.
      CONCATENATE wa_manu-created_on+6(2) wa_manu-created_on+4(2) wa_manu-created_on+0(4) INTO ls_irn-dt SEPARATED BY '-'.

      SELECT a~vkbur,
             p~name1,
             p~region,
             p~post_code1,
             p~country,
             c~bezei,
             p~street,
             p~str_suppl1,
             p~str_suppl2
        FROM vbak AS a
        INNER JOIN tvbur AS tv ON tv~vkbur = a~vkbur
        LEFT OUTER JOIN adrc AS p ON tv~adrnr = p~addrnumber
        INNER JOIN t005u AS c ON p~region = c~bland AND c~land1 = 'IN' AND c~spras = 'E'
        INTO @DATA(wa_bk) UP TO 1 ROWS
        WHERE a~vbeln = @wa_manu-mastcon.
      ENDSELECT.

      SELECT gstin UP TO 1 ROWS
        FROM t001w AS t
        INNER JOIN j_1bbranch AS j ON j~branch = t~j_1bbranch AND j~bukrs = '1000'
        INTO ls_irn-sgstin
        WHERE t~werks = wa_manu-werks.
      ENDSELECT.

      ls_irn-strdnm = wa_bk-name1.
      ls_irn-sloc   = wa_bk-bezei.
      ls_irn-sstcd  = wa_bk-region.
      ls_irn-spin   = wa_bk-post_code1.
      CONCATENATE wa_bk-street wa_bk-str_suppl1 wa_bk-str_suppl2 INTO ls_irn-sbnm SEPARATED BY space.
      ls_irn-cntcd  = wa_bk-country.
      IF sy-sysid = 'SED' OR sy-sysid = 'SEQ'.
        SELECT gstin UP TO 1 ROWS
          FROM zeinv_gstin
          INTO ls_irn-sgstin
          WHERE zregio = wa_bk-region.
        ENDSELECT.
      ENDIF.
      ls_irn-usergstin = ls_irn-sgstin.

      SELECT a~stcd3 a~name1 a~land1 c~vtext b~bezei a~regio a~pstlz p~street p~str_suppl1 p~str_suppl2
            UP TO 1 ROWS
            FROM vbak AS v
            INNER JOIN kna1 AS a ON a~kunnr = v~kunnr
            LEFT OUTER JOIN t005u AS b ON a~regio = b~bland AND b~land1 = a~land1 AND b~spras = 'E'
            LEFT OUTER JOIN adrc AS p ON a~adrnr = p~addrnumber
            LEFT OUTER JOIN tvgft AS c ON c~spras = sy-langu AND c~gform = a~gform
            INTO (ls_irn-bgstin,ls_irn-btrdnm,lv_country,ls_irn-catg,ls_irn-bloc,ls_irn-bstcd,ls_irn-bpin,lv_street,lv_str_suppl1,lv_str_suppl2)
            WHERE v~vbeln = wa_manu-mastcon.
      ENDSELECT.
      CONCATENATE lv_street lv_str_suppl1 lv_str_suppl2 INTO ls_irn-bbnm SEPARATED BY space.
      CLEAR : lv_street,lv_str_suppl1,lv_str_suppl2.

      IF ls_irn-catg = 'EXWP' OR ls_irn-catg = 'EXWOP'.
        ls_irn-bstcd = '96'.
        ls_irn-bpin  = '999999'.
        ls_irn-bgstin = 'URP'.
      ENDIF.
      IF ls_irn-catg = 'B2CL' OR ls_irn-catg = 'B2CS' OR ls_irn-catg = 'B2C'.
        IF ls_irn-bgstin IS INITIAL.
          ls_irn-bgstin = 'URP'.
        ENDIF.
      ENDIF.
      IF lv_country = 'IN'.
      ELSE.
        ls_irn-bstcd = '96'.
        ls_irn-bpin  = '999999'.
      ENDIF.
      CONDENSE : ls_irn-bstcd.
      ls_irn-pos = ls_irn-bstcd.

      IF ls_irn-dgstin IS INITIAL.
        ls_irn-dgstin = 'null'.
      ENDIF.
      IF ls_irn-dtrdnm IS INITIAL.
        ls_irn-dtrdnm = 'null'.
      ENDIF.
      IF ls_irn-dloc IS INITIAL.
        ls_irn-dloc = 'null'.
      ENDIF.
      IF ls_irn-dstcd IS INITIAL.
        ls_irn-dstcd = 'null'.
      ENDIF.
      IF ls_irn-dpin IS INITIAL.
        ls_irn-dpin = 'null'.
      ENDIF.
      IF ls_irn-tobnm IS INITIAL.
        ls_irn-tobnm = 'null'.
      ENDIF.
      IF ls_irn-togstin IS INITIAL.
        ls_irn-togstin = 'null'.
      ENDIF.
      IF ls_irn-totrd_nm IS INITIAL.
        ls_irn-totrd_nm = 'null'.
      ENDIF.
      IF ls_irn-toloc IS INITIAL.
        ls_irn-toloc = 'null'.
      ENDIF.
      IF ls_irn-tostcd IS INITIAL.
        ls_irn-tostcd = 'null'.
      ENDIF.
      IF ls_irn-topin IS INITIAL.
        ls_irn-topin = 'null'.
      ENDIF.

      ls_item-no = wa_manu-h_ti.

      ls_item-prdnm = wa_manu-description.
      ls_item-prddesc = wa_manu-description.

      REPLACE ALL OCCURRENCES OF ',' IN ls_item-prdnm WITH space.

      ls_item-hsncd = wa_manu-hsnc.
      ls_item-num = wa_manu-srno.
      ls_item-qty = wa_manu-qty.
      ls_item-unit = 'OTH'.
      ls_item-unitprice = wa_manu-taxable."rate.
      ls_item-sval = wa_manu-taxable."total.
      ls_item-txval = wa_manu-taxable.
      ls_irn-tottxval = wa_manu-taxable.

      IF wa_manu-igst_fl = 'X'.
        ls_irn-ntr = 'INTER'.
        ls_item-irt = wa_manu-igst_perc.
        ls_item-iamt = wa_manu-igst_value.
        ls_irn-totiamt = ls_item-iamt.
      ELSE.
        ls_irn-ntr = 'INTRA'.
        ls_item-crt = wa_manu-cgst_perc.
        ls_item-camt = wa_manu-cgst_value.
        ls_irn-totcamt = ls_item-camt.
        ls_item-srt = wa_manu-sgst_perc.
        ls_item-samt = wa_manu-sgst_value.
        ls_irn-totsamt = ls_item-samt.
      ENDIF.

      ls_item-itmval = ls_item-txval + ls_item-iamt + ls_item-camt + ls_item-samt.

      CONDENSE: ls_item-no,
                ls_item-prdnm,
                ls_item-prddesc,
                ls_item-hsncd,
                ls_item-qty,
                ls_item-unit,
                ls_item-unitprice,
                ls_item-itmval,
                ls_item-sval,
                ls_item-txval,
                ls_item-crt,
                ls_item-srt,
                ls_item-irt,
                ls_item-iamt,
                ls_item-camt,
                ls_item-samt.
      IF ls_item-irt IS INITIAL.
        ls_item-irt = '0'.
      ENDIF.
      IF ls_item-crt IS INITIAL.
        ls_item-crt = '0'.
      ENDIF.
      IF ls_item-srt IS INITIAL.
        ls_item-srt = '0'.
      ENDIF.
      IF ls_item-iamt IS INITIAL.
        ls_item-iamt = '0'.
      ENDIF.
      IF ls_item-camt IS INITIAL.
        ls_item-camt = '0'.
      ENDIF.
      IF ls_item-samt IS INITIAL.
        ls_item-samt = '0'.
      ENDIF.
      IF ls_item-othchrg IS INITIAL.
        ls_item-othchrg = '0'.
      ENDIF.
      APPEND ls_item TO lt_item.
      CLEAR : ls_item.

      ls_irn-itemlist = lt_item[].

      ls_irn-totinvval = ls_irn-tottxval + ls_irn-totiamt + ls_irn-totcamt + ls_irn-totsamt.

      IF ls_irn-catg = 'EXWP' OR ls_irn-catg = 'EXWOP' OR ls_irn-catg = 'SEWOP' OR ls_irn-catg = 'SEWP'.
        ls_irn-ntr = 'INTER'.
      ENDIF.

      CONDENSE : ls_irn-forcur,ls_irn-ntr.

      IF ls_irn-forcur IS INITIAL.
        ls_irn-forcur = 'null'.
      ENDIF.
      IF ls_irn-invforcur IS INITIAL.
        ls_irn-invforcur = '0'.
      ENDIF.
      IF ls_irn-totothchrg IS INITIAL.
        ls_irn-totothchrg = '0'.
      ENDIF.
      IF ls_irn-totiamt IS INITIAL.
        ls_irn-totiamt = '0'.
      ENDIF.
      IF ls_irn-totcamt IS INITIAL.
        ls_irn-totcamt = '0'.
      ENDIF.
      IF ls_irn-totsamt IS INITIAL.
        ls_irn-totsamt = '0'.
      ENDIF.

      SELECT SINGLE tran_cat                       "ad by akshay_D-117834
        FROM ztran_cat
        INTO ls_irn-gen9
        WHERE customer = wa_manu-kunnr
        AND   billing_type = wa_manu-zinv_flag.

      CONDENSE: ls_irn-doctype, ls_irn-catg, ls_irn-trntyp, ls_irn-no, ls_irn-rchrg, ls_irn-sgstin, ls_irn-strdnm,
                ls_irn-sloc, ls_irn-sstcd, ls_irn-spin, ls_irn-bgstin, ls_irn-btrdnm, ls_irn-bloc,
                ls_irn-bstcd, ls_irn-bpin, ls_irn-togstin, ls_irn-totrd_nm,ls_irn-toloc,
                ls_irn-tostcd, ls_irn-topin, ls_irn-taxsch, ls_irn-totinvval, ls_irn-tottxval,
                ls_irn-totcamt, ls_irn-totsamt, ls_irn-totiamt,ls_irn-gen9.
      APPEND ls_irn TO lt_irn.

      ls_einv_master-bukrs = wa_manu-h_bukrs.
      ls_einv_master-werks = wa_manu-werks.
      ls_einv_master-region = ls_irn-bstcd.
      ls_einv_master-invoice_no = wa_manu-h_ti.
      ls_einv_master-user_gstin = ls_irn-sgstin.
      ls_einv_master-zmodule = 'FI'.
      ls_einv_master-sap_doc = wa_manu-o_belnr.
      ls_einv_master-creation_date = wa_manu-created_on.
      ls_einv_master-gjahr = wa_manu-o_gjahr.
      CONDENSE: ls_einv_master-bukrs, ls_einv_master-werks, ls_einv_master-region,
                ls_einv_master-invoice_no, ls_einv_master-zmodule, ls_einv_master-sap_doc.
      APPEND ls_einv_master TO lt_einv_master.
      CLEAR : ls_einv_master.
      CLEAR : lv_count,ls_irn,wa_manu.
      REFRESH : lt_item,ls_irn-itemlist.

    ENDLOOP.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  IRN_CATG_CHNG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM irn_catg_chng .
*********soc by akshay_d 115110
  IF lt_irn[] IS NOT INITIAL AND lt_einv_master[] IS NOT INITIAL.
    LOOP AT lt_einv_master INTO DATA(wa_einv).
      SELECT SINGLE lifnr
        FROM bseg INTO @DATA(lv_lifnr)
        WHERE belnr = @wa_einv-sap_doc.

      SELECT SINGLE gstin_status
         FROM zmm_vendor_e_inv
         INTO @DATA(lv_status)
         WHERE vendor = @lv_lifnr.

      IF sy-subrc = 0 AND lv_status NE 'Active'.
        READ TABLE lt_irn ASSIGNING FIELD-SYMBOL(<wa_irn>) WITH KEY no = wa_einv-invoice_no.
        IF sy-subrc EQ 0 AND <wa_irn>-catg NE 'EXWP' AND <wa_irn>-catg NE 'EXWOP' .
          CONDENSE <wa_irn>-totinvval.
          IF <wa_irn>-totinvval GT lv_budget.                                "akshay_D-31/8-115739
            IF <wa_irn>-ntr = 'INTER'.
              <wa_irn>-catg = 'B2CL'.
            ELSE.
              <wa_irn>-catg = 'B2CS'.
            ENDIF.
          ELSE.
            <wa_irn>-catg = 'B2CS'.
          ENDIF.
          <wa_irn>-bgstin = 'URP'.                             "if irn catg = B2C  ,bgstin = URP
        ENDIF.
      ENDIF.
      CLEAR : lv_status ,lv_lifnr , wa_einv.
      UNASSIGN : <wa_irn>.
    ENDLOOP.
  ENDIF.                                                       "lt_irn[] IS NOT INITIAL AND lt_einv_master[]
**********eoc by akshay_D 115110
ENDFORM.

FORM irn_add_det .
  LOOP AT lt_irn ASSIGNING FIELD-SYMBOL(<fs_irn>).
    READ TABLE lt_einv_master INTO DATA(ls_einv) WITH KEY invoice_no = <fs_irn>-no.
    IF sy-subrc = 0.
      SELECT SINGLE a~gjahr,
                    a~belnr,
                    a~usnam,
                    a~budat,
                    b~gkont,
                    b~prctr
        FROM bkpf AS a INNER JOIN bseg AS b
        ON a~belnr = b~belnr
        INTO @DATA(wa_det)
        WHERE a~belnr = @ls_einv-sap_doc
        AND  a~bukrs = @ls_einv-bukrs
        AND  b~buzei EQ '001'
        AND  b~gkont NE @space.

      SELECT SINGLE prctr
        FROM bseg
        INTO wa_det-prctr
        WHERE belnr = ls_einv-sap_doc
        AND bukrs = ls_einv-bukrs
        AND prctr NE ' '.
      IF wa_det IS NOT INITIAL.
        <fs_irn>-refnum = wa_det-belnr.
        <fs_irn>-pdt    = |{ wa_det-budat+6(2) }-{ wa_det-budat+4(2) }-{ wa_det-budat(4) }|.
        <fs_irn>-fy     = wa_det-gjahr.
        <fs_irn>-gen10  = wa_det-gkont.
        <fs_irn>-gen11  = wa_det-prctr.
        <fs_irn>-gen8   = wa_det-usnam.
        CONDENSE : <fs_irn>-refnum ,<fs_irn>-pdt ,<fs_irn>-fy ,<fs_irn>-gen9 ,<fs_irn>-gen10,
                   <fs_irn>-gen11 , <fs_irn>-gen8.
      ENDIF.
      CLEAR: wa_det,ls_einv.
    ENDIF.
  ENDLOOP.
  UNASSIGN : <fs_irn>.
ENDFORM.
